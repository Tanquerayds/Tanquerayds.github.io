<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如我所见</title>
      <link href="/2022/10/25/%E5%A6%82%E6%88%91%E6%89%80%E8%A7%81/"/>
      <url>/2022/10/25/%E5%A6%82%E6%88%91%E6%89%80%E8%A7%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="b7b01435f99c0729c1af230f1c35b0d5283c97e3184bfb1f5fbe79d381a2d208">0bca038eed8a1afa963dd59b310a40ffbcb4cdfbcb9b55b50799421e64a592169eeb36052eee32cdb3c975fc1f97ff89fe91408b6a5a6b41e205aefcd0846ef085693725041ae3903861fa93cac71dcc94171a484235520d0b05f2abe8904dc0a893792b7470cae5189f0746b276f6077bc3e9e7cd3a39acbc19a87a1ac5e25fa610d1661b6243ce455bb40389cb03ab3620a59007840fd15fd9e55c662a3e4b612bee3d9b56f04f1142ab7ea258294d2e2a8ffa980be5fef7f4bde9ddbd40a6b92e4257161f56fa1fefff5d49d287146bdb8d830cfde0bbd01652d59d8ee2264194d07aae02f6fdaaaa49993e01b9a8cf14d32384c0dc3af08533ca00363fd38e453e59f57058b71ee63f6fb8671da1cfb5a1a37d234353d70c4bd24e16006430d6a0384b29be3ee108e9c27a59ec07580231cc838925956613b3a4ee3dd25fe87a13790a3c089b0adbd558e24c139c99c1d83c86570e455eedb7f96faa1ca1cc57f5245fc0076970427a3019536f1a2816b10847cbe94abe9ae5ab3a3c1570fdbe9f02e919231e9654e44881763a14f6d8087f4cf108ee1df69aad4f131870b3ed4ce33fc5d04025f5106fa2fe178956e21664626fb0801f410b68bd986681055089c718bee2a8128be5854a7bb219f8f216ddd3197b2a0b375b07e371ad085dbed9a4527ba12dda408b8dc0cb53c344addbe16c36125e881a1016c323cee12012ab8060629ba3a73e788e62ad291b957efdb5b5054bcff311cb0a778ff6e118544b6669ba2feacf7be23ea00ae6252ea83cc85b56f31261018799c6f2335ca9d3d753270d54bcba0c8413f70abc70de97687be817354cb0a74f1a14ac421c066277eea11f984a9e56f27ba26203601b33cc66ac94201dc844f5d24761f7db89db6e235a63377c5aaf505522d82ea3decdd7534d2c8bf9466e18a6d446da2719a4b42acef94656dde02c471d30c4a7b147b47096daa3061d79767c64bfc1ba83d39212be9d95953e2133d632d63603d7661819e52d4fd351f0003d3043d59cd1ac4cac86321ed1cf835a5c979bd60d71b269ed80e4833de41afcdbe04bc2a085398d56027d836e0e407f36f71ceb3607adf08b29da523b29183ebad5851fb71169ae7ae4d52986cbc4384af8ea53bc7eca5f3f4411bf2f752b8e3bc7541b420fdc0f67f78db34511a59cf26a5dcd731cd9ea10c5fb2b74e6bf5e235966e625c5c9af06404447f38234bc90c85991c1aa89e038888d49396f6b8186bf3a9c6f61c5c34048dd3e2418e2cd468e32d4bfccddb434af557eeaec918021a36d31fd176e4d0e8104bd378678532c545313cda63c5c9643deac8f8f799950a47c89153e9232ed6cd84eb3d76136dc6ee40de201ef70cfe4d917e7714e86fbfa6fa832128fbfe3b98b1ebda96a3b25bc5661d2e27c0262c603c22f5b4aa7bf79fc27cd0799954a7c085f72b55abd6cbd6bb1b548517ff1ed2eea38d53db45a939aadb81ef8caf46ef7e257ba6f04a26aa9952e0b55049c52e26d88caca5f3a72760601eb24d1301d935b3eaeeae80f51480f12b56c550b5beae276d19a54da5ab322604868d567775c8aa982b5a41758223773053134899e3fd6b2cc60d73b2487e72097569640983431fc16e025235db51079824dbf36de3d0fc92f76aae82601abc22e297b8aa6158f39ac0bf5bc5da210de15ed06280ad42b43c09bf0b7ddf64f287f5e6edaf9d24dc2da9dea9b4c2582fa66fb5c8e4162a06cfce213c7f884822e0ea777e4ea477b1d68df1a05c9f4ff710f1d227c8a8e363654347c306195ec2f59f91347139d02b1809b07a3a809ca3a3e0821064eb63781ff382c508375baff2a2d00c0059ff54e62d4e496475f63e2ec31ca6db38cb676bc3123eae0510750319daf71bdefe1ccaf2de48400ff7d78b565df64b98ed2b157ea366702645a434a3db503362966507c4586287142b3b23f0fcaede047f9c47e1bf58417f6db314c10514f1fd1b9c633fbdd5ccb9a3a5d89ad4722ddd743a4cf28f839052e2cb48f2dd4d6e168ae1157aad611ab7bce81c787fed12343267020dbb62527fdc529a11874d1a5c2ef7d41cd3ade83550a144848d192de87da6c0e249575e5ec19c10dc56f382993f61acf67dcb182dfacd52af2ff0afa6d9b4e3614ca3563c80bdd540b346c2d4f83482b8f0b1d0ff6637ab23f0e1a0a70de10f52327f10efc7377a9b4cd38ff840dcc5b35612ea4dffa06094ad0f187b06c88e5c26b7dccd76b84796ef62f62bb992f58262302dbb1e954d642b303e79cb49de75c3579d4bf3627c044f9749b4750c28f5ca6c406f30374944a197b16b1602287ba3d3431454eb183b90ce5dc517f5636f24a3d86e3b5c31d5bba29363a21eb655650b2929f2bc3dd2121b6790ee077866faddd69646b94a8c7323cd72b46ec5b73de31f3f92a456f5c5b129f3b835a1fbeb7a2d23b424be4a02b42d4095512f519ca12ef57c5af31ac870c6f9fff6af82e1a26cfabc51b375ad9d46cf3aca5381a79925380731ddda7531f2ac3c8151fc1989091ae257cf11c7a22ed67a2beb2e3436e79ddcd2d5e7f5ab793423a4c2fa3b717d55c42a3b9fbdd06f744e932052401a2cdc8087f04b5a6390e5d2e69afd5bcd63eda3276c8eba5884b7b0f30f3d50a28376e2989c210f536c07be987078c2e1c03733c9bc7692ec9bb4a2f45954e8be62aed9291616fe050b0b1e2b528b692189ad2f93c67aeae8d6181c71b06b3d36bf33e0df28b1baaac7bc2e8fc56203c21d973ba4d8f9f5c69397d8251d9b0b196b00417c5f6975962714e3aecfee3caf12d8055a74f2308c46a4afa1ad99b96545d3b3ee7688adca70342a7b563129cef544437ade1794e91dd53c151e100190482b0f4950ea8b8beb3abdc6c50bfe315be2982d4780f863ed864078ab0cc77ea66eeed6632869c6bd9aa0b5eb6e09e53e6439d9d4ab83e4a5f87abd839040c25fc780c2f090891df0c307a890ce41f38fc5e164a29fbdff822ba13f94e5f3d32c504aa13c3e059e8d16a8e506e584290eb69bff612813ee57ed57ec59bb31df97bf092ec038d0dddc9b579e0c383f1e22fdaf589edb8430f614c8ca18751d4849f5f0e4c8a56099f5f27c511112f12f1bf92722e209c3a47de5e2d9807a15a97941158eb232c632da4c1fb68534d62d4fe9128dbacf8084c49af7e54e2f04b88e91a76d9c6d72a717f8855ccd6c26746172f99a1c7444a7a662493d752da11d1abd0cbddaf6dee04f645312b72dd0d004dd427f9518aaca65c06a9b65abf56424d2fa92dda34b7c60e70fc99cc17ed96be81fc0587146c8ed1efb6fbb4586df48671e830279507e4d560c184f0107661fd20195ea46bc66582530882b510a1ace1a0c0bdbcdf7a22c3ff81ea1158d3c41aac2ae6e8b11aba50198c52ad6dac22cee8a95a607da8ada57407b837d75a1af92df9af36fe7e473012473531e37f3236fe0b6d2032d477e4c1302e323ff2ad55ff158211adb2d9fe76168e6dc0fcf0690712a1913634e87d170a3dae3294a3abd33425f419ce038405735fc777f0620e3eaeb44d24c25154407d910a6b1cb6a4637dfb9236500f79899f0b8a49b7dd4883f05c8f812fc5ab5fb08432f8c378d86140d89cbf32770c72eeefd70ac4150d39759bb935bfd5dea128b6d3e2609dc3f44a61232e5d2d286cce98efe2e5fcd8586c23a7567e96b2bc8ce4c8efcce6ee2f7afc5292d95e6798581255899cafa2183231e403a553eb6dba488e9dd576ac18d7e804761ada5b149ebe015d10163d127007d361466c8562fda246abd70af207d49ae5698fdaa99bba707da6675e451713834e5b86c69d3e6283e79582cc7bfa56b5b70bf83ec6455d65339b62eb67c84f547d3a6c72940cd741a9537c566432117f7c06b7f324763a9df8ff872e3f71f17398089af758297f977d81aa69a3482a62d4418e91cad8c62a473f9ae36e9e69ff81e216019d878b9bd6e5f7f175b38eb042b4c32c27e3efa920a0ec44e38322feeab64bdc35a01cda925fae20dc98514a9656e709df1e8b63e637d50ee156f01568ca42ed3eb772db82ef0d5145cc79234291bd0ee31e769464659ef11ec50aaf915405d27a505cf9bc80eb2675dc9deb228aa65458df43f66f3dd23bb8de0471ec57270695dc9f99e38a4c02cd5d57ae1900340bcba409eeb9b76cc378fc031eae8788d2122ed051a27c70e4927637d0a9be50b1ff30ce059dff16c515d46da059aeb413f6e9fd8e54561b51e4d728e60c16ea6010fc26fad1486d2ae470942206c83dbb4cd2c1bb0c6df515402aa410697ac05774237691b3ce556465fd8fb355fbe22f75bdcc38008336ffc00c6b8909f8d795f248d528c6e903be825f254be7bb043fcff87674a34b6315933934a4d7dbb05fadf1bb02a3fdf65488eb789406f12a02ee530a601b88ef702737dbcf5b2f89ff4ab3f63c7550464662c3a58758cfee7bd5bd634bf90a1dac292442ed7864f4afff3a3b4c72421495358f0a05e0e43f9865011dc2b6f3fce352c3b47cd3c9e2091775fa54d2518fae873225dba0b280ead3a9807201c53d4260c5841c52f22477ee73ab4632bbc05341bbcf8fc8b89ffd8c701c57e15def36269696f9732b96c12e05c50b2e444e142d29c702b2f407a159a37b79c02a5610a228d6f091e1fcf396d031b6a53796c0e3ace54090b7108feb3cf1bf181630d252d5c8ad868d3b04b1658c306d2e041f19fb5e59dfea58f481bd1298729e25d9d3e81f9787d81944f68827a51bdf4493961232a590737a91b82dc1f8f72e616534850ce04f43e410a496f518c056b2c72a562483c3b617dc1d8fbb4d0a51e57ade691f137f7ca718409242c42f31c6ebc7d3ae365dfd593078cfa9302738a3e077857227a556f70c7a1bc9564522c1e5d5ff451d8ac012825ee1cdeb22fd5a3e6e4e222b9806d333297c93d9a3be5f162fbb73ecca84fdcc7245d5335bbe8ac7610a45c4c0786ff3dc6f738c7199a9372a55c1f826e638ab2341fb96584ebb556ec5a888cd578a6363ba5151269c5940295a63ecfc86f89d111c133829d3b199cfc37f3c8d8eca977447210222c237bb66670f2276a8c16f9062c6b43fc3daa1b3b9863eeec925334b21ad7e23d18a1509203f42e329652e95713497e7a9bd4ed1593c2475ca4925e559e4f1595410a7d1c34e4a294d867487121c3cb5d049b22f1507662abf9177480bf8853f3cf0473379dad9c0a751528e7e94ed4c985d28f8cfe57c728d302c61d601f4103b1739829c128deef1f958cce382f4aff0bfbf2229db805661c9bb0e0ec5f7529cc5f0a1022941c733a0eed67616eb27b5effa4db68b7f8c220624f8f8b2ac2cd78d5910140f3400f1938fee0e5245eacf4adb2120ab8add71b6f5e80e11e7683d875c5954e626cf2e7d93532ea414ee01627719ac575e3a019f694bf8c11858790a46692cd6a4c8655ad3bb0e599b0389e05f3a0b9209a378452aa23f3314dc54b86cdea662afc2e0592ccb3d30bc555ac9de8a0e88bfae7cfbdd1af1d7ee20ed6d4efd08e4e7ee181f6fb712de8fdf5693679f2fda6f7b88fe5e58ff6c670c3e02313da697453bdb7b7dbbf536443b713f8e600d2e2723e410573268b405f7eba391f004f6ca7ee1ecb4bd7d9e02349e182c08a65a6d4dc676dca5850650bf553dfab158ae4c7dc0b7539851fe0d84e4a0ed0811b660038bf3a864f61dc2eeeffae5fedab964f649b922510383cc94c1ad5d175d86d0c76f5b869c03e3898903f2b4018bb0546b56ce31e9f84727761b67d80f5fd0947e490c0533d2f57b14c1f566f4d4d68b6904e772dbf29a12be0db655877e9ae0d3631af497dbe0582bb3eafb6348fdb5f24d1bae0a8c116f62d86e58fbeb198e922fe61da63d3aa4ebf9f3cf88be0dfd3a21c6776a04819ff8cd3168873500c3435778162f4c255a5b69797ec63b4a28a358a3d47ed2cacd0a10dda9168c89786135136a5b308debfd2ea2d8cff40e91e51db50428627df3087e8ead5667d078a9345a6046de6f960bad59893a01e919ce782a39f748b9feaefaa98cf875555f3f82da447c1208636da75c8eefe76b9895241408c4ae4bc68f0c0887b3158f62176c7fdf8a178d02a3740f94cb21bd642a7855deb72f0344bd696d5c3a24a1cd92a4f56d4cc5e5d906fadf578d7002bc8fb3dbf47749d451edc139d452ca2121c1c5abf89d6c56c8ac04073dd14d519ea3ccc9eb75b0c06419d19988f1e20a0da9543dcd17509f280effcff0acade8325b93f436f95588c161a3c83637fea7a47ba5a1c95505aa27369a8d63bb359b90531ff2cad14c96923ecdad81e157bd2c7b09c77b91846d9d3c0ba8ed75b1dd58107ec2c608a1a9fac0c6d972d9b22ff79fd57aba94cf939fa05bb7d465342c0343fd76438f7f27901e8701a5148223a990b656e4b4e0a35f502b1329742f37faab036ab8cca144ed0a32cc2b805e272d521d9e5ac4b8f8f5c29a8182cb505343</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/2022/09/29/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/09/29/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="6aeca0797d9752a6d22799d1b88bf99397da01a04b303c75e80b5a0c803936b5">b1691ba8cf0163eaf53e31e977ee72a15080541b337cf6edc28d3f28b67721aaaa24ba764c8c028c815f791a22e2bc29c734e343d6dbf659c38f91a439be89c693f6c88c9f5dc2f75d8c273018185793bff452615c20544230e01db7341d948bcceec96131c138bcb69c30eb2a86e6e15085f023ef44860c8f9ff6562157d4cd4c1b950f423dfca9b36880151ec2ea94d609bdedf09ddae93552f0b4e0b03d54eb75b2b25f6c1c7853c27adfd49438af3bdae55e72bf3d4a7bd61616ea90e200aaa819f1dd3d54d83db674518753e221a3e6ce66f275bf67339f6c7cd72a31324fc35f6165b2b9cab66828fb2216aa31ad1f1dce0129961002fa48830eb37703581b655ecd78b966a574aabf705fc1e03fb3115f481efc66455e5e82c9ab5050be1657a1efdb35aae06102ccf6932cc7cf89ba5039cec33bf271de196d702d8d235078026b716d92be3573809c6520ec3fe9a47252072e3e045f51a2db63babc6a1e42f5803142462e648e2818c157c7e7c509c872d84cd623a59e599de9ec19e4488c23451c3e19a13b0b070f00e5124a6db4098952e71dc5ecde080fd4d5f35c7eef13e47d07cc45d85a35075f40627860cb0b54a89999646a43026e69564f35bc578e0a049a99e3cdf3d82a1b906b4027b62450290b76f3951cc16cb0d2c5ec2783d7dfc790e95612f9bd952d982d1ed5d5a2340bb439876b835fe5270aaff4ac55a089f2931ac9d35f274e825a5fe74e42a6a1fe6e1464a800c2a8eb06cb4b48fa22fbd5d647bc2b4957b37265a47545ffaaec0f7b45b249df30793d097b1724b4d16f6c96990379ff0eba30a9cec3cc4f02c48ee85aa78da5e5c111b0a0b21d313513ad25858f956aa2b915cf1b6f8d090c567f0148a487cd59ddb1e6cb509d8108031b248ecb441e272116cdb35476711923029ed8442473bb106502bbc13a882b24c5f6773682c780d4553fd7ab31ae29c0a72820efa4d30a6cbffe287fa1d5e82dcb99b0ed354809dc04036d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>老杜笔记</title>
      <link href="/2022/09/29/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/29/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于直播"><a href="#关于直播" class="headerlink" title="关于直播"></a>关于直播</h1><ol><li>什么时间直播？<ul><li>晚上8:00到10:00</li></ul></li><li>每周直播几天？<ul><li>3天（周一、周三、周五）</li><li>本周比较特殊：周四周五周六三天直播，从下周开始就是一三五直播。</li></ul></li><li>直播什么内容？<ul><li>从JavaWEB开始。（Servlet为核心，从Servlet开始学习。）</li><li>JSP（JSP使用较少了，但是还有用，所以时间上少一些。快速地学习一下JSP。）</li><li>AJAX（异步通信技术。）</li><li>jQuery（JavaScript库。）</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>….</li></ul></li></ol><h1 id="需要提前准备了哪些技术，接下来的课才能听懂？"><a href="#需要提前准备了哪些技术，接下来的课才能听懂？" class="headerlink" title="需要提前准备了哪些技术，接下来的课才能听懂？"></a>需要提前准备了哪些技术，接下来的课才能听懂？</h1><ul><li>JavaSE（Java语言的标准版，Java提供的最基本的类库）<ul><li>Java的开发环境搭建</li><li>Java的基础语法</li><li>Java的面向对象</li><li>数组</li><li>常用类</li><li>异常</li><li>集合</li><li>多线程</li><li>IO流</li><li>反射机制</li><li>注解Annotation</li><li>…..</li></ul></li><li>MySQL（数据库）<ul><li>最基本的要求是：能够编写增删改查等简单的SQL语句即可。</li></ul></li><li>JDBC（Java语言链接数据库）<ul><li>这是一套Java语言链接数据库的接口。</li></ul></li><li>WEB前端（会一些）<ul><li>HTML（网页）</li><li>CSS（层叠样式表语言，修饰HTML）</li><li>JavaScript（一种脚本语言，运行在浏览器当中，让浏览器中的元素可以增删改。让网页产生更强的交互效果）</li></ul></li><li>WEB后端<ul><li>Servlet（Server Applet：服务器端的Java小程序）</li><li>JSP</li><li>AJAX</li><li>jQuery</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>……</li></ul></li></ul><h1 id="Typora软件介绍"><a href="#Typora软件介绍" class="headerlink" title="Typora软件介绍"></a>Typora软件介绍</h1><ul><li><p>Markdown文本编辑器（可以编辑xxx.md文件）</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-kbthlolbavf10x"></i><span>java</span><div class="collapse show" id="collapse-kbthlolbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Test code!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure></li></ul><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><ol><li>系统架构包括什么形式？<ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul></li><li>C&#x2F;S架构？<ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li><li>C&#x2F;S架构的软件或者说系统有哪些呢？<ul><li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li></ul></li><li>C&#x2F;S架构的特点：需要安装特定的客户端软件。</li><li>C&#x2F;S架构的系统优点和缺点分别是什么？<ul><li>优点：<ul><li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C&#x2F;S结构的系统速度快）</li><li>体验好（速度又快，界面又酷炫，当然体验好了。）</li><li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li><li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li><li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C&#x2F;S结构的系统比较安全。）</li><li>…..</li></ul></li><li>缺点：<ul><li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li></ul></li></ul></li></ul></li><li>B&#x2F;S架构？<ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li><a href="http://www.jd.com/">http://www.jd.com</a></li><li><a href="http://www.126.com/">http://www.126.com</a></li><li>B&#x2F;S结构的系统是不是一个特殊的C&#x2F;S系统？<ul><li>实际上B&#x2F;S结构的系统还是一个C&#x2F;S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li></ul></li><li>B&#x2F;S结构的系统优点和缺点是：<ul><li>优点：<ul><li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li><li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点：<ul><li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B&#x2F;S结构的系统在网络中传送的数据量比较大。）</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li><li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li><li>….</li></ul></li></ul></li></ul></li><li>C&#x2F;S和B&#x2F;S结构的系统，哪个好，哪个不好？<ul><li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li><li>娱乐性软件建议使用？<ul><li>C&#x2F;S 结构</li></ul></li><li>公司内部使用的一些业务软件建议使用？<ul><li>公司内部使用的系统，需要维护成本低。</li><li>公司内部使用的系统，不需要很酷炫。</li><li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li><li>B&#x2F;S 结构。</li></ul></li></ul></li><li>注意了：开发B&#x2F;S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。<ul><li>开发一个WEB系统你需要会哪些技术？<ul><li>WEB前端（运行在浏览器上的程序。）<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>WEB后端（WEB服务器端的程序。）<ul><li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li><li>C语言也可以</li><li>C++也可以</li><li>Python也行</li><li>PHP也可以</li><li>….</li></ul></li></ul></li></ul></li><li>JavaEE是什么？<ul><li>Java包括三大块：<ul><li>JavaSE<ul><li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li></ul></li><li>JavaEE（WEB方向，WEB系统。）<ul><li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li><li>别人写好的，你用就行了，用它可以开发企业级项目。</li><li>可以开发web系统。</li><li>Java比较火爆的就是这个JavaEE方向。</li></ul></li><li>JavaME<ul><li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li><li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li></ul></li></ul></li><li>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</li></ul></li></ol><h2 id="B-x2F-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-x2F-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）"></a>B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）</h2><ul><li>WEB系统的访问过程<ul><li>第一步：打开浏览器</li><li>第二步：找到地址栏</li><li>第三步：输入一个合法的网址</li><li>第四步：回车</li><li>第五步：在浏览器上会展示响应的结果。</li></ul></li><li>关于域名：<ul><li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 是一个域名</li><li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li><li>解析结果也许是：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li></ul></li><li>IP地址是啥？<ul><li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li><li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li></ul></li><li>端口号是啥？<ul><li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li><li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li><li>在同一个计算机上，端口号具有唯一性。</li></ul></li><li>一个WEB系统的通信原理？通信步骤：<ul><li>第一步：用户输入网址（URL）</li><li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li><li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li><li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li><li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li><li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li><li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li><li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li></ul></li><li>什么是URL？<ul><li>统一资源定位符（<a href="http://www.baidu.com)/">http://www.baidu.com）</a></li></ul></li><li>什么是请求，什么是响应？<ul><li>请求和响应实际上说的是数据的流向不同。</li><li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li><li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li><li>B –&gt; S （请求request）</li><li>S –&gt; B （响应response）</li></ul></li></ul><h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><ul><li><p>WEB服务器软件都有哪些呢？（这些软件都是提前开发好的。）</p><ul><li>Tomcat（WEB服务器）</li><li>jetty（WEB服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul></li><li><p>应用服务器和WEB服务器的关系？</p><ul><li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li><li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li><li>用过JBOSS服务器的同学应该很清楚，JBOSS中内嵌了一个Tomcat服务器。</li></ul></li><li><p>Tomcat下载</p><ul><li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li><li>tomcat官网地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li><li>tomcat开源免费的轻量级WEB服务器。</li><li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li></ul></li><li><p>Tomcat服务器要想运行，需要先有jre，所以要先安装JDK，配置java运行环境。</p><ul><li>JAVA_HOME&#x3D;C:\Program Files\Java\jdk-17.0.1</li><li>PATH&#x3D;%JAVA_HOME%\bin</li><li>目前JAVA_HOME没有配置，思考一个问题，这样行不行呢？目前只运行java程序是没问题的。真的没问题吗？</li></ul></li><li><p>Tomcat服务器的安装：</p><ul><li>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。</li><li>我有一个好习惯，在C盘的根目录下新建一个dev目录，java开发所有相关的工具都安装到dev目录下，这样比较方便管理。（你随意）</li><li>启动Tomcat<ul><li>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。<ul><li>xxx.bat文件是个什么文件？bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</li><li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li><li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li><li>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</li><li>catalina.bat文件中有这样一行配置：MAINCLASS&#x3D;org.apache.catalina.startup.Bootstrap （这个类就是main方法所在的类。）</li><li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</li></ul></li><li>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</li><li>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置：<ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li></ul></li></ul></li></ul></li><li><p>关于Tomcat服务器的目录</p><ul><li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li><li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li><li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp：Tomcat服务器的临时目录。存储临时文件。</li><li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li><li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li></ul></li><li><p>配置Tomcat服务器需要哪些环境变量？</p><ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li><li>PATH&#x3D;%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li></ul></li><li><p>启动Tomcat： startup</p></li><li><p>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。）</p></li><li><p>怎么测试Tomcat服务器有没有启动成功呢？</p><ul><li>打开浏览器，在浏览器的地址栏上输入URL即可：<ul><li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li><li>ip地址是什么？端口号我知道，是8080</li><li>本机的IP地址是：127.0.0.1，或者是localhost，都行。</li></ul></li></ul></li></ul><h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><ul><li><p>第一步：找到CATALINA_HOME\webapps目录</p><ul><li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li></ul></li><li><p>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa</p><ul><li>这个目录名oa就是你这个webapp的名字。</li></ul></li><li><p>第三步：在oa目录下新建资源文件，例如：index.html</p><ul><li>编写index.html文件的内容。</li></ul></li><li><p>第四步：启动Tomcat服务器</p></li><li><p>第五步：打开浏览器，在浏览器地址栏上输入这样的URL：</p></li><li><p><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></p></li><li><p>思考一个问题：</p><ul><li><p>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</p><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-av0vgklbavf10x"></i><span>html</span><div class="collapse show" id="collapse-av0vgklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span><br><span class="hljs-comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> </p><ul><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。（动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的数据是动态的，根据数据库中数据的变化而变化。）</li></ul></li></ul><h2 id="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"><a href="#对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议" class="headerlink" title="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"></a>对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议</h2><p><img src="D:\course\01-Servlet\文档\BS结构系统的通信原理2.png" alt="BS结构系统的通信原理2"></p><ul><li>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）<ul><li>浏览器软件的开发团队（浏览器软件太多了：谷歌浏览器、火狐浏览器、IE浏览器….）</li><li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li><li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li><li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li></ul></li><li>角色和角色之间需要遵守哪些规范，哪些协议<ul><li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。<ul><li>Servlet规范的作用是什么？<ul><li>WEB Server   和   webapp解耦合。</li></ul></li></ul></li><li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li><li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li></ul></li></ul><p><img src="D:\course\01-Servlet\文档\BS结构系统的角色和协议.png" alt="BS结构系统的角色和协议"></p><ul><li>Servlet规范是一个什么规范？<ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li><li>Servlet规范包括什么呢？<ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>…..</li></ul></li></ul></li></ul><h2 id="开发一个带有Servlet（Java小程序）的webapp（重点）"><a href="#开发一个带有Servlet（Java小程序）的webapp（重点）" class="headerlink" title="开发一个带有Servlet（Java小程序）的webapp（重点）"></a>开发一个带有Servlet（Java小程序）的webapp（重点）</h2><ul><li><p>开发步骤是怎样的？</p><ul><li><p>第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</p><ul><li>注意：crm就是这个webapp的根</li></ul></li><li><p>第二步：在webapp的根下新建一个目录：WEB-INF</p><ul><li>注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。</li></ul></li><li><p>第三步：在WEB-INF目录下新建一个目录：classes</p><ul><li>注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。</li></ul></li><li><p>第四步：在WEB-INF目录下新建一个目录：lib</p><ul><li>注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。</li></ul></li><li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p><ul><li><p>注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。</p></li><li><p>这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴</p></li><li><p>&#96;&#96;&#96;xml</p><?xml version="1.0" encoding="UTF-8"?><p><web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee                  https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"  version="5.0"  metadata-complete="true"></p></web-app><figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-7ysilalbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-7ysilalbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。<br><br>  - 这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）<br>  - Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）<br>  - Servlet接口是JavaEE的规范中的一员。<br>  - Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOME\lib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。<br>  - 重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet<br>  - 注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。<br><br>- 第七步：编译我们编写的HelloServlet<br><br>  - 重点：你怎么能让你的HelloServlet编译通过呢？配置环境变量CLASSPATH<br><br>    CLASSPATH=.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar<br><br>  - 思考问题：以上配置的CLASSPATH和Tomcat服务器运行有没有关系？<br><br>    - 没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。<br><br>- 第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。<br><br>- 第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。<br><br>  - 这一步用专业术语描述：在web.xml文件中注册Servlet类。<br><br>  - ```xml<br>    <span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                          https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--servlet描述信息--&gt;</span><br>    <span class="hljs-comment">&lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--这个位置必须是带有包名的全限定类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bjpowernode.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--servlet映射信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--这个也是随便的，不过这里写的内容要和上面的一样。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>fdsafdsagfdsafdsa<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--这里需要一个路径--&gt;</span><br>    <span class="hljs-comment">&lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span><br>    <span class="hljs-comment">&lt;!--当前这个路径可以随便写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/fdsa/fd/saf/d/sa/fd/sa/fd<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br>    <br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>第十步：启动Tomcat服务器</p></li><li><p>第十一步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是：</p><ul><li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>   </li><li>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</li><li>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：&#x2F;crm</li></ul></li><li><p>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>）</p></li><li><p>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。</p></li><li><p>总结一下：一个合法的webapp目录结构应该是怎样的？</p><figure class="highlight jboss-cli"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-8amrdqlbavf10x"></i><span>jboss-cli</span><div class="collapse show" id="collapse-8amrdqlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">webapproot<br>     |<span class="hljs-params">------WEB-INF</span><br>       |<span class="hljs-params">------classes</span><span class="hljs-params">(存放字节码)</span><br>       |<span class="hljs-params">------lib</span><span class="hljs-params">(第三方jar包)</span><br>       |<span class="hljs-params">------web</span>.xml<span class="hljs-params">(注册Servlet)</span><br>     |<span class="hljs-params">------html</span><br>     |<span class="hljs-params">------css</span><br>     |<span class="hljs-params">------javascript</span><br>     |<span class="hljs-params">------image</span><br>     <span class="hljs-string">....</span><br></code></pre></td></tr></table></div></figure></li><li><p>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。）</p><ul><li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>  </li><li>然后Tomcat服务器接收到请求，截取路径：&#x2F;crm&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  </li><li>Tomcat服务器找到crm项目</li><li>Tomcat服务器在web.xml文件中查找&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li><li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li><li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li></ul></li></ul></li></ul><h2 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h2><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h2 id="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）</h2><p>将CATALINA_HOME&#x2F;conf&#x2F;logging.properties文件中的内容修改如下：</p><p>java.util.logging.ConsoleHandler.encoding &#x3D; GBK</p><h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-oavi5zlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-oavi5zlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span>&#123;<br>    response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>    out.print(<span class="hljs-string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></div></figure><h2 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h2><ul><li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF&#x2F;lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li></ul><h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li><p>使用IDEA集成开发工具开发Servlet</p><ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File –&gt; new –&gt; Module…）<ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet）<ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ksohddlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-ksohddlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;web-app xmlns=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br>         version=<span class="hljs-string">&quot;4.0&quot;</span>&gt;<br><br>    &lt;servlet&gt;<br>        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;<br>        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;<br>    &lt;/servlet&gt;<br>    &lt;servlet-mapping&gt;<br>        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;<br>        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;<br>    &lt;/servlet-mapping&gt;<br>    <br>&lt;/web-app&gt;<br></code></pre></td></tr></table></div></figure><ul><li><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li><li><p>&#96;&#96;&#96;html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>student page</title></head><body>    <!--这里的项目名是 /xmm ，无法动态获取，先写死-->    <a href="/xmm/servlet/student">student list</a></body></html><figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-6xa5e5lbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-6xa5e5lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">      </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">  -</span> 第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。<br><br><span class="hljs-bullet">    -</span> IDEA工具右上角，绿色小锤子右边有一个：Add Configuration<br><span class="hljs-bullet">    -</span> 左上角加号，点击Tomcat Server --&gt; local<br><span class="hljs-bullet">    -</span> 在弹出的界面中设置服务器Server的参数（基本上不用动）<br><span class="hljs-bullet">    -</span> 在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。<br><span class="hljs-bullet">    -</span> 修改 Application context为：/xmm<br><br><span class="hljs-bullet">  -</span> 第十一步：启动Tomcat服务器<br><br><span class="hljs-bullet">    -</span> 在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。<br><span class="hljs-bullet">    -</span> 我们开发中建议适用debug模式启动Tomcat<br><br><span class="hljs-bullet">  -</span> 第十二步：打开浏览器，在浏览器地址栏上输入：http://localhost:8080/xmm/student.html<br><br><span class="hljs-section">## Servlet对象的生命周期</span><br><br><span class="hljs-bullet">-</span> 什么是Servlet对象生命周期？<br><br><span class="hljs-bullet">  -</span> Servlet对象什么时候被创建。<br><span class="hljs-bullet">  -</span> Servlet对象什么时候被销毁。<br><span class="hljs-bullet">  -</span> Servlet对象创建了几个？<br><span class="hljs-bullet">  -</span> Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。<br><br><span class="hljs-bullet">-</span> Servlet对象是由谁来维护的？<br><br><span class="hljs-bullet">  -</span> Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。<br><span class="hljs-bullet">  -</span> Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。<br><span class="hljs-bullet">  -</span> Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）<br><span class="hljs-bullet">  -</span> WEB容器来管理Servlet对象的死活。<br><br><span class="hljs-bullet">-</span> 思考：我们自己new的Servlet对象受WEB容器的管理吗？<br><br><span class="hljs-bullet">  -</span> 我们自己new的Servlet对象是不受WEB容器管理的。<br><span class="hljs-bullet">  -</span> WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）<br><span class="hljs-bullet">  -</span> web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系<br><span class="hljs-bullet">  -</span> ![<span class="hljs-string">WEB容器中的Map集合</span>](<span class="hljs-link">D:\course\01-Servlet\文档\WEB容器中的Map集合.png</span>)<br><br><span class="hljs-bullet">-</span> 研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？<br><br><span class="hljs-bullet">  -</span> 在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。<br><span class="hljs-bullet">  -</span> 经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。<br><span class="hljs-bullet">  -</span> 这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。<br><br><span class="hljs-bullet">-</span> 怎么让服务器启动的时候创建Servlet对象呢？<br><br><span class="hljs-bullet">  -</span> 在servlet标签中添加<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span></span>子标签，在该子标签中填写整数，越小的整数优先级越高。<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```xml</span><br><span class="hljs-code">    &lt;servlet&gt;</span><br><span class="hljs-code">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="hljs-code">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.AServlet&lt;/servlet-class&gt;</span><br><span class="hljs-code">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="hljs-code">    &lt;/servlet&gt;</span><br><span class="hljs-code">    &lt;servlet-mapping&gt;</span><br><span class="hljs-code">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="hljs-code">        &lt;url-pattern&gt;/a&lt;/url-pattern&gt;</span><br><span class="hljs-code">    &lt;/servlet-mapping&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>Servlet对象生命周期</p><ul><li><p>默认情况下服务器启动的时候AServlet对象并没有被实例化</p></li><li><p>用户发送第一次请求的时候，控制台输出了以下内容：</p><figure class="highlight oxygene"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-6b13rnlbavf10x"></i><span>oxygene</span><div class="collapse show" id="collapse-6b13rnlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">AServlet无参数构造方法执行了<br>AServlet<span class="hljs-string">&#x27;s init method execute!</span><br><span class="hljs-string">AServlet&#x27;</span>s service <span class="hljs-keyword">method</span> <span class="hljs-title function_">execute</span>!<br></code></pre></td></tr></table></div></figure></li><li><p>根据以上输出内容得出结论：</p><ul><li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）</li><li>AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li><li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li></ul></li><li><p>用户继续发送第二次请求，控制台输出了以下内容：</p><figure class="highlight ada"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-wfj27glbavf10x"></i><span>ada</span><div class="collapse show" id="collapse-wfj27glbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">AServlet<span class="hljs-symbol">&#x27;s</span> service method execute!<br></code></pre></td></tr></table></div></figure></li><li><p>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：</p><ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为假单例。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个对象的创建只能是Tomcat来说了算，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li><p>关闭服务器的时候，控制台输出了以下内容：</p><figure class="highlight ada"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-692s6jlbavf10x"></i><span>ada</span><div class="collapse show" id="collapse-692s6jlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">AServlet<span class="hljs-symbol">&#x27;s</span> destroy method execute!<br></code></pre></td></tr></table></div></figure></li><li><p>通过以上输出内容，可以得出以下结论：</p><ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li><li>destroy方法是在什么时候被调用的？<ul><li>在服务器关闭的时候。</li><li>因为服务器关闭的时候要销毁AServlet对象的内存。</li><li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li></ul></li></ul></li><li><p>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？</p><ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li></ul></li><li><p>Servlet对象更像一个人的一生：</p><ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li><li><p>关于Servlet类中方法的调用次数？</p><ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul></li><li><p>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</p><ul><li>报错了：500错误。</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul></li><li><p>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</p><ul><li>不能。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，不建议手动编写构造方法，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul></li><li><p>init、service、destroy方法中使用最多的是哪个方法？</p><ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？<ul><li>init方法很少用。</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行资源的关闭。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul></li></ul></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><ul><li><p>我们编写一个Servlet类直接实现Servlet接口有什么缺点？</p><ul><li>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</li></ul></li><li><p>适配器设计模式Adapter</p><ul><li>手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</li></ul></li><li><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul></li><li><p>思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？</p><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考第二个问题：init方法是谁调用的？</p><ul><li>Tomcat服务器调用的。</li></ul></li><li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p><ul><li>都是Tomcat干的。</li><li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p><ul><li>&#96;&#96;&#96;java<br>public class Tomcat {<br>public static void main(String[] args){<br>    &#x2F;&#x2F; …..<br>    &#x2F;&#x2F; Tomcat服务器伪代码<br>    &#x2F;&#x2F; 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）<br>    Class clazz &#x3D; Class.forName(“com.bjpowernode.javaweb.servlet.LoginServlet”);<br>    Object obj &#x3D; clazz.newInstance();<br><br>    &#x2F;&#x2F; 向下转型<br>    Servlet servlet &#x3D; (Servlet)obj;<br><br>    &#x2F;&#x2F; 创建ServletConfig对象<br>    &#x2F;&#x2F; Tomcat服务器负责将ServletConfig对象实例化出来。<br>    &#x2F;&#x2F; 多态（Tomcat服务器完全实现了Servlet规范）<br>    ServletConfig servletConfig &#x3D; new org.apache.catalina.core.StandardWrapperFacade();<br><br>    &#x2F;&#x2F; 调用Servlet的init方法<br>    servlet.init(servletConfig);<br><br>    &#x2F;&#x2F; 调用Servlet的service方法<br>    &#x2F;&#x2F; ….<br><br>}<br>}<figure class="highlight csharp"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3h9g9ilbavf10x"></i><span>csharp</span><div class="collapse show" id="collapse-3h9g9ilbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><br><br><span class="hljs-meta">## ServletConfig</span><br><br>- 什么是ServletConfig？<br><br>  - Servlet对象的配置信息对象。<br>  - ServletConfig对象中封装了&lt;servlet&gt;&lt;/servlet&gt;标签中的配置信息。（web.xml文件中servlet的配置信息）<br><br>- 一个Servlet对应一个ServletConfig对象。<br><br>- Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户发送第一次请求的时候创建。<br><br>- Tomcat服务器调用Servlet对象的<span class="hljs-keyword">init</span>方法的时候需要传一个ServletConfig对象的参数给<span class="hljs-keyword">init</span>方法。<br><br>- ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。）<br><br>- ServletConfig接口有哪些常用的方法？<br><br>  - ```<span class="hljs-function">java</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> String <span class="hljs-title">getInitParameter</span>(<span class="hljs-params">String name</span>)</span>; <span class="hljs-comment">// 通过初始化参数的name获取value</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Enumeration&lt;String&gt; <span class="hljs-title">getInitParameterNames</span>()</span>; <span class="hljs-comment">// 获取所有的初始化参数的name</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletContext <span class="hljs-title">getServletContext</span>()</span>; <span class="hljs-comment">// 获取ServletContext对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletName</span>()</span>; <span class="hljs-comment">// 获取Servlet的name</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</p></li></ul></li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li><p>一个Servlet对象对应一个ServletConfig。100个Servlet对象则对应100个ServletConfig对象。</p></li><li><p>只要在同一个webapp当中，只要在同一个应用当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p></li><li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是应用级对象。</p></li><li><p>Tomcat服务器中有一个webapps，这个webapps下可以存放webapp，可以存放多个webapp，假设有100个webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。</p></li><li><p>ServletContext被称为Servlet上下文对象。（Servlet对象的四周环境对象。）</p></li><li><p>一个ServletContext对象通常对应的是一个web.xml文件。</p></li><li><p>ServletContext对应显示生活中的什么例子呢？</p><ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li></ul></li><li><p>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</p><ul><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul></li><li><p>ServletContext接口中有哪些常用的方法？</p><ul><li><pre><code class="java">public String getInitParameter(String name); // 通过初始化参数的name获取valuepublic Enumeration&lt;String&gt; getInitParameterNames(); // 获取所有的初始化参数的name<figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-0whvjglbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-0whvjglbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- ```xml<br>  <span class="hljs-comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>pageSize<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>startIndex<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span><br>  <span class="hljs-comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><pre><code class="java">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。public String getContextPath();//String contextPath = application.getContextPath();<figure class="highlight arduino"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-txuhh6lbavf10x"></i><span>arduino</span><div class="collapse show" id="collapse-txuhh6lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>- ```java<br>  <span class="hljs-comment">// 获取文件的绝对路径（真实路径）</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getRealPath</span><span class="hljs-params">(<span class="hljs-type">String</span> path)</span></span>;<br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 通过ServletContext对象也是可以记录日志的<br>public void log(String message);<br>public void log(String message, Throwable t);<br>&#x2F;&#x2F; 这些日志信息记录到哪里了？<br>&#x2F;&#x2F; localhost.2021-11-05.log</p><p>&#x2F;&#x2F; Tomcat服务器的logs目录下都有哪些日志文件？<br>&#x2F;&#x2F;catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。<br>&#x2F;&#x2F;localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。<br>&#x2F;&#x2F;localhost_access_log.2021-11-05.txt 访问日志</p><figure class="highlight awk"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-pd5o2glbavf10x"></i><span>awk</span><div class="collapse show" id="collapse-pd5o2glbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```java<br>  <span class="hljs-regexp">//</span> ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）<br>  <br>  <span class="hljs-regexp">//</span> 如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中<br>  <br>  <span class="hljs-regexp">//</span> 为什么是所有用户共享的数据？ 不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。<br>  <br>  <span class="hljs-regexp">//</span> 为什么数据量要小？ 因为数据量比较大的话，太占用堆内存，并且这个对象的生命周期比较长，服务器关闭的时候，这个对象才会被销毁。大数据量会影响服务器的性能。占用内存较小的数据量可以考虑放进去。<br>  <br>  <span class="hljs-regexp">//</span> 为什么这些共享数据很少的修改，或者说几乎不修改？<br>  <span class="hljs-regexp">//</span> 所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。所以放在ServletContext对象中的数据一般都是只读的。<br>  <br>  <span class="hljs-regexp">//</span> 数据量小、所有用户共享、又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。<br>  <br>  <span class="hljs-regexp">//</span> 存（怎么向ServletContext应用域中存数据）<br>  public void setAttribute(String name, Object value); <span class="hljs-regexp">//</span> map.put(k, v)<br>  <span class="hljs-regexp">//</span> 取（怎么从ServletContext应用域中取数据）<br>  public Object getAttribute(String name); <span class="hljs-regexp">//</span> Object v = map.get(k)<br>  <span class="hljs-regexp">//</span> 删（怎么删除ServletContext应用域中的数据）<br>  public void removeAttribute(String name); <span class="hljs-regexp">//</span> map.remove(k)<br>  <br>  <br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B&#x2F;S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</p><ul><li><pre><code class="hljs">jakarta.servlet.Servlet（接口）【爷爷】jakarta.servlet.GenericServlet implements Servlet（抽象类）【儿子】jakarta.servlet.http.HttpServlet extends GenericServlet（抽象类）【孙子】我们以后编写的Servlet要继承HttpServlet类。<figure class="highlight nestedtext"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3gmenolbavf10x"></i><span>nestedtext</span><div class="collapse show" id="collapse-3gmenolbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-bullet">-</span> <span class="hljs-string">大家到目前为止都接触过哪些缓存机制了？</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">堆内存当中的字符串常量池。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;abc&quot; 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">堆内存当中的整数型常量池。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">连接池(Connection Cache)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">连接池</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">最小连接数</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">最大连接数</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">线程池</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Tomcat服务器本身就是支持多线程的。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NoSQL数据库。非关系型数据库。缓存数据库。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</span><br><br><span class="hljs-comment">## HTTP协议</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">什么是协议？</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">什么是HTTP协议？</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">W3C：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">万维网联盟组织</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">万维网之父：蒂姆·伯纳斯·李</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">什么是超文本？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">什么是解耦合？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">B不依赖S。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">S也不依赖B。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">B/S表示：B/S结构的系统（浏览器访问WEB服务器的系统）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">浏览器   向   WEB服务器发送数据，叫做：请求（request)</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">WEB服务器   向   浏览器发送数据，叫做：响应（response）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP协议包括：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请求协议</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">响应协议</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP协议就是提前制定好的一种消息模板。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">不管你是哪个品牌的浏览器，都是这么发。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">不管你是哪个品牌的WEB服务器，都是这么发。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">HTTP的请求协议（B --&gt; S）</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP的请求协议包括：4部分</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请求行</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请求头</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">空白行</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请求体</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP请求协议的具体报文：GET请求</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>      <span class="hljs-attribute">GET /servlet05/getServlet?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="hljs-attribute">      Host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">localhost:8080                                                                    请求头</span><br>      <span class="hljs-attribute">Connection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep-alive</span><br>      <span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br>      <span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">:</span> <span class="hljs-string">?0</span><br>      <span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows&quot;</span><br>      <span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">:</span> <span class="hljs-string">1</span><br>      <span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br>      <span class="hljs-attribute">Accept</span><span class="hljs-punctuation">:</span> <span class="hljs-string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br>      <span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">:</span> <span class="hljs-string">same-origin</span><br>      <span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">navigate</span><br>      <span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">:</span> <span class="hljs-string">?1</span><br>      <span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">:</span> <span class="hljs-string">document</span><br>      <span class="hljs-attribute">Referer</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http://localhost:8080/servlet05/index.html</span><br>      <span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">:</span> <span class="hljs-string">gzip, deflate, br</span><br>      <span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zh-CN,zh;q=0.9</span><br>                                                                                              空白行<br>                                                                                              请求体<br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>HTTP请求协议的具体报文：POST请求</p><ul><li>&#96;&#96;&#96;<br>POST &#x2F;servlet05&#x2F;postServlet HTTP&#x2F;1.1                                                  请求行<br>Host: localhost:8080                                                                  请求头<br>Connection: keep-alive<br>Content-Length: 25<br>Cache-Control: max-age&#x3D;0<br>sec-ch-ua: “Google Chrome”;v&#x3D;”95”, “Chromium”;v&#x3D;”95”, “;Not A Brand”;v&#x3D;”99”<br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: “Windows”<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://localhost:8080/">http://localhost:8080</a><br>Content-Type: application&#x2F;x-www-form-urlencoded<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;95.0.4638.54 Safari&#x2F;537.36<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: <a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>                                                                                  空白行<br>username&#x3D;lisi&amp;userpwd&#x3D;123                                                             请求体<figure class="highlight nestedtext"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-min7yalbavf10x"></i><span>nestedtext</span><div class="collapse show" id="collapse-min7yalbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">请求行</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">包括三部分：</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">第一部分：请求方式（7种）</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">get（常用的）</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">post（常用的）</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">delete</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">put</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">head</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">options</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">trace</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">第二部分：URI</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">URI和URL什么关系，有什么区别？</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">URL包括URI</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">http://localhost:8080/servlet05/index.html 这是URL。</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">/servlet05/index.html 这是URI。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">第三部分：HTTP协议版本号</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">请求头</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请求的主机</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">主机的端口</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">浏览器信息</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">平台信息</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cookie等信息</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">....</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">空白行</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">空白行是用来区分“请求头”和“请求体”</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">请求体</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">向服务器发送的具体数据。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">HTTP的响应协议（S --&gt; B）</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP的响应协议包括：4部分</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">状态行</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">响应头</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">空白行</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">响应体</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">HTTP响应协议的具体报文：</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">```</span><br>      <span class="hljs-attribute">HTTP/1.1 200 ok                                     状态行</span><br><span class="hljs-attribute">      Content-Type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">text/html;charset=UTF-8               响应头</span><br>      <span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">:</span> <span class="hljs-string">160</span><br>      <span class="hljs-attribute">Date</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mon, 08 Nov 2021 13:19:32 GMT</span><br>      <span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">:</span> <span class="hljs-string">timeout=20</span><br>      <span class="hljs-attribute">Connection</span><span class="hljs-punctuation">:</span> <span class="hljs-string">keep-alive</span><br>                                                          空白行<br>      &lt;!doctype html&gt;                                     响应体<br>      &lt;html&gt;<br>          &lt;head&gt;<br>              &lt;title&gt;from get servlet&lt;/title&gt;<br>          &lt;/head&gt;<br>          &lt;body&gt;<br>              &lt;h1&gt;from get servlet&lt;/h1&gt;<br>          &lt;/body&gt;<br>      &lt;/html&gt;<br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>状态行</p><ul><li>三部分组成<ul><li>第一部分：协议版本号（HTTP&#x2F;1.1）</li><li>第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）<ul><li>200 表示请求响应成功，正常结束。</li><li>404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</li><li>405表示前端发送的请求方式与后端请求的处理方式不一致时发生：<ul><li>比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</li><li>比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</li></ul></li><li>500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</li><li>以4开始的，一般是浏览器端的错误导致的。</li><li>以5开始的，一般是服务器端的错误导致的。</li></ul></li><li>第三部分：状态的描述信息<ul><li>ok 表示正常成功结束。</li><li>not found 表示资源找不到。</li></ul></li></ul></li></ul></li><li><p>响应头：</p><ul><li>响应的内容类型</li><li>响应的内容长度</li><li>响应的时间</li><li>….</li></ul></li><li><p>空白行：</p><ul><li>用来分隔“响应头”和“响应体”的。</li></ul></li><li><p>响应体：</p><ul><li>响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</li></ul></li></ul></li><li><p>怎么查看的协议内容？</p><ul><li>使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</li></ul></li><li><p>怎么向服务器发送GET请求，怎么向服务器发送POST请求？</p><ul><li>到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method&#x3D;”post”。</li><li>其他所有情况一律都是get请求：<ul><li>在浏览器地址栏上直接输入URL，敲回车，属于get请求。</li><li>在浏览器上直接点击超链接，属于get请求。</li><li>使用form表单提交数据时，form标签中没有写method属性，默认就是get</li><li>或者使用form的时候，form标签中method属性值为：method&#x3D;”get”</li><li>….</li></ul></li></ul></li><li><p>GET请求和POST请求有什么区别？</p><ul><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）<ul><li><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</a></li></ul></li><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</li><li>get请求无法发送大数据量。</li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</li><li>post请求可以发送大数据量，理论上没有长度限制。</li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</li><li>post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</li><li>get请求支持缓存。<ul><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg">https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</a></li><li>任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：<ul><li>一个get请求的路径a  对应  一个资源。</li><li>一个get请求的路径b  对应  一个资源。</li><li>一个get请求的路径c  对应  一个资源。</li><li>……</li></ul></li><li>实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</li><li>有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。<ul><li>只要每一次get请求的请求路径不同即可。</li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</a></li><li><a href="https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=%E7%B3%BB%E7%BB%9F%E6%AF%AB%E7%A7%92%E6%95%B0">https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</a></li><li>怎么解决？可以在路径的后面添加一个每时每刻都在变化的“时间戳”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</li></ul></li></ul></li><li>post请求不支持缓存。（POST是用来修改服务器端的资源的。）<ul><li>post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</li></ul></li></ul></li><li><p>GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</p><ul><li>怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li><li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存&#x2F;修改等。</li><li>如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li><li>做文件上传，一定是post请求。要传的数据不是普通文本。</li><li>其他情况都可以使用get请求。</li></ul></li><li><p>不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</p><ul><li>name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</li><li>name是什么？<ul><li>以form表单为例：form表单中input标签的name。</li></ul></li><li>value是什么？<ul><li>以form表单为例：form表单中input标签的value。</li></ul></li></ul></li></ul><h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><ul><li>什么是设计模式？<ul><li>某个问题的固定的解决方案。(可以被重复使用。)</li></ul></li><li>你知道哪些设计模式？<ul><li>GoF设计模式：<ul><li>通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</li><li>单例模式</li><li>工厂模式</li><li>代理模式</li><li>门面模式</li><li>责任链设计模式</li><li>观察者模式</li><li>模板方法设计模式</li><li>…..</li></ul></li><li>JavaEE设计模式：<ul><li>DAO</li><li>DTO</li><li>VO</li><li>PO</li><li>pojo</li><li>….</li></ul></li><li>….</li></ul></li><li>什么是模板方法设计模式？<ul><li>在模板类的模板方法当中定义核心算法骨架，具体的实现步骤可以延迟到子类当中完成。</li></ul></li><li>模板类通常是一个抽象类，模板类当中的模板方法定义核心算法，这个方法通常是final的（但也可以不是final的）</li><li>模板类当中的抽象方法就是不确定实现的方法，这个不确定怎么实现的事儿交给子类去做。</li></ul><h2 id="HttpServlet源码分析"><a href="#HttpServlet源码分析" class="headerlink" title="HttpServlet源码分析"></a>HttpServlet源码分析</h2><ul><li>HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</li><li>HttpServlet在哪个包下？<ul><li>jakarta.servlet.http.HttpServlet</li></ul></li><li>到目前为止我们接触了servlet规范中哪些接口？<ul><li>jakarta.servlet.Servlet  核心接口（接口）</li><li>jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</li><li>jakarta.servlet.ServletContext Servlet上下文接口（接口）</li><li>jakarta.servlet.ServletRequest Servlet请求接口（接口）</li><li>jakarta.servlet.ServletResponse Servlet响应接口（接口）</li><li>jakarta.servlet.ServletException Servlet异常（类）</li><li>jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</li></ul></li><li>http包下都有哪些类和接口呢？jakarta.servlet.http.*;<ul><li>jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</li><li>jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</li><li>jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</li></ul></li><li>HttpServletRequest对象中封装了什么信息？<ul><li>HttpServletRequest，简称request对象。</li><li>HttpServletRequest中封装了请求协议的全部内容。</li><li>Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</li><li>也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</li></ul></li><li>HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</li><li>回忆Servlet生命周期？<ul><li>用户第一次请求<ul><li>Tomcat服务器通过反射机制，调用无参数构造方法。创建Servlet对象。(web.xml文件中配置的Servlet类对应的对象。)</li><li>Tomcat服务器调用Servlet对象的init方法完成初始化。</li><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>用户第二次请求<ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>用户第三次请求<ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>….<ul><li>Tomcat服务器调用Servlet对象的service方法处理请求。</li></ul></li><li>服务器关闭<ul><li>Tomcat服务器调用Servlet对象的destroy方法，做销毁之前的准备工作。</li><li>Tomcat服务器销毁Servlet对象。</li></ul></li></ul></li><li>HttpServlet源码分析：</li></ul><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-85atmklbavf10x"></i><span>java</span><div class="collapse show" id="collapse-85atmklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><span class="hljs-comment">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-comment">//override 重写 doGet方法</span><br>    <span class="hljs-comment">//override 重写 doPost方法</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>, ServletConfig,<br>        java.io.Serializable &#123;<br>           <br><span class="hljs-comment">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">this</span>.config = config;<br>        <span class="hljs-built_in">this</span>.init();<br>    &#125;<br><span class="hljs-comment">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">// NOOP by default</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// HttpServlet模板类。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span> &#123;<br>    <span class="hljs-comment">// 用户发送第一次请求的时候这个service会执行</span><br>    <span class="hljs-comment">// 用户发送第N次请求的时候，这个service方法还是会执行。</span><br>    <span class="hljs-comment">// 用户只要发送一次请求，这个service方法就会执行一次。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        HttpServletRequest  request;<br>        HttpServletResponse response;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span><br>            request = (HttpServletRequest) req;<br>            response = (HttpServletResponse) res;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassCastException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(lStrings.getString(<span class="hljs-string">&quot;http.non_http&quot;</span>));<br>        &#125;<br>        <span class="hljs-comment">// 调用重载的service方法。</span><br>        service(request, response);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 这个service方法的两个参数都是带有Http的。</span><br>    <span class="hljs-comment">// 这个service是一个模板方法。</span><br>    <span class="hljs-comment">// 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取请求方式</span><br>        <span class="hljs-comment">// 这个请求方式最终可能是：&quot;&quot;</span><br>        <span class="hljs-comment">// 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span><br>        <span class="hljs-comment">// GET POST PUT DELETE HEAD OPTIONS TRACE</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br><br>        <span class="hljs-comment">// 如果请求方式是GET请求，则执行doGet方法。</span><br>        <span class="hljs-keyword">if</span> (method.equals(METHOD_GET)) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> getLastModified(req);<br>            <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// servlet doesn&#x27;t support if-modified-since, no reason</span><br>                <span class="hljs-comment">// to go through further expensive logic</span><br>                doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> ifModifiedSince;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);<br>                &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException iae) &#123;<br>                    <span class="hljs-comment">// Invalid date header - proceed as if none was set</span><br>                    ifModifiedSince = -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>)) &#123;<br>                    <span class="hljs-comment">// If the servlet mod time is later, call doGet()</span><br>                    <span class="hljs-comment">// Round down to the nearest second for a proper compare</span><br>                    <span class="hljs-comment">// A ifModifiedSince of -1 will always be less</span><br>                    maybeSetLastModified(resp, lastModified);<br>                    doGet(req, resp);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_HEAD)) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> getLastModified(req);<br>            maybeSetLastModified(resp, lastModified);<br>            doHead(req, resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_POST)) &#123;<br>            <span class="hljs-comment">// 如果请求方式是POST请求，则执行doPost方法。</span><br>            doPost(req, resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_PUT)) &#123;<br>            doPut(req, resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_DELETE)) &#123;<br>            doDelete(req, resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;<br>            doOptions(req,resp);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(METHOD_TRACE)) &#123;<br>            doTrace(req,resp);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//</span><br>            <span class="hljs-comment">// Note that this means NO servlet supports whatever</span><br>            <span class="hljs-comment">// method was requested, anywhere on this server.</span><br>            <span class="hljs-comment">//</span><br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>            Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>];<br>            errArgs[<span class="hljs-number">0</span>] = method;<br>            errMsg = MessageFormat.format(errMsg, errArgs);<br><br>            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>        <span class="hljs-comment">// 报405错误</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);<br>        sendMethodNotAllowed(req, resp, msg);<br>    &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span><br>        <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 报405错误</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_post_not_supported&quot;</span>);<br>        sendMethodNotAllowed(req, resp, msg);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过以上源代码分析：</span><br><span class="hljs-comment">假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span><br><span class="hljs-comment">假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span><br><span class="hljs-comment">会发生什么呢？</span><br><span class="hljs-comment">发生405这样的一个错误。</span><br><span class="hljs-comment">405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">怎么避免405的错误呢？</span><br><span class="hljs-comment">后端重写了doGet方法，前端一定要发get请求。</span><br><span class="hljs-comment">后端重写了doPost方法，前端一定要发post请求。</span><br><span class="hljs-comment">这样可以避免405错误。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span><br><span class="hljs-comment">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span><br><span class="hljs-comment">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span><br><span class="hljs-comment">少写一点。</span><br><span class="hljs-comment">*/</span><br><br><br></code></pre></td></tr></table></div></figure><ul><li><p>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？</p><ul><li>可以，只不过你享受不到405错误。享受不到HTTP协议专属的东西。</li></ul></li><li><p>到今天我们终于得到了最终的一个Servlet类的开发步骤：</p><ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul></li></ul><h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><ul><li><p>什么是一个web站点的欢迎页面？</p><ul><li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li><li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li><li>我们一般的访问方式是：<ul><li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li></ul></li><li>如果我们访问的方式是：<ul><li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li><li>默认会访问你设置的欢迎页面。</li></ul></li></ul></li><li><p>怎么设置欢迎页面呢？</p><ul><li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p></li><li><p>第二步：在web.xml文件中进行了以下的配置</p><ul><li><pre><code class="xml">&lt;welcome-file-list&gt;        &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;<figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-a564jklbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-a564jklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">    -</span> 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。<br><br><span class="hljs-bullet">  -</span> 第三步：启动服务器，浏览器地址栏输入地址<br><br><span class="hljs-bullet">    -</span> http://localhost:8080/servlet07<br><br><span class="hljs-bullet">-</span> 如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？<br><br><span class="hljs-bullet">  -</span> 在webapp根下新建page1<br><br><span class="hljs-bullet">  -</span> 在page1下新建page2目录<br><br><span class="hljs-bullet">  -</span> 在page2目录下新建page.html页面<br><br><span class="hljs-bullet">  -</span> 在web.xml文件中应该这样配置<br><br><span class="hljs-bullet">    -</span> <span class="hljs-code">```</span><br><span class="hljs-code">      &lt;welcome-file-list&gt;</span><br><span class="hljs-code">          &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;</span><br><span class="hljs-code">      &lt;/welcome-file-list&gt;</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>注意：路径不需要以“&#x2F;”开始，并且路径默认从webapp的根下开始找。</p></li></ul></li></ul></li><li><p>一个webapp是可以设置多个欢迎页面的</p><ul><li>&#96;&#96;&#96;xml<welcome-file-list>    <welcome-file>page1/page2/page.html</welcome-file>    <welcome-file>login.html</welcome-file></welcome-file-list><figure class="highlight vim"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1x8rb8lbavf10x"></i><span>vim</span><div class="collapse show" id="collapse-1x8rb8lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>  - 注意：越靠上的优先级越高。找不到的继续向下找。<br><br>- 你有没有注意一件事：当我的文件名设置为<span class="hljs-built_in">index</span>.html的时候，不需要在web.xml文件中进行配置欢迎页面。这是为什么？<br><br>  - 这是因为小猫咪Tomcat服务器已经提前配置好了。<br><br>  - 实际上配置欢迎页面有两个地方可以配置：<br><br>    - 一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）<br><br>    - 一个是在CATALINA_HOME/<span class="hljs-keyword">conf</span>/web.xml文件中进行配置。（在这个地方配置的属于全局配置）<br><br>      - ```xml<br>        <span class="hljs-symbol">&lt;welcome-file-list&gt;</span><br>            <span class="hljs-symbol">&lt;welcome-file&gt;</span><span class="hljs-built_in">index</span>.html&lt;/welcome-<span class="hljs-keyword">file</span>&gt;<br>            <span class="hljs-symbol">&lt;welcome-file&gt;</span><span class="hljs-built_in">index</span>.htm&lt;/welcome-<span class="hljs-keyword">file</span>&gt;<br>            <span class="hljs-symbol">&lt;welcome-file&gt;</span><span class="hljs-built_in">index</span>.jsp&lt;/welcome-<span class="hljs-keyword">file</span>&gt;<br>        &lt;/welcome-<span class="hljs-keyword">file</span>-<span class="hljs-keyword">list</span>&gt;<br></code></pre></td></tr></table></div></figure><ul><li><p>Tomcat服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，Tomcat服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</p></li><li><p>注意原则：局部优先原则。（就近原则）</p></li></ul></li></ul></li><li><p>欢迎页可以是一个Servlet吗？</p><ul><li><p>当然可以。</p></li><li><p>你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</p></li><li><p>静态资源：index.html welcome.html …..</p></li><li><p>动态资源：Servlet类。</p></li><li><p>步骤：</p><ul><li><p>第一步：写一个Servlet</p><ul><li>&#96;&#96;&#96;java<br>public class WelcomeServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br>    response.setContentType(“text&#x2F;html”);<br>    PrintWriter out &#x3D; response.getWriter();<br>    out.print(“<h1>welcome to bjpowernode!</h1>“);<br>}<br>}<figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-zpzox0lbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-zpzox0lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>    <br><br>- 第二步：在web.xml文件中配置servlet<br><br>  - ```xml<br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>welcomeServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bjpowernode.javaweb.servlet.WelcomeServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>welcomeServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>第三步：在web.xml文件中配置欢迎页</p><ul><li>&#96;&#96;&#96;xml<br><welcome-file-list><br>    <welcome-file>fdsa&#x2F;fds&#x2F;a&#x2F;fds&#x2F;af&#x2F;ds&#x2F;af&#x2F;dsafdsafdsa</welcome-file><br></welcome-file-list><figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-bd2xhrlbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-bd2xhrlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">        </span><br><span class="hljs-code"></span><br><span class="hljs-section">## 关于WEB-INF目录</span><br><br><span class="hljs-bullet">-</span> 在WEB-INF目录下新建了一个文件：welcome.html<br><span class="hljs-bullet">-</span> 打开浏览器访问：http://localhost:8080/servlet07/WEB-INF/welcome.html 出现了404错误。<br><span class="hljs-bullet">-</span> 注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。<br><br><span class="hljs-section">## HttpServletRequest接口详解</span><br><br><span class="hljs-bullet">-</span> HttpServletRequest是一个接口，全限定名称：jakarta.servlet.http.HttpServletRequest<br><br><span class="hljs-bullet">-</span> HttpServletRequest接口是Servlet规范中的一员。<br><br><span class="hljs-bullet">-</span> HttpServletRequest接口的父接口：ServletRequest<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```java</span><br><span class="hljs-code">    public interface HttpServletRequest extends ServletRequest &#123;&#125;</span><br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li></ul></li><li><p>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</p><ul><li><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p><ul><li><pre><code class="java">public class RequestFacade implements HttpServletRequest &#123;&#125;<figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-vgpleklbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-vgpleklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  -</span> 测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！<br><br><span class="hljs-bullet">-</span> HttpServletRequest对象中都有什么信息？都包装了什么信息？<br><br><span class="hljs-bullet">  -</span> HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了HTTP的请求协议。<br><span class="hljs-bullet">  -</span> 实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。<br><span class="hljs-bullet">  -</span> javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。<br><br><span class="hljs-bullet">-</span> request和response对象的生命周期？<br><br><span class="hljs-bullet">  -</span> request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。<br><span class="hljs-bullet">  -</span> 一次请求对应一个request。<br><span class="hljs-bullet">  -</span> 两次请求则对应两个request。<br><span class="hljs-bullet">  -</span> .....<br><br><span class="hljs-bullet">-</span> HttpServletRequest接口中有哪些常用的方法？<br><br><span class="hljs-bullet">  -</span> 怎么获取前端浏览器用户提交的数据？<br><br><span class="hljs-bullet">    -</span> <span class="hljs-code">```java</span><br><span class="hljs-code">      Map&lt;String,String[]&gt; getParameterMap() 这个是获取Map</span><br><span class="hljs-code">      Enumeration&lt;String&gt; getParameterNames() 这个是获取Map集合中所有的key</span><br><span class="hljs-code">      String[] getParameterValues(String name) 根据key获取Map集合的value</span><br><span class="hljs-code">      String getParameter(String name)  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="hljs-code">      // 以上的4个方法，和获取用户提交的数据有关系。</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>思考：如果是你，前端的form表单提交了数据之后，你准备怎么存储这些数据，你准备采用什么样的数据结构去存储这些数据呢？</p><ul><li><p>前端提交的数据格式：username&#x3D;abc&amp;userpwd&#x3D;111&amp;aihao&#x3D;s&amp;aihao&#x3D;d&amp;aihao&#x3D;tt</p></li><li><p>我会采用Map集合来存储：</p><ul><li>&#96;&#96;&#96;java<br>Map&lt;String,String&gt;<br>key存储String<br>value存储String<br>这种想法对吗？不对。<br>如果采用以上的数据结构存储会发现key重复的时候value覆盖。<br>key         value<br>———————<br>username    abc<br>userpwd     111<br>aihao       s<br>aihao       d<br>aihao       tt<br>这样是不行的，因为map的key不能重复。<br>Map&lt;String, String[]&gt;<br>key存储String<br>value存储String[]<br>keyvalue<br>——————————-<br>username{“abc”}<br>userpwd{“111”}<br>aihao{“s”,”d”,”tt”}<figure class="highlight coffeescript"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-mw91gtlbavf10x"></i><span>coffeescript</span><div class="collapse show" id="collapse-mw91gtlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>    - 注意：前端表单提交数据的时候，假设提交了<span class="hljs-number">120</span>这样的“数字”，其实是以字符串<span class="hljs-string">&quot;120&quot;</span>的方式提交的，所以服务器端获取到的一定是一个字符串的<span class="hljs-string">&quot;120&quot;</span>，而不是一个数字。（前端永远提交的是字符串，后端获取的也永远是字符串。）<br>  <br>- 手工开发一个webapp。测试HttpServletRequest接口中的相关方法。<br><br>  - 先测试了<span class="hljs-number">4</span>个常用的方法，获取请求参数的四个方法。<br><br>    - ```<span class="language-javascript">java</span><br><span class="language-javascript">      <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">String</span>[]&gt; parameterMap = request.<span class="hljs-title function_">getParameterMap</span>();</span><br><span class="language-javascript">      <span class="hljs-title class_">Enumeration</span>&lt;<span class="hljs-title class_">String</span>&gt; names = request.<span class="hljs-title function_">getParameterNames</span>();</span><br><span class="language-javascript">      <span class="hljs-title class_">String</span>[] values = request.<span class="hljs-title function_">getParameterValues</span>(<span class="hljs-string">&quot;name&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-title class_">String</span> value = request.<span class="hljs-title function_">getParameter</span>(<span class="hljs-string">&quot;name&quot;</span>);</span><br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>request对象实际上又称为“请求域”对象。</p><ul><li><p>应用域对象是什么？</p><ul><li><p>ServletContext （Servlet上下文对象。）</p></li><li><p>什么情况下会考虑向ServletContext这个应用域当中绑定数据呢？</p><ul><li>第一：所有用户共享的数据。</li><li>第二：这个共享的数据量很小。</li><li>第三：这个共享的数据很少的修改操作。</li><li>在以上三个条件都满足的情况下，使用这个应用域对象，可以大大提高我们程序执行效率。</li><li>实际上向应用域当中绑定数据，就相当于把数据放到了缓存（Cache）当中，然后用户访问的时候直接从缓存中取，减少IO的操作，大大提升系统的性能，所以缓存技术是提高系统性能的重要手段。</li></ul></li><li><p>你见过哪些缓存技术呢？</p><ul><li>字符串常量池</li><li>整数型常量池 [-128~127]，但凡是在这个范围当中的Integer对象不再创建新对象，直接从这个整数型常量池中获取。大大提升系统性能。</li><li>数据库连接池（提前创建好N个连接对象，将连接对象放到集合当中，使用连接对象的时候，直接从缓存中拿。省去了连接对象的创建过程。效率提升。）</li><li>线程池（Tomcat服务器就是支持多线程的。所谓的线程池就是提前先创建好N个线程对象，将线程对象存储到集合中，然后用户请求过来之后，直接从线程池中获取线程对象，直接拿来用。提升系统性能）</li><li>后期你还会学习更多的缓存技术，例如：redis、mongoDB…..</li></ul></li><li><p>ServletContext当中有三个操作域的方法：</p><ul><li><p>&#96;&#96;&#96;java<br>void setAttribute(String name, Object obj); &#x2F;&#x2F; 向域当中绑定数据。<br>Object getAttribute(String name); &#x2F;&#x2F; 从域当中根据name获取数据。<br>void removeAttribute(String name); &#x2F;&#x2F; 将域当中绑定的数据移除</p><p>&#x2F;&#x2F; 以上的操作类似于Map集合的操作。<br>Map&lt;String, Object&gt; map;<br>map.put(“name”, obj); &#x2F;&#x2F; 向map集合中放key和value<br>Object obj &#x3D; map.get(“name”); &#x2F;&#x2F; 通过map集合的key获取value<br>map.remove(“name”); &#x2F;&#x2F; 通过Map集合的key删除key和value这个键值对。</p><figure class="highlight arduino"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-5adf55lbavf10x"></i><span>arduino</span><div class="collapse show" id="collapse-5adf55lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>- “请求域”对象<br><br>  - “请求域”对象要比“应用域”对象范围小很多。生命周期短很多。请求域只在一次请求内有效。<br><br>  - 一个请求对象request对应一个请求域对象。一次请求结束之后，这个请求域就销毁了。<br><br>  - 请求域对象也有这三个方法：<br><br>    - ```<span class="hljs-function">java</span><br><span class="hljs-function">      <span class="hljs-type">void</span> <span class="hljs-title">setAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name, Object obj)</span></span>; <span class="hljs-comment">// 向域当中绑定数据。</span><br>      <span class="hljs-function">Object <span class="hljs-title">getAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>; <span class="hljs-comment">// 从域当中根据name获取数据。</span><br>      <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeAttribute</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span></span>; <span class="hljs-comment">// 将域当中绑定的数据移除</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>请求域和应用域的选用原则？</p><ul><li>尽量使用小的域对象，因为小的域对象占用的资源较少。</li></ul></li></ul></li><li><p>跳转</p><ul><li><p>转发（一次请求）</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 第一步：获取请求转发器对象<br>RequestDispatcher dispatcher &#x3D; request.getRequestDispatcher(“&#x2F;b”);<br>&#x2F;&#x2F; 第二步：调用转发器的forward方法完成跳转&#x2F;转发<br>dispatcher.forward(request,response);</p><p>&#x2F;&#x2F; 第一步和第二步代码可以联合在一起。<br>request.getRequestDispatcher(“&#x2F;b”).forward(request,response);</p><figure class="highlight awk"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-j01foilbavf10x"></i><span>awk</span><div class="collapse show" id="collapse-j01foilbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- 两个Servlet怎么共享数据？<br><br>  - 将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。<br>  - 可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。<br><br>- 转发的下一个资源必须是一个Servlet吗？<br><br>  - 不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html....<br>  - 注意：转发的时候，路径的写法要注意，转发的路径以“/”开始，不加项目名。<br><br>- 关于request对象中两个非常容易混淆的方法：<br><br>  - ```java<br>    <br>    <span class="hljs-regexp">//</span> uri?username=zhangsan&amp;userpwd=<span class="hljs-number">123</span>&amp;sex=<span class="hljs-number">1</span><br>    String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <br>    <span class="hljs-regexp">//</span> 之前一定是执行过：request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, new Object())<br>    Object obj = request.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>    <br>    <span class="hljs-regexp">//</span> 以上两个方法的区别是什么？<br>    <span class="hljs-regexp">//</span> 第一个方法：获取的是用户在浏览器上提交的数据。<br>    <span class="hljs-regexp">//</span> 第二个方法：获取的是请求域当中绑定的数据。<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>HttpServletRequest接口的其他常用方法：</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 获取客户端的IP地址<br>String remoteAddr &#x3D; request.getRemoteAddr();</p><p>&#x2F;&#x2F; get请求在请求行上提交数据。<br>&#x2F;&#x2F; post请求在请求体中提交数据。<br>&#x2F;&#x2F; 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）<br>&#x2F;&#x2F; Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。<br>&#x2F;&#x2F; Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。<br>request.setCharacterEncoding(“UTF-8”);</p><p>&#x2F;&#x2F; 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？<br>response.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);<br>&#x2F;&#x2F; 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</p><p>&#x2F;&#x2F; 注意一个细节<br>&#x2F;&#x2F; 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</p><p>&#x2F;&#x2F; get请求乱码问题怎么解决？<br>&#x2F;&#x2F; get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。<br>&#x2F;&#x2F; get请求乱码怎么解决<br>&#x2F;&#x2F; 方案：修改CATALINA_HOME&#x2F;conf&#x2F;server.xml配置文件</p><Connector URIEncoding="UTF-8" />// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。    <p>&#x2F;&#x2F; 获取应用的根路径<br>String contextPath &#x3D; request.getContextPath();</p><p>&#x2F;&#x2F; 获取请求方式<br>String method &#x3D; request.getMethod();</p><p>&#x2F;&#x2F; 获取请求的URI<br>String uri &#x3D; request.getRequestURI();  &#x2F;&#x2F; &#x2F;aaa&#x2F;testRequest</p><p>&#x2F;&#x2F; 获取servlet path<br>String servletPath &#x3D; request.getServletPath(); &#x2F;&#x2F;   &#x2F;testRequest</p><figure class="highlight sql"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-m5ytgklbavf10x"></i><span>sql</span><div class="collapse show" id="collapse-m5ytgklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>## 使用纯Servlet做一个单表的CRUD操作<br><br><span class="hljs-operator">-</span> 使用纯粹的Servlet完成单表【对部门的】的增删改查操作。（B<span class="hljs-operator">/</span>S结构的。）<br><br><span class="hljs-operator">-</span> 实现步骤<br><br>  <span class="hljs-operator">-</span> 第一步：准备一张数据库表。（<span class="hljs-keyword">sql</span>脚本）<br><br>    <span class="hljs-operator">-</span> ```<span class="hljs-keyword">sql</span><br>      # 部门表<br>      <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> dept;<br>      <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>      deptno <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>          dname <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>          loc <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>      );<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno, dname, loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;XiaoShouBu&#x27;</span>, <span class="hljs-string">&#x27;BEIJING&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno, dname, loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;YanFaBu&#x27;</span>, <span class="hljs-string">&#x27;SHANGHAI&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno, dname, loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;JiShuBu&#x27;</span>, <span class="hljs-string">&#x27;GUANGZHOU&#x27;</span>);<br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept(deptno, dname, loc) <span class="hljs-keyword">values</span>(<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;MeiTiBu&#x27;</span>, <span class="hljs-string">&#x27;SHENZHEN&#x27;</span>);<br>      <span class="hljs-keyword">commit</span>;<br>      <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> dept;<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li></ul></li><li><p>第二步：准备一套HTML页面（项目原型）【前端开发工具使用HBuilder】</p><ul><li>把HTML页面准备好</li><li>然后将HTML页面中的链接都能够跑通。（页面流转没问题。）</li><li>应该设计哪些页面呢？<ul><li>欢迎页面：index.html</li><li>列表页面：list.html（以列表页面为核心，展开其他操作。）</li><li>新增页面：add.html</li><li>修改页面：edit.html</li><li>详情页面：detail.html</li></ul></li></ul></li><li><p>第三步：分析我们这个系统包括哪些功能？</p><ul><li>什么叫做一个功能呢？<ul><li>只要 这个操作连接了数据库，就表示一个独立的功能。</li></ul></li><li>包括哪些功能？<ul><li>查看部门列表</li><li>新增部门</li><li>删除部门</li><li>查看部门详细信息</li><li>跳转到修改页面</li><li>修改部门</li></ul></li></ul></li><li><p>第四步：在IDEA当中搭建开发环境</p><ul><li>创建一个webapp（给这个webapp添加servlet-api.jar和jsp-api.jar到classpath当中。）</li><li>向webapp中添加连接数据库的jar包（mysql驱动）<ul><li>必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个lib目录下。这个目录名必须叫做lib，全部小写的。</li></ul></li><li>JDBC的工具类</li><li>将所有HTML页面拷贝到web目录下。</li></ul></li><li><p>第五步：实现第一个功能：查看部门列表</p><ul><li><p>我们应该怎么去实现一个功能呢？</p><ul><li>建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。</li><li>从哪里开始？<ul><li>假设从前端开始，那么一定是从用户点击按钮那里开始的。</li></ul></li></ul></li><li><p>第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。</p><ul><li>&#96;&#96;&#96;html<br><a href="/oa/dept/list">查看部门列表</a><figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-n41xzhlbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-n41xzhlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 第二：编写web.xml文件<br><br>  - ```xml<br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.bjpowernode.oa.web.action.DeptListServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dept/list<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>第三：编写DeptListServlet类继承HttpServlet类。然后重写doGet方法。</p><ul><li><p>&#96;&#96;&#96;java<br>package com.bjpowernode.oa.web.action;</p><p>import jakarta.servlet.ServletException;<br>import jakarta.servlet.http.HttpServlet;<br>import jakarta.servlet.http.HttpServletRequest;<br>import jakarta.servlet.http.HttpServletResponse;</p><p>import java.io.IOException;</p><p>public class DeptListServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {<br>}<br>}</p><figure class="highlight routeros"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ppcnbolbavf10x"></i><span>routeros</span><div class="collapse show" id="collapse-ppcnbolbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>- 第四：在DeptListServlet类的doGet方法中连接数据库，查询所有的部门，动态的展示部门列表页面.<br><br>  - 分析list.html页面中哪部分是固定死的，哪部分是需要动态展示的。<br><br>  - list.html页面中的内容所有的双引号要替换成单引号，因为out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)这里有一个双引号，容易冲突。<br><br>  - 现在写完这个功能之后，你会有一种感觉，感觉开发很繁琐，只使用servlet写代码太繁琐了。<br><br>  - ```java<br>    <span class="hljs-keyword">while</span>(rs.next())&#123;<br>        String deptno = rs.getString(<span class="hljs-string">&quot;a&quot;</span>);<br>        String dname = rs.getString(<span class="hljs-string">&quot;dname&quot;</span>);<br>        String loc = rs.getString(<span class="hljs-string">&quot;loc&quot;</span>);<br>    <br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+(++i)+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+deptno+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+dname+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;a href=&#x27;&#x27;&gt;删除&lt;/a&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;a href=&#x27;edit.html&#x27;&gt;修改&lt;/a&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;a href=&#x27;detail.html&#x27;&gt;详情&lt;/a&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);<br>        out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>第六步：查看部门详情。</p><ul><li><p>建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？</p><ul><li><p>一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了</p><ul><li><pre><code class="html">&lt;a href=&#39;写一个路径&#39;&gt;详情&lt;/a&gt;<figure class="highlight autohotkey"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3fird2lbavf10x"></i><span>autohotkey</span><div class="collapse show" id="collapse-3fird2lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 详情  是需要连接数据库的，所以这个超链接点击之后也是需要执行一段java代码的。所以要将这个超链接的路径修改一下。<br><br>  - 注意：修改路径之后，这个路径是需要加项目名的。<span class="hljs-string">&quot;/oa/dept/detail&quot;</span><br><br>- 技巧：<br><br>  - ```java<br>    out.print(<span class="hljs-string">&quot;&lt;a href=&#x27;&quot;</span>+contextPath+<span class="hljs-string">&quot;/dept/detail?deptno=&quot;</span>+deptno+<span class="hljs-string">&quot;&#x27;&gt;详情&lt;/a&gt;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>重点：向服务器提交数据的格式：uri?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</p></li><li><p>这里的问号，必须是英文的问号。不能中文的问号。</p></li></ul></li></ul></li><li><p>解决404的问题。写web.xml文件。</p><ul><li>&#96;&#96;&#96;xml<servlet>    <servlet-name>detail</servlet-name>    <servlet-class>com.bjpowernode.oa.web.action.DeptDetailServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>detail</servlet-name>    <url-pattern>/dept/detail</url-pattern></servlet-mapping><figure class="highlight scala"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ezmwr6lbavf10x"></i><span>scala</span><div class="collapse show" id="collapse-ezmwr6lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>- 编写一个类：<span class="hljs-type">DeptDetailServlet</span>继承<span class="hljs-type">HttpServlet</span>，重写doGet方法。<br><br>  - ```java<br>    <span class="hljs-keyword">package</span> com.bjpowernode.oa.web.action;<br>    <br>    <span class="hljs-keyword">import</span> jakarta.servlet.<span class="hljs-type">ServletException</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServlet</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br>    <span class="hljs-keyword">import</span> jakarta.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br>    <br>    <span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br>    <br>    public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeptDetailServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response)<br>                <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>            <span class="hljs-comment">//中文思路（思路来源于：你要做什么？目标：查看部门详细信息。）</span><br>            <span class="hljs-comment">// 第一步：获取部门编号</span><br>            <span class="hljs-comment">// 第二步：根据部门编号查询数据库，获取该部门编号对应的部门信息。</span><br>            <span class="hljs-comment">// 第三步：将部门信息响应到浏览器上。（显示一个详情。）</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>在doGet方法当中：连接数据库，根据部门编号查询该部门的信息。动态展示部门详情页。</p></li></ul></li><li><p>第七步：删除部门</p><ul><li><p>怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）</p><ul><li><pre><code class="html">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;del(30)&quot; &gt;删除&lt;/a&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function del(dno)&#123;        if(window.confirm(&quot;亲，删了不可恢复哦！&quot;))&#123;            document.location.href = &quot;/oa/dept/delete?deptno=&quot; + dno;        &#125;    &#125;&lt;/script&gt;<figure class="highlight pgsql"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-36x6v2lbavf10x"></i><span>pgsql</span><div class="collapse show" id="collapse-36x6v2lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  <br>- 以上的前端程序要写到后端的java代码当中：<br>  <br>  - DeptListServlet类的doGet方法当中，使用<span class="hljs-keyword">out</span>.print()方法，将以上的前端代码输出到浏览器上。<br>  <br>- 解决<span class="hljs-number">404</span>的问题：<br>  <br>  - http://localhost:<span class="hljs-number">8080</span>/oa/dept/<span class="hljs-keyword">delete</span>?deptno=<span class="hljs-number">30</span> <br>  <br>  - web.xml文件<br>  <br>    - ```<span class="hljs-type">xml</span><br>      &lt;servlet&gt;<br>          &lt;servlet-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">delete</span>&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>          &lt;servlet-<span class="hljs-keyword">class</span>&gt;com.bjpowernode.oa.web.action.DeptDelServlet&lt;/servlet-<span class="hljs-keyword">class</span>&gt;<br>      &lt;/servlet&gt;<br>      &lt;servlet-<span class="hljs-keyword">mapping</span>&gt;<br>          &lt;servlet-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">delete</span>&lt;/servlet-<span class="hljs-type">name</span>&gt;<br>          &lt;url-pattern&gt;/dept/<span class="hljs-keyword">delete</span>&lt;/url-pattern&gt;<br>      &lt;/servlet-<span class="hljs-keyword">mapping</span>&gt;<br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>编写DeptDelServlet继承HttpServlet，重写doGet方法。</p></li><li><p>&#96;&#96;&#96;java<br>package com.bjpowernode.oa.web.action;</p><p>import jakarta.servlet.ServletException;<br>import jakarta.servlet.http.HttpServlet;<br>import jakarta.servlet.http.HttpServletRequest;<br>import jakarta.servlet.http.HttpServletResponse;</p><p>import java.io.IOException;</p><p>public class DeptDelServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {<br>    &#x2F;&#x2F; 根据部门编号，删除部门。<br><br>}<br>}</p><figure class="highlight awk"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-xv5hkvlbavf10x"></i><span>awk</span><div class="collapse show" id="collapse-xv5hkvlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">  <br>- 删除成功或者失败的时候的一个处理（这里我们选择了转发，并没有使用重定向机制。）<br>  <br>  - ```java<br>    <span class="hljs-regexp">//</span> 判断删除成功了还是失败了。<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-regexp">//</span>删除成功<br>        <span class="hljs-regexp">//</span>仍然跳转到部门列表页面<br>        <span class="hljs-regexp">//</span>部门列表页面的显示需要执行另一个Servlet。怎么办？转发。<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/dept/list&quot;</span>).forward(request, response);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-regexp">//</span> 删除失败<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/error.html&quot;</span>).forward(request, response);<br>    &#125;<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>第八步：新增部门</p><ul><li>注意：最后保存成功之后，转发到 &#x2F;dept&#x2F;list 的时候，会出现405，为什么？<ul><li>第一：保存用的是post请求。底层要执行doPost方法。</li><li>第二：转发是一次请求，之前是post，之后还是post，因为它是一次请求。</li><li>第三：&#x2F;dept&#x2F;list Servlet当中只有一个doGet方法。</li><li>怎么解决？两种方案<ul><li>第一种：在&#x2F;dept&#x2F;list Servlet中添加doPost方法，然后在doPost方法中调用doGet。</li><li>第二种：重定向。</li></ul></li></ul></li></ul></li><li><p>第九步：跳转到修改部门的页面</p></li><li><p>第十步：修改部门</p></li></ul></li></ul><h2 id="在一个web应用中应该如何完成资源的跳转"><a href="#在一个web应用中应该如何完成资源的跳转" class="headerlink" title="在一个web应用中应该如何完成资源的跳转"></a>在一个web应用中应该如何完成资源的跳转</h2><ul><li><p>在一个web应用中通过两种方式，可以完成资源的跳转：</p><ul><li>第一种方式：转发</li><li>第二种方式：重定向</li></ul></li><li><p>转发和重定向有什么区别？</p><ul><li><p>代码上有什么区别？</p><ul><li><p>转发</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 获取请求转发器对象<br>RequestDispatcher dispatcher &#x3D; request.getRequestDispatcher(“&#x2F;dept&#x2F;list”);<br>&#x2F;&#x2F; 调用请求转发器对象的forward方法完成转发<br>dispatcher.forward(request, response);</p><p>&#x2F;&#x2F; 合并一行代码<br>request.getRequestDispatcher(“&#x2F;dept&#x2F;list”).forward(request, response);<br>&#x2F;&#x2F; 转发的时候是一次请求，不管你转发了多少次。都是一次请求。<br>&#x2F;&#x2F; AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。<br>&#x2F;&#x2F; 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</p><figure class="highlight awk"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ifad85lbavf10x"></i><span>awk</span><div class="collapse show" id="collapse-ifad85lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- 重定向<br><br>  - ```java<br>    <span class="hljs-regexp">//</span> 注意：路径上要加一个项目名。为什么？<br>    <span class="hljs-regexp">//</span> 浏览器发送请求，请求路径上是需要添加项目名的。<br>    <span class="hljs-regexp">//</span> 以下这一行代码会将请求路径“<span class="hljs-regexp">/oa/</span>dept/list”发送给浏览器<br>    <span class="hljs-regexp">//</span> 浏览器会自发的向服务器发送一次全新的请求：<span class="hljs-regexp">/oa/</span>dept/list<br>    response.sendRedirect(<span class="hljs-string">&quot;/oa/dept/list&quot;</span>);<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>形式上有什么区别？</p><ul><li>转发（一次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li></ul></li><li>重定向（两次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li></ul></li></ul></li><li><p>转发和重定向的本质区别？</p><ul><li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li><li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li></ul></li><li><p>使用一个例子去描述这个转发和重定向</p><ul><li>借钱（转发：发送了一次请求）<ul><li>杜老师没钱了，找张三借钱，其实张三没有钱，但是张三够义气，张三自己找李四借了钱，然后张三把这个钱给了杜老师，杜老师不知道这个钱是李四的，杜老师只求了一个人。杜老师以为这个钱就是张三的。</li></ul></li><li>借钱（重定向：发送了两次请求）<ul><li>杜老师没钱了，找张三借钱，张三没有钱，张三有一个好哥们，叫李四，李四是个富二代，于是张三将李四的家庭住址告诉了杜老师，杜老师按照这个地址去找到李四，然后从李四那里借了钱。显然杜老师在这个过程中，求了两个人。并且杜老师知道最终这个钱是李四借给俺的。</li></ul></li></ul></li></ul></li><li><p>转发和重定向应该如何选择？什么时候使用转发，什么时候使用重定向？</p><ul><li>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</li><li>剩下所有的请求均使用重定向。（重定向使用较多。）</li></ul></li><li><p>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</p><ul><li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li></ul></li><li><p>转发会存在浏览器的刷新问题。</p></li></ul><h2 id="将oa项目中的资源跳转修改为合适的跳转方式"><a href="#将oa项目中的资源跳转修改为合适的跳转方式" class="headerlink" title="将oa项目中的资源跳转修改为合适的跳转方式"></a>将oa项目中的资源跳转修改为合适的跳转方式</h2><ul><li>删除之后，重定向</li><li>修改之后，重定向</li><li>保存之后，重定向</li><li>重定向：<ul><li>成功</li><li>失败</li></ul></li></ul><h2 id="Servlet注解，简化配置"><a href="#Servlet注解，简化配置" class="headerlink" title="Servlet注解，简化配置"></a>Servlet注解，简化配置</h2><ul><li><p>分析oa项目中的web.xml文件</p><ul><li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li><li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li><li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li></ul></li><li><p>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</p><ul><li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li><li>web.xml文件体积变小了。</li></ul></li><li><p>并不是说注解有了之后，web.xml文件就不需要了：</p><ul><li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li><li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li></ul></li><li><p>我们的第一个注解：</p><ul><li>&#96;&#96;&#96;<br>jakarta.servlet.annotation.WebServlet<figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-6iqq03lbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-6iqq03lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">  -</span> 在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？<br><br><span class="hljs-bullet">    -</span> name属性：用来指定Servlet的名字。等同于：<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span></span><br><span class="hljs-bullet">    -</span> urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span></span><br><span class="hljs-bullet">    -</span> loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span></span><br><span class="hljs-bullet">    -</span> value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。<br><span class="hljs-bullet">    -</span> 注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）<br><span class="hljs-bullet">    -</span> 注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。<br><br><span class="hljs-bullet">-</span> 注解对象的使用格式：<br><br><span class="hljs-bullet">  -</span> @注解名称(属性名=属性值, 属性名=属性值, 属性名=属性值....)<br><br><span class="hljs-section">## 使用模板方法设计模式优化oa项目</span><br><br><span class="hljs-bullet">-</span> 上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。<br><span class="hljs-bullet">  -</span> 一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）<br><span class="hljs-bullet">  -</span> 怎么解决这个类爆炸问题？可以使用模板方法设计模式。<br><span class="hljs-bullet">-</span> 怎么解决类爆炸问题？<br><span class="hljs-bullet">  -</span> 以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。<br><span class="hljs-bullet">  -</span> 可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。<br><span class="hljs-bullet">  -</span> 处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。<br><br><span class="hljs-section">## 分析使用纯粹Servlet开发web应用的缺陷</span><br><br><span class="hljs-bullet">-</span> 在Servlet当中编写HTML/CSS/JavaScript等前端代码。存在什么问题？<br><span class="hljs-bullet">  -</span> java程序中编写前端代码，编写难度大。麻烦。<br><span class="hljs-bullet">  -</span> java程序中编写前端代码，显然程序的耦合度非常高。<br><span class="hljs-bullet">  -</span> java程序中编写前端代码，代码非常不美观。<br><span class="hljs-bullet">  -</span> java程序中编写前端代码，维护成本太高。（非常难于维护）<br><span class="hljs-bullet">    -</span> 修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。<br><span class="hljs-bullet">-</span> 思考一下，如果是你的话，你准备怎么解决这个问题？<br><span class="hljs-bullet">  -</span> 思路很重要。使用什么样的思路去做、去解决这个问题<br><span class="hljs-bullet">    -</span> 上面的那个Servlet（Java程序）能不能不写了，让机器自动生成。我们程序员只需要写这个Servlet程序中的“前端的那段代码”，然后让机器将我们写的“前端代码”自动翻译生成“Servlet这种java程序”。然后机器再自动将“java”程序编译生成&quot;class&quot;文件。然后再使用JVM调用这个class中的方法。<br><br><span class="hljs-section">## 关于B/S结构系统的会话机制（session机制）</span><br><br><span class="hljs-bullet">-</span> 什么是会话？<br><span class="hljs-bullet">  -</span> 会话对应的英语单词：session<br><span class="hljs-bullet">  -</span> 用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。<br><span class="hljs-bullet">  -</span> 什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。<br><span class="hljs-bullet">  -</span> 一个会话当中包含多次请求。（一次会话对应N次请求。）<br>  <br><span class="hljs-bullet">-</span> 在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）<br><br><span class="hljs-bullet">-</span> session机制属于B/S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。<br><br><span class="hljs-bullet">-</span> session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）<br><br><span class="hljs-bullet">-</span> 为什么需要session对象来保存会话状态呢？<br><span class="hljs-bullet">  -</span> 因为HTTP协议是一种无状态协议。<br><span class="hljs-bullet">  -</span> 什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。<br><span class="hljs-bullet">  -</span> 只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？<br><span class="hljs-bullet">    -</span> 不知道。服务器是不知道浏览器关闭的。<br>  <br><span class="hljs-bullet">-</span> 张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：<br><span class="hljs-bullet">  -</span> 张三专属的session对象<br><span class="hljs-bullet">  -</span> 李四专属的session对象<br>  <br><span class="hljs-bullet">-</span> 为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？<br><span class="hljs-bullet">  -</span> request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。<br><span class="hljs-bullet">  -</span> request是一次请求一个对象。<br><span class="hljs-bullet">  -</span> ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。<br><span class="hljs-bullet">  -</span> ServletContext对象的域太大。<br><span class="hljs-bullet">  -</span> request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）<br><span class="hljs-bullet">  -</span> request &lt; session &lt; application<br>  <br><span class="hljs-bullet">-</span> 思考一下：session对象的实现原理。<br><span class="hljs-bullet">  -</span> HttpSession session = request.getSession();<br><span class="hljs-bullet">  -</span> 这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。<br>  <br><span class="hljs-bullet">-</span> session的实现原理：<br><br><span class="hljs-bullet">  -</span> JSESSIONID=xxxxxx  这个是以Cookie的形式保存在浏览器的内存中的。浏览器只要关闭。这个cookie就没有了。<br><span class="hljs-bullet">  -</span> session列表是一个Map，map的key是sessionid，map的value是session对象。<br><span class="hljs-bullet">  -</span> 用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。<br><span class="hljs-bullet">  -</span> 用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。<br><span class="hljs-bullet">  -</span> 关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。<br><br><span class="hljs-bullet">-</span> Cookie禁用了，session还能找到吗？<br><br><span class="hljs-bullet">  -</span> cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。<br><span class="hljs-bullet">  -</span> 找不到了。每一次请求都会获取到新的session对象。<br><span class="hljs-bullet">  -</span> cookie禁用了，session机制还能实现吗？<br><span class="hljs-bullet">    -</span> 可以。需要使用URL重写机制。<br><span class="hljs-bullet">    -</span> http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16<br><span class="hljs-bullet">    -</span> URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。<br><br><span class="hljs-bullet">-</span> 总结一下到目前位置我们所了解的域对象：<br><br><span class="hljs-bullet">  -</span> request（对应的类名：HttpServletRequest）<br><span class="hljs-bullet">    -</span> 请求域（请求级别的）<br><span class="hljs-bullet">  -</span> session（对应的类名：HttpSession）<br><span class="hljs-bullet">    -</span> 会话域（用户级别的）<br><span class="hljs-bullet">  -</span> application（对应的类名：ServletContext）<br><span class="hljs-bullet">    -</span> 应用域（项目级别的，所有用户共享的。）<br><span class="hljs-bullet">  -</span> 这三个域对象的大小关系<br><span class="hljs-bullet">    -</span> request &lt; session &lt; application<br><span class="hljs-bullet">  -</span> 他们三个域对象都有以下三个公共的方法：<br><span class="hljs-bullet">    -</span> setAttribute（向域当中绑定数据）<br><span class="hljs-bullet">    -</span> getAttribute（从域当中获取数据）<br><span class="hljs-bullet">    -</span> removeAttribute（删除域当中的数据）<br><span class="hljs-bullet">  -</span> 使用原则：尽量使用小的域。<br><br><span class="hljs-bullet">-</span> session掌握之后，我们怎么解决oa项目中的登录问题，怎么能让登录起作用。<br><br><span class="hljs-bullet">  -</span> 登录成功之后，可以将用户的登录信息存储到session当中。也就是说session中如果有用户的信息就代表用户登录成功了。session中没有用户信息，表示用户没有登录过。则跳转到登录页面。<br><br><span class="hljs-bullet">-</span> 销毁session对象：<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```java</span><br><span class="hljs-code">    session.invalidate();</span><br></code></pre></td></tr></table></div></figure></li></ul></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li><p>session的实现原理中，每一个session对象都会关联一个sessionid，例如：</p><ul><li>JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8</li><li>以上的这个键值对数据其实就是cookie对象。</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li><li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li><li>例如，这个Cookie: JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li><li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li></ul></li><li><p>cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？</p></li><li><p>cookie最终是保存在浏览器客户端上的。</p><ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li><li>也可以保存在硬盘文件中。（永久保存。）</li></ul></li><li><p>cookie有啥用呢？</p><ul><li>cookie和session机制其实都是为了保存会话的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li><li><p>cookie的经典案例</p><ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？<ul><li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。<ul><li>京东存储购物车中商品的cookie可能是这样的：productIds&#x3D;xxxxx,yyyy,zzz,kkkk</li><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul></li><li>126邮箱中有一个功能：十天内免登录<ul><li>这个功能也是需要cookie来实现的。</li><li>怎么实现的呢？<ul><li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li><li>怎么让cookie失效？<ul><li>十天过后自动失效。</li><li>或者改密码。</li><li>或者在客户端浏览器上清除cookie。</li></ul></li></ul></li></ul></li></ul></li><li><p>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。</p></li><li><p>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。</p></li><li><p>在java的servlet中，对cookie提供了哪些支持呢？</p><ul><li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li><li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li></ul></li><li><p>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</p></li><li><p>关于cookie的有效时间</p><ul><li>怎么用java设置cookie的有效时间<ul><li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li></ul></li><li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li>设置cookie的有效时间 &#x3D; 0 呢？<ul><li>cookie被删除，同名cookie被删除。</li></ul></li><li>设置cookie的有效时间 &lt; 0 呢？<ul><li>保存在运行内存中。和不设置一样。</li></ul></li></ul></li><li><p>关于cookie的path，cookie关联的路径：</p><ul><li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a><ul><li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li><li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li></ul></li><li>手动设置cookie的path<ul><li>cookie.setPath(“&#x2F;servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li></ul></li></ul></li><li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p><ul><li><p>&#96;&#96;&#96;java<br>Cookie[] cookies &#x3D; request.getCookies(); &#x2F;&#x2F; 这个方法可能返回null<br>if(cookies !&#x3D; null){<br>for(Cookie cookie : cookies){<br>    &#x2F;&#x2F; 获取cookie的name<br>    String name &#x3D; cookie.getName();<br>    &#x2F;&#x2F; 获取cookie的value<br>    String value &#x3D; cookie.getValue();<br>}<br>}</p><figure class="highlight nestedtext"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-o965jflbavf10x"></i><span>nestedtext</span><div class="collapse show" id="collapse-o965jflbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><br><span class="hljs-bullet">-</span> <span class="hljs-string">使用cookie实现一下十天内免登录功能。</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">先实现登录功能</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">登录成功</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">跳转到部门列表页面</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">登录失败</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">跳转到登录失败页面</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">修改前端页面</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">在登录页面给一个复选框，复选框后面给一句话：十天内免登录。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">用户选择了复选框：表示要支持十天内免登录。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">用户没有选择复选框：表示用户不想使用十天内免登录功能。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">修改Servlet中的login方法</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">如果用户登录成功了，并且用户登录时选择了十天内免登录功能，这个时候应该在Servlet的login方法中创建cookie，用来存储用户名和密码，并且设置路径，设置有效期，将cookie响应给浏览器。（浏览器将其自动保存在硬盘文件当中10天）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">用户再次访问该网站的时候，访问这个网站的首页的时候，有两个走向:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">要么跳转到部门列表页面</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">要么跳转到登录页面</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">以上分别有两个走向，这显然是需要编写java程序进行控制的。</span><br><br><span class="hljs-comment"># JSP</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">我的第一个JSP程序：</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址：</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">http://localhost:8080/jsp/index.jsp 展现在大家面前的是一个空白。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">访问index.jsp，实际上执行的是index_jsp.class中的方法。</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">JSP实际上就是一个Servlet。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">jsp和servlet一样，都是单例的。（假单例。）</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">jsp文件第一次访问的时候是比较慢的，为什么？</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">为什么大部分的运维人员在给客户演示项目的时候，为什么提前先把所有的jsp文件先访问一遍。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">第一次比较麻烦：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">要把jsp文件翻译生成java源文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">java源文件要编译生成class字节码文件</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">然后通过class去创建servlet对象</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">然后调用servlet对象的init方法</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">最后调用servlet对象的service方法。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">第二次就比较快了，为什么？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">因为第二次直接调用单例servlet对象的service方法即可。</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">JSP是什么？</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">JSP是java程序。（JSP本质还是一个Servlet）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">JSP是一套规范。所有的web容器/web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">每一个web容器/web服务器都会内置一个JSP翻译引擎。</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-string">开发JSP的最高境界：</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">眼前是JSP代码，但是脑袋中呈现的是java代码。</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">职责不同：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取/收集数据。）</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">JSP的基础语法</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">在jsp文件中直接编写文字，都会自动被翻译到哪里？</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到servlet类的service方法的out.write(&quot;翻译到这里&quot;)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset=UTF-8</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%@page contentType=&quot;text/html;charset=UTF-8&quot;%&gt;，表示响应的内容类型是text/html，采用的字符集UTF-8</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%@page import=&quot;java.util.List,java.util.ArrayList&quot;%&gt;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">怎么在JSP中编写Java程序：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;% java语句; %&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%! %&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">在这个符号当中编写的java程序会自动翻译到service方法之外。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">JSP的输出语句</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">怎么向浏览器上输出一个java变量。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;% String name = “jack”;  out.write(&quot;name = &quot; + name); %&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%= %&gt; 注意：在=的后面编写要输出的内容。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%= %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ </span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">翻译成了这个java代码：   out.print();</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到service方法当中了。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">什么时候使用&lt;%=%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">在JSP中如何编写JSP的专业注释</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%--JSP的专业注释，不会被翻译到java源代码当中。--%&gt;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--&gt;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">JSP基础语法总结：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">JSP中直接编写普通字符串</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到service方法的out.write(&quot;这里&quot;)</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%%&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到service方法体内部，里面是一条一条的java语句。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%! %&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到service方法之外。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%= %&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">翻译到service方法体内部，翻译为：out.print();</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%@page  contentType=&quot;text/html;charset=UTF-8&quot;%&gt;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">page指令，通过contentType属性用来设置响应的内容类型。</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">使用Servlet + JSP完成oa项目的改造。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">使用Servlet处理业务，收集数据。 使用JSP展示数据。</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）</span><br>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;%=request.getContextPath() %&gt;  在JSP中动态的获取应用的根路径。</span><br>      <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Servlet中连接数据库，查询所有的部门，遍历结果集。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">将java对象存放到List集合中。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">将List集合存储到request域当中。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">转发forward到jsp。</span><br>      <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">在JSP中：</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">从request域当中取出List集合。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">遍历List集合，取出每个部门对象。动态生成tr。</span><br>      <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的&lt;%%&gt;里面写的代码就是在service方法当中的，所以在&lt;%%&gt;当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet + jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">JSP文件的扩展名必须是xxx.jsp吗？</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">jsp文件的扩展名是可以配置的。不是固定的。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">在CATALINA_HOME/conf/web.xml，在这个文件当中配置jsp文件的扩展名。</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">```xml</span><br>        &lt;servlet-mapping&gt;<br>            &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;<br>            &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;<br>            &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;<br>        &lt;/servlet-mapping&gt;<br></code></pre></td></tr></table></div></figure><ul><li><p>xxx.jsp文件对于小猫咪来说，只是一个普通的文本文件，web容器会将xxx.jsp文件最终生成java程序，最终调用的是java对象相关的方法，真正执行的时候，和jsp文件就没有关系了。</p></li><li><p>小窍门：JSP如果看不懂，建议把jsp翻译成java代码，就能看懂了。</p></li><li><p>同学问：包名bean是什么意思？</p><ul><li>javabean（java的logo是一杯冒着热气的咖啡。javabean被翻译为：咖啡豆）</li><li>java是一杯咖啡，咖啡又是由一粒一粒的咖啡豆研磨而成。</li><li>整个java程序中有很多bean的存在。由很多bean组成。</li><li>什么是javabean？实际上javabean你可以理解为符合某种规范的java类，比如：<ul><li>有无参数构造方法</li><li>属性私有化</li><li>对外提供公开的set和get方法</li><li>实现java.io.Serializable接口</li><li>重写toString</li><li>重写hashCode+equals</li><li>….</li></ul></li><li>javabean其实就是java中的实体类。负责数据的封装。</li><li>由于javabean符合javabean规范，具有更强的通用性。</li></ul></li><li><p>完成剩下所有功能的改造。</p></li></ul></li></ul></li><li><p>当前的oa应用存在的问题：</p><ul><li>任何一个用户都可以访问这个系统，都可以对这个系统当中的数据进行增删改这些危险的操作。我只想让合法的用户去使用这个系统，不合法的用户不能访问这个系统，怎么办？<ul><li>加一个登录功能。登录成功的可以访问该系统，登录失败不能访问。</li></ul></li><li>实现登录功能：<ul><li>步骤1：数据库当中添加一个用户表：t_user<ul><li>t_user表当中存储的是用户的登录信息，最基本的也包括：登录的用户名和登录的密码。</li><li>密码一般在数据库表当中存储的是密文。一般不以明文的形式存储。（这里先使用明文方式。）</li><li>向t_user表中插入数据。</li></ul></li><li>步骤2：再实现一个登录页面。<ul><li>登录页面上应该有一个登录的表单。有用户名和密码输入的框。</li><li>用户点击登录，提交表单，提交用户名和密码。form是post方式提交。</li></ul></li><li>步骤3：后台要有一个对应的Servlet来处理登录的请求。<ul><li>登录成功：跳转到部门列表页面。</li><li>登录失败：跳转到失败的页面。</li></ul></li><li>步骤4：再提供一个登录失败的页面。</li></ul></li></ul></li><li><p>登录功能实现了，目前存在的最大的问题：</p><ul><li>这个登录功能目前只是一个摆设，没有任何作用。只要用户知道后端的请求路径，照样可以在不登录的情况下访问。</li><li>这个登录没有真正起到拦截的作用。怎么解决？</li></ul></li><li><p>JSP的指令</p><ul><li><p>指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</p></li><li><p>指令包括哪些呢？</p><ul><li>include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</li><li>taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</li><li>page指令：目前重点学习一个page指令。</li></ul></li><li><p>指令的使用语法是什么？</p><ul><li>&lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;</li></ul></li><li><p>关于page指令当中都有哪些常用的属性呢？</p><ul><li><pre><code class="hljs">&lt;%@page session=&quot;true|false&quot; %&gt;true表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。如果没有设置，默认值就是session=&quot;true&quot;session=&quot;false&quot; 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。<figure class="highlight aspectj"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-pe2uz8lbavf10x"></i><span>aspectj</span><div class="collapse show" id="collapse-pe2uz8lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>- ```<br>  &lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/json&quot;</span> %&gt;<br>  contentType属性用来设置响应的内容类型<br>  但同时也可以设置字符集。<br>  &lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/json;charset=UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></div></figure></code></pre></li><li><pre><code class="hljs">&lt;%@page pageEncoding=&quot;UTF-8&quot; %&gt;pageEncoding=&quot;UTF-8&quot; 表示设置响应时采用的字符集。<figure class="highlight aspectj"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-t6pa7jlbavf10x"></i><span>aspectj</span><div class="collapse show" id="collapse-t6pa7jlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><br>- ```<br>  &lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List, java.util.Date, java.util.ArrayList&quot;</span> %&gt;<br>  &lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> %&gt;<br>  <span class="hljs-keyword">import</span>语句，导包。<br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>&#96;&#96;&#96;<br>&lt;%@page errorPage&#x3D;”&#x2F;error.jsp” %&gt;<br>当前页面出现异常之后，跳转到error.jsp页面。<br>errorPage属性用来指定出错之后的跳转位置。</p><figure class="highlight autohotkey"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-rai5hylbavf10x"></i><span>autohotkey</span><div class="collapse show" id="collapse-rai5hylbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```<br>  &lt;%@page isErrorPage=<span class="hljs-string">&quot;true&quot;</span> %&gt;<br>  表示启用JSP九大内置对象之一：exception<br>  默认值是<span class="hljs-literal">false</span>。<br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li><li><p>JSP的九大内置对象</p><ul><li><p>jakarta.servlet.jsp.PageContext pageContext       页面作用域</p></li><li><p>jakarta.servlet.http.HttpServletRequest request 请求作用域</p></li><li><p>jakarta.servlet.http.HttpSession session  会话作用域</p></li><li><p>jakarta.servlet.ServletContext application 应用作用域</p><ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li><li>以上作用域的使用原则：尽可能使用小的域。</li></ul></li><li><p>java.lang.Throwable exception   </p></li><li><p>jakarta.servlet.ServletConfig config</p></li><li><p>java.lang.Object page  （其实是this，当前的servlet对象）</p></li><li><p>jakarta.servlet.jsp.JspWriter out  （负责输出）</p></li><li><p>jakarta.servlet.http.HttpServletResponse response （负责响应）</p></li></ul></li></ul><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><ul><li><p>EL表达式是干什么用的？</p><ul><li>Expression Language（表达式语言）</li><li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li><li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%&#x3D;%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li><li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li></ul></li><li><p>EL表达式出现在JSP中主要是：</p><ul><li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：<ul><li>第一功效：从某个域中取数据。<ul><li>四个域：<ul><li>pageContext</li><li>request</li><li>session</li><li>application</li></ul></li></ul></li><li>第二功效：将取出的数据转成字符串。<ul><li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li></ul></li><li>第三功效：将字符串输出到浏览器。<ul><li>和这个一样：&lt;%&#x3D; %&gt;，将其输出到浏览器。</li></ul></li></ul></li></ul></li><li><p>EL表达式很好用，基本的语法格式：</p><ul><li>${表达式}</li></ul></li><li><p>EL表达式的使用：</p><ul><li><pre><code class="jsp">&lt;%    // 创建User对象    User user = new User();    user.setUsername(&quot;jackson&quot;);    user.setPassword(&quot;1234&quot;);    user.setAge(50);    // 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。    // 数据是必须存储到四大范围之一的。    request.setAttribute(&quot;userObj&quot;, user);%&gt;&lt;%--使用EL表达式取--%&gt;$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;要这样写：$&#123;userObj&#125;等同于java代码：&lt;%=request.getAttribute(&quot;userObj&quot;)%&gt;你不要这样写：$&#123;&quot;userObj&quot;&#125;面试题：    $&#123;abc&#125; 和 $&#123;&quot;abc&quot;&#125;的区别是什么？        $&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是&quot;abc&quot;，之前一定有这样的代码: 域.setAttribute(&quot;abc&quot;, 对象);        $&#123;&quot;abc&quot;&#125; 表示直接将&quot;abc&quot;当做普通字符串输出到浏览器。不会从某个域中取数据了。$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。&lt;%--如果想输出对象的属性值，怎么办？--%&gt;$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。注意：如果没有对应的get方法，则出现异常。报500错误。$&#123;userObj.addr222.zipcode&#125;以上EL表达式对应的java代码：user.getAddr222().getZipcode()<figure class="highlight markdown"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ipwl68lbavf10x"></i><span>markdown</span><div class="collapse show" id="collapse-ipwl68lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">-</span> EL表达式优先从小范围中读取数据。<br><br><span class="hljs-bullet">  -</span> pageContext &lt; request &lt; session &lt; application<br><br><span class="hljs-bullet">-</span> EL表达式中有四个隐含的隐式的范围：<br><br><span class="hljs-bullet">  -</span> pageScope 对应的是 pageContext范围。<br><span class="hljs-bullet">  -</span> requestScope 对应的是 request范围。<br><span class="hljs-bullet">  -</span> sessionScope 对应的是 session范围。<br><span class="hljs-bullet">  -</span> applicationScope 对应的是 application范围。<br><br><span class="hljs-bullet">-</span> EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。<br><br><span class="hljs-bullet">-</span> EL表达式取数据的时候有两种形式：<br><br><span class="hljs-bullet">  -</span> 第一种：.  （大部分使用这种方式）<br><span class="hljs-bullet">  -</span> 第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）<br><span class="hljs-bullet">    -</span> request.setAttribute(&quot;abc.def&quot;, &quot;zhangsan&quot;);<br><span class="hljs-bullet">    -</span> $&#123;requestScope.abc.def&#125; 这样是无法取值的。<br><span class="hljs-bullet">    -</span> 应该这样：$&#123;requestScope[&quot;abc.def&quot;]&#125;<br><br><span class="hljs-bullet">-</span> 掌握使用EL表达式，怎么从Map集合中取数据：<br><br><span class="hljs-bullet">  -</span> $&#123;map.key&#125;<br><br><span class="hljs-bullet">-</span> 掌握使用EL表达式，怎么从数组和List集合中取数据：<br><br><span class="hljs-bullet">  -</span> $&#123;数组[0]&#125;<br><span class="hljs-bullet">  -</span> $&#123;数组[1]&#125;<br><span class="hljs-bullet">  -</span> $&#123;list[0]&#125;<br><br><span class="hljs-bullet">-</span> page指令当中，有一个属性，可以忽略EL表达式<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```</span><br><span class="hljs-code">    &lt;%@page contentType=&quot;text/html;charset=UTF-8&quot; isELIgnored=&quot;true&quot; %&gt;</span><br><span class="hljs-code">    isELIgnored=&quot;true&quot; 表示忽略EL表达式</span><br><span class="hljs-code">    isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    isELIgnored=&quot;true&quot; 这个是全局的控制。</span><br><span class="hljs-code">    </span><br><span class="hljs-code">    可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>通过EL表达式获取应用的根：</p><ul><li>${pageContext.request.contextPath}</li></ul></li><li><p>EL表达式中其他的隐式对象：</p><ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li><p>EL表达式的运算符</p><ul><li>算术运算符<ul><li>+、-、*、&#x2F;、%</li></ul></li><li>关系运算符<ul><li><input disabled="" type="checkbox"> &#x3D;&#x3D; eq !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</li></ul></li><li>逻辑运算符<ul><li><input disabled="" type="checkbox"> !  &amp;&amp; ||  not and or</li></ul></li><li>条件运算符<ul><li><input disabled="" type="checkbox"> ? :</li></ul></li><li>取值运算符<ul><li>[ ]和.</li></ul></li><li>empty运算符<ul><li><input disabled="" type="checkbox"> empty运算符的结果是boolean类型</li><li><input disabled="" type="checkbox"> ${empty param.username}</li><li><input disabled="" type="checkbox"> ${not empty param.username}</li><li><input disabled="" type="checkbox"> ${!empty param.password}</li></ul></li></ul></li></ul></li></ul><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><ul><li><p>什么是JSTL标签库？</p><ul><li>Java Standard Tag Lib（Java标准的标签库）</li><li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li><li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li></ul></li><li><p>使用JSTL标签库的步骤：</p><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><ul><li>tomcat10之后引入的jar包是：<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></li><li>在IDEA当中怎么引入？<ul><li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li><li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。</li><li>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</li></ul></li></ul></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p><ul><li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p></li><li><p>&#96;&#96;&#96;<br>&lt;%@taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;<br>这个就是核心标签库。<br>prefix&#x3D;”这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。”</p><figure class="highlight llvm"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-k4r2jolbavf10x"></i><span>llvm</span><div class="collapse show" id="collapse-k4r2jolbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm">  <br>  - 第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。<br>  <br>- JSTL标签的原理<br><br>  - ```<br>    &lt;%<span class="hljs-title">@taglib</span> <span class="hljs-keyword">prefix</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;c&quot;</span> uri<span class="hljs-operator">=</span><span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>    以上uri后面的路径实际上指向了一个xxx.tld文件。<br>    tld文件实际上是一个xml配置文件。<br>    在tld文件中描述了“标签”和“java类”之间的关系。<br>    以上核心标签库对应的tld文件是：<span class="hljs-keyword">c</span>.tld文件。它在哪里。<br>    在jakarta.servlet.jsp.jstl<span class="hljs-number">-2.0</span>.<span class="hljs-number">0</span>.jar里面META-INF目录下，有一个<span class="hljs-keyword">c</span>.tld文件。<br></code></pre></td></tr></table></div></figure></li></ul></li><li><p>源码解析：配置文件tld解析</p><ul><li>&#96;&#96;&#96;<tag>    <description>对该标签的描述</description>    <name>catch</name> 标签的名字    <tag-class>org.apache.taglibs.standard.tag.common.core.CatchTag</tag-class> 标签对应的java类。    <body-content>JSP</body-content> 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。    <attribute>        <description>            对这个属性的描述        </description>        <name>var</name> 属性名        <required>false</required> false表示该属性不是必须的。true表示该属性是必须的。        <rtexprvalue>false</rtexprvalue> 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。    </attribute>  </tag>&lt;c:catch var&#x3D;””&gt;<br>JSP….<br></c:catch><figure class="highlight dust"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-i8spd9lbavf10x"></i><span>dust</span><div class="collapse show" id="collapse-i8spd9lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">  </span><br><span class="language-xml">- jstl中的核心标签库core当中有哪些常用的标签呢？</span><br><span class="language-xml"></span><br><span class="language-xml">  - c:if</span><br><span class="language-xml"></span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;boolean类型，支持EL表达式&quot;</span>&gt;</span>&lt;/c: if&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  - c:forEach</span><br><span class="language-xml"></span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;集合，支持EL表达式&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;集合中的元素&quot;</span> <span class="hljs-attr">varStatus</span>=<span class="hljs-string">&quot;元素状态对象&quot;</span>&gt;</span> $</span><span class="hljs-template-variable">&#123;元素状态对象.count&#125;</span><span class="language-xml"> &lt;/c: forEach&gt;</span><br><span class="language-xml">    - <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;i&quot;</span> <span class="hljs-attr">begin</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">end</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> $</span><span class="hljs-template-variable">&#123;i&#125;</span><span class="language-xml"> &lt;/c: forEach&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  - c:choose c:when c:otherwise</span><br><span class="language-xml"></span><br><span class="language-xml">    - ```</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;param.age &lt; 18&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">              青少年</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;param.age &lt; 35&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">              青年</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;param.age &lt; 55&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">              中年</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="language-xml">              老年</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span></span><br></code></pre></td></tr></table></div></figure></li></ul></li></ul></li></ul><h2 id="改造OA"><a href="#改造OA" class="headerlink" title="改造OA"></a>改造OA</h2><ul><li><p>使用什么技术改造呢？</p><ul><li>Servlet + JSP + EL表达式 + JSTL标签。进行改造。</li></ul></li><li><p>在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。</p><ul><li><p>这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。</p></li><li><p>&lt; base href&#x3D;”<a href="http://localhost:8080/oa/&quot;&gt;">http://localhost:8080/oa/&quot;&gt;</a></p></li><li><p>在当前页面中，凡是路径没有以“&#x2F;”开始的，都会自动将base中的路径添加到这些路径之前。</p><ul><li>&lt; a href&#x3D;”ab&#x2F;def”&gt;&lt;&#x2F; a&gt;</li><li>等同于：&lt; a href&#x3D;”<a href="http://localhost:8080/oa/ab/def&quot;&gt;">http://localhost:8080/oa/ab/def&quot;&gt;</a>&lt;&#x2F; a&gt;</li></ul></li><li><p>需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。</p></li><li><p>&#96;&#96;&#96;</p><base href="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/"><figure class="highlight css"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-xcd6zjlbavf10x"></i><span>css</span><div class="collapse show" id="collapse-xcd6zjlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><br># <span class="hljs-attribute">Filter</span>过滤器<br><br>- 当前的OA项目存在什么缺陷？<br>  - DeptServlet、EmpServlet、OrderServlet。每一个Servlet都是处理自己相关的业务。在这些Servlet执行之前都是需要判断用户是否登录了。如果用户登录了，可以继续操作，如果没有登录，需要用户登录。这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，显然代码没有得到重复利用。包括每一个Servlet都要解决中文乱码问题，也有公共的代码。这些代码目前都是重复编写，并没有达到复用。怎么解决这个问题?<br>    - 可以使用Servlet规范中的<span class="hljs-attribute">Filter</span>过滤器来解决这个问题。<br>  <br>- <span class="hljs-attribute">Filter</span>是什么，有什么用，执行原理是什么？<br>  - <span class="hljs-attribute">Filter</span>是过滤器。<br>  - <span class="hljs-attribute">Filter</span>可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。<br>  - 一般情况下，都是在过滤器当中编写公共代码。<br>  <br>- 一个过滤器怎么写呢？<br><br>  - 第一步：编写一个Java类实现一个接口：jarkata<span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.Filter</span>。并且实现这个接口当中所有的方法。<br><br>    - init方法：在<span class="hljs-attribute">Filter</span>对象第一次被创建之后调用，并且只调用一次。<br>    - doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。<br>    - destroy方法：在<span class="hljs-attribute">Filter</span>对象被释放/销毁之前调用，并且只调用一次。<br><br>  - 第二步：在web<span class="hljs-selector-class">.xml</span>文件中对<span class="hljs-attribute">Filter</span>进行配置。这个配置和Servlet很像。<br><br>    - ```<br>      &lt;<span class="hljs-attribute">filter</span>&gt;<br>          &lt;<span class="hljs-attribute">filter</span>-name&gt;filter2&lt;/<span class="hljs-attribute">filter</span>-name&gt;<br>          &lt;<span class="hljs-attribute">filter</span>-class&gt;com<span class="hljs-selector-class">.bjpowernode</span><span class="hljs-selector-class">.javaweb</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.Filter2</span>&lt;/<span class="hljs-attribute">filter</span>-class&gt;<br>      &lt;/<span class="hljs-attribute">filter</span>&gt;<br>      &lt;<span class="hljs-attribute">filter</span>-mapping&gt;<br>          &lt;<span class="hljs-attribute">filter</span>-name&gt;filter2&lt;/<span class="hljs-attribute">filter</span>-name&gt;<br>          &lt;url-pattern&gt;*<span class="hljs-selector-class">.do</span>&lt;/url-pattern&gt;<br>      &lt;/<span class="hljs-attribute">filter</span>-mapping&gt;<br></code></pre></td></tr></table></div></figure><ul><li>或者使用注解：@WebFilter({“*.do”})</li></ul></li></ul></li><li><p>注意：</p><ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li><p>目标Servlet是否执行，取决于两个条件：</p><ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li><p>chain.doFilter(request, response); 这行代码的作用：</p><ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p><ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li><li><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul></li><li><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li></ul></li><li><p>过滤器的调用顺序，遵循栈数据结构。</p></li><li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p><ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li><li><p>Filter的生命周期？</p><ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul></li><li><p>Filter过滤器这里有一个设计模式：</p><ul><li>责任链设计模式。</li><li>过滤器最大的优点：<ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想：<ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul></li><li><p>使用过滤器改造OA项目。</p></li></ul><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>什么是监听器？</p><ul><li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li><li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li></ul></li><li><p>监听器有什么用？</p><ul><li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li><li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li></ul></li><li><p>Servlet规范中提供了哪些监听器？</p><ul><li>jakarta.servlet包下：<ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul></li><li>jakarta.servlet.http包下：<ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener<ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener<ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener<ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener<ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul></li></ul></li><li><p>实现一个监听器的步骤：以ServletContextListener为例。</p><ul><li><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p><ul><li><pre><code class="hljs">void contextInitialized(ServletContextEvent event)void contextDestroyed(ServletContextEvent event)<figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-5vlh5flbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-5vlh5flbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 第二步：在web.xml文件中对ServletContextListener进行配置，如下：<br><br>  - ```<br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.bjpowernode.javaweb.listener.MyServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></div></figure></code></pre></li><li><p>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</p></li></ul></li></ul></li><li><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p><ul><li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li></ul></li><li><p>思考一个业务场景：</p><ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul><li>session.setAttribute(“user”, userObj); </li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li><li><p>实现oa项目中当前登录在线的人数。</p><ul><li>什么代表着用户登录了？<ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？<ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web-Servlet</title>
      <link href="/2022/09/29/WEB%E5%90%8E%E7%AB%AF-Servlet/"/>
      <url>/2022/09/29/WEB%E5%90%8E%E7%AB%AF-Servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><blockquote><p>意义：作为web和webapp开发的桥梁实现<strong>交互式浏览</strong>,生成动态web<br>概念：Servlet 是在服务器上运行的小程序。Servlet是Tomcat为了响应用户的请求所创建的一个对象。</p></blockquote><h2 id="一、B-x2F-S结构原理剖析"><a href="#一、B-x2F-S结构原理剖析" class="headerlink" title="一、B&#x2F;S结构原理剖析"></a>一、B&#x2F;S结构原理剖析</h2><blockquote><p>1.系统架构包括什么形式?</p><ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul><p>2.C&#x2F;S架构</p><ul><li>Client &#x2F; Server(客户端&#x2F;服务器)</li><li>C&#x2F;S架构的特点:需要安装特定的<strong>客户端软件</strong>。</li><li>C&#x2F;S架构的系统优点和缺点分别是什么?<ul><li>优点:<ul><li>速度快（数据大部分集成到客户端软件当中,交互数据量小)</li><li><strong>服务器压力小</strong></li><li>界面酷炫（专门的语言去实现界面的，更加灵活。)</li><li>安全(大量的数据是集成在客户端软件当中的。)</li><li>…</li></ul></li><li>缺点:<ul><li>升级维护比较差劲。(升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。)</li></ul></li></ul></li></ul><p>3.B&#x2F;S架构</p><ul><li>B&#x2F;S (Browser &#x2F; Server，浏览器&#x2F;服务器)</li><li>B&#x2F;S结构的系统是不是一个特殊的C&#x2F;S系统?<ul><li>实际上B&#x2F;S结构的系统是一个<strong>特殊的C&#x2F;S结构</strong>，这个Client是一个固定不变浏览器软件</li></ul></li><li>B&#x2F;S结构的系统优缺点是:<ul><li>优点:<ul><li>升级<strong>维护方便成本比较低</strong>。(只需要升级服务器端即可不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点:<ul><li>速度慢(所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B&#x2F;S结构的系统在网络中传送的数据量比较大。)</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。)不安全(所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。)…</li></ul></li></ul></li></ul></blockquote><h3 id="一个WEB系统的通信原理？通信步骤："><a href="#一个WEB系统的通信原理？通信步骤：" class="headerlink" title="一个WEB系统的通信原理？通信步骤："></a>一个WEB系统的通信原理？通信步骤：</h3><blockquote><ul><li><ol><li>用户输入网址（url）</li></ol></li><li><ol start="2"><li>域名解析器进行域名解析(ping的百度ip):<a href="http://180.101.49.12/index.html">http://180.101.49.12:80/index.html</a></li></ol></li><li><ol start="3"><li>浏览器软件在网络中搜索180.101.49.12这台主机</li></ol></li><li><ol start="4"><li>定位到主机的80端口对应的服务器软件</li></ol></li><li><ol start="5"><li>80端口对应的服务器软件得知浏览器请求的资源名是：index.html</li></ol></li><li><ol start="6"><li>80端口服务器软件找到文件后将数据响应到浏览器上</li></ol></li><li><ol start="7"><li>浏览器接收数据代码</li></ol></li><li><ol start="8"><li>浏览器渲染，执行html css js 代码，完成通信<br><img src="https://s1.328888.xyz/2022/09/29/sdC4F.png"></li></ol></li></ul></blockquote><h3 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h3><blockquote><p>WEB服务器软件都有哪些呢?(这些软件都是提前开发好的。)</p><ul><li>Tomcat (WEB服务器)</li><li>jetty (WEB服务器)</li><li>IBOSS(应用服务器)</li><li>WebLogi (应用服务器)</li><li>WebSphere(应用服务器)</li></ul><p>应用服务器和WEB服务器的关系?</p><ul><li>应用服务器实现了lavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了lavaEE中的Servlet + JSP两个核心的规范。</li><li>应用服务器是包含WEB服务器的。</li><li>例如JBOSS中内嵌了一个Tomcat服务器。</li></ul><p> Tomcat下载</p><ul><li>apache官网地址: <a href="https://www.apache.orglo/">https://www.apache.orglo</a> tomcat</li><li>官网地址: <a href="https://tomcat.apache.orgo/">https://tomcat.apache.orgo</a> tomcat开源免费的轻量级WEB服务器。</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+SP规范)</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先有jre (Java的运行时环境)</li><li>Tomcat服务器要想运行，需要先有jre，所以要先安装IDK，配置java运行环境。|<ul><li>JAVA_HOME&#x3D;C:\Program FilesyJavaVyjdk-17.0.1</li><li>PATH&#x3D;%JAVA_HOME%\bin</li></ul></li></ul><p>Tomcat服务器的安装配置:<br>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。<br>启动Tomcat:</p><ul><li>bin目录下有一个文件: startup.bat,通过它可以启动Tomcat服务器。<ul><li>xxx.bat文件是个什么文件? bat文件是windows操作系统专用的， bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。<ul><li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li><li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li></ul></li><li>分析startup.bat文件得出，执行这个命令，实际上最后是执行: catalina.bat文件。catalina.bat文件中有这样一行配置:<ul><li>MAINCLASS&#x3D;org.apache.catalina.startup.Bootstrap(这个类就是main方法所在的类。)</li></ul></li></ul></li><li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。显然直接启动行不通，还有两个环境变量需要配置:<ul><li>PATH&#x3D;%CATALINA_HOME%\bin</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li></ul></li></ul><p>关于Tomcat服务器的目录</p><ul><li>bin:这个目录是Tomcat服务器的命令文件存放的目录，比如:启动Tomcat，关闭Tomcat等。</li><li>conf:这个目录是Tomcat服务器的配置文件存放目录。(server.xml文件中可以配置端口号，默认Tomcat端口是8080)</li><li>lib:这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs:Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp: Tomcat服务器的临时目录。存储临时文件。</li><li>webapps:这个目录当中就是用来存放大量的webapp (web application: web应用)</li><li>work:这个目录是用来存放ISP文件翻译之后的java文件以及编译之后的class文件。</li></ul><p>总结一下配置Tomcat服务器需要哪些环境变量?</p><ul><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li><li>PATH&#x3D;%JAVA_HOME%lbin;%CATALINA_HOME%1bin</li><li>JAVA_HOME&#x3D;JDK的根</li><li>启动Tomcat: startup</li><li>关闭ITomcat:top (shutdown.bat文件重命名为stop.bat，为什么?原因是shutdown命令和windows中的关机命令冲突。所以修改一下。)</li><li>怎么测试Toihcat服务器有没有启动成功呢?</li><li>打开浏览器，在浏览器的地址栏上输入URL即可:<br><a href="http://ip地址:端口(8080)">http://ip地址:端口(8080)</a>  ，这里ip用本地ip127.0.0.1或者localhost</li></ul></blockquote><h3 id="实现一个最基本的web应用-这个web应用中没有java小程序"><a href="#实现一个最基本的web应用-这个web应用中没有java小程序" class="headerlink" title="实现一个最基本的web应用(这个web应用中没有java小程序)"></a>实现一个最基本的web应用(这个web应用中没有java小程序)</h3><blockquote><ul><li>第一步:找到CATALINA_HOMEwebapps目录<ul><li>因为所有的webapp要放到webapps目录下。(没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。)</li></ul></li><li>第二步:在CATALINA_HOME&#x2F;webapps目录下新建一个子目录，起名:oa<ul><li>这个目录名oa就是你这个webapp的名字。</li></ul></li><li>第三步:在oa目录下新建资源文件，例如:index.html,并编写内容</li><li>第四步:启动Tomcat服务器</li><li>第五步:打开浏览器，在浏览器地址栏上输入这样的URL:<ul><li><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></li></ul></li><li>思考一个问题:<ul><li>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗?既然是一样的，我们完全可以使用超链接。</li></ul></li></ul></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ckkqjzlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-ckkqjzlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加http://127.0.0.1:8080--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/test1.html&quot;</span>&gt;</span>跳转测试1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--多个层级也没有关系,正常访问即可--&gt;</span><br><span class="hljs-comment">&lt;!--注意:目前前端上的路径都以“/&quot;根目录开始的，都是加项目名的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/1/2/test2.html&quot;</span>&gt;</span>跳转测试2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure><blockquote><ul><li><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a></li><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成<strong>动态资源</strong>。显然需要连接数据库。<ul><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。(动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的<strong>数据是动态的</strong>，根据数据库中数据的变化而变化。)<br><img src="https://s1.328888.xyz/2022/09/29/MDwLw.png"></li></ul></li></ul></blockquote><p>有哪些角色(在整个BS结构的系统当中，有哪些人参与进去了)</p><ul><li>浏览器软件的开发团队（(浏览器软件很多:谷歌浏览器、火狐浏览器、IE浏览器….)</li><li>WEB Server的开发团队(WEB Server这个软件有很多:Tomcat、Jetty、WebLogic、JBQSS、WebSphere.</li><li>DB Server的开发团队(DB Server这个软件也有很多:Oracle、MySQL……</li><li>webapp的开发团队(WEB应用是我们做为JavaWEB程序员开发的)<br>角色和角色之间需要遵守哪些规范，哪些协议</li><li>webapp的开发团队和WEB Server的开发团队之间有一套规范: JavaEE规范之一Servlet规范。<br>Servlet规范的作用是什么?</li><li>WEB Server和webapp解耦合。</li><li>Browser和WebServer之间有一套传输协议:HTTP协议。(超文本传输协议。</li><li>webapp开发团队和DB Server的开发团队之间有—套规范:JDBC规范。<br><img src="https://s1.328888.xyz/2022/09/29/MOLdX.png"></li></ul><h2 id="二、Servlet本质"><a href="#二、Servlet本质" class="headerlink" title="二、Servlet本质"></a>二、Servlet本质</h2><h3 id="简单模拟Servlet"><a href="#简单模拟Servlet" class="headerlink" title="简单模拟Servlet"></a>简单模拟Servlet</h3><blockquote><p>模拟Servlet本质</p></blockquote><ul><li>充当SUN公司的角色，制定Servlet规范javax.servlet.Servlet接口</li><li>充当Tomcat服务器的开发者</li><li>充当Webapp的开发者</li><li>BankServlet implements Servleto </li><li>UserListServlet implements Servleto </li><li>UserLoginServlet implements Servlet</li></ul><p>通过我们的分析:<br>对于我们javaweb程序员来说，我们只需要做两件事:</p><ul><li>编写一个类实现Servlet接口。</li><li>将编写的类配置到配置文件中，在配置文件中:指定请求路径和类名的关系。</li><li>注意:配置文件名及路径是固定的<br>文件名、文件路径都是SUN公司制定的Servlet规范中的明细。。严格意义上来Servlet其实并不是简单的一个接口:</li><li>Servlet规范中规定了:<ul><li>一个合格的webapp应该是一个怎样的目录结构。一个合格的webapp应该有一个怎样的配置文件。文件路径放在哪里。java程序放在哪里。这些都是Servlet规范中规定的。</li><li>Tomcat服务器要遵循Servlet规范。JavaWEB程序员也要遵循这个Servlet规范。这样Tomcat服务器和webapp才能解耦合。</li></ul></li></ul><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ja2i6xlbavf10x"></i><span>Java</span><div class="collapse show" id="collapse-ja2i6xlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.apache.webserver.Tomcat;<br><span class="hljs-keyword">import</span> az.Servlet.Servlet;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">充当sun公司制定</span><br><span class="hljs-comment">app开发者配置文件名及路径应放在</span><br><span class="hljs-comment">web.properties  /</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>System.out.println(<span class="hljs-string">&quot;启动Tomcat服务器软件成功！&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入要访问的java程序路径&quot;</span>);<br><span class="hljs-comment">//根据用户输入的路径获取配置文件中对应的java程序类名</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sca</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> sca.nextLine();<br><span class="hljs-comment">//加载properties</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;web.properties&quot;</span>;<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pro.load(fis);<br><span class="hljs-comment">//通过key获取value</span><br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> pro.getProperty(key);<br><span class="hljs-comment">//用反射机制获取类(虽然不知道类具体内容,但知道一定实现了Servlet接口)</span><br><span class="hljs-comment">//Object obj = Class.forName(className);没用idea错得离谱，io有点模糊了</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(className);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-comment">//向下转型可以调用方法</span><br><span class="hljs-type">Servlet</span> <span class="hljs-variable">servlet</span> <span class="hljs-operator">=</span>(Servlet)obj;<br><span class="hljs-comment">//动态绑定到获取类实现了Servlet接口的方法</span><br>servlet.service();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> az.Servlet;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">充当sun公司制定</span><br><span class="hljs-comment">app开发者配置文件名及路径应放在</span><br><span class="hljs-comment">web.properties  /</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Servlet</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    java开发团队</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> pers.az.UserListServlet;<br><span class="hljs-keyword">import</span> az.Servlet.Servlet;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserListServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;UserListServlet程序启动成功！&quot;</span>);<br>&#125;<br>&#125;<br>...<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    配置文件</span><br><span class="hljs-comment">*/</span><br>/aaa=pers.az.BankServlet.BankServlet<br>/bbb=pers.az.UserListServlet.UserListServlet<br>/ccc=pers.az.UserLoginServlet.UserLoginServlet<br><br></code></pre></td></tr></table></div></figure><p><img src="https://s1.328888.xyz/2022/09/30/M9upB.png"></p><h3 id="开发第一个Servlet"><a href="#开发第一个Servlet" class="headerlink" title="开发第一个Servlet"></a>开发第一个Servlet</h3><ol><li>Servlet规范意义所在?</li></ol><ul><li>开发所遵循的标准，webapp可以放在不同的WEB服务器中运行，web服务器也能运行实现了该规范的程序。</li></ul><ol start="2"><li>Servlet规范包括什么呢?</li></ol><ul><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>.….</li></ul><h4 id="开发一个带有Servlet-Java小程序-的webapp-重点"><a href="#开发一个带有Servlet-Java小程序-的webapp-重点" class="headerlink" title="开发一个带有Servlet (Java小程序)的webapp(重点)"></a>开发一个带有Servlet (Java小程序)的webapp(重点)</h4><ul><li>开发步骤是怎样的?<ul><li>第一步:在<strong>webapps</strong>目录下<strong>新建一个目录</strong>，起名crm (这个crm就是webapp的名字)。<ul><li>当然，也可以是其它项目,比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</li><li>注意:crm就是这个webapp的根</li></ul></li><li>第二步:在webapp的根下新建一个目录:<strong>WEB-INF</strong><ul><li>注意:这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样</li></ul></li><li>第三步:在WEB-INF目录下新建一个目录:<strong>classes</strong><ul><li>注意:这个目录的名字必须是全部小写的classes。这也是Servlet规范中规的，另外这个目录下一定存放的是Java程序编译之后的class文件(这里存放的是字节码文件)。</li></ul></li><li>第四步:在WEB-INF目录下新建—个目录:<strong>lib</strong><ul><li>注意:这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包（jdbc）。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。</li></ul></li><li>第五步:在WEB-INF目录下新建—个文件:<strong>web.xml</strong><ul><li>注意:这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。且这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴</li><li>在最后一步的时候发现<servlet-class>pes.az.helloServlet.HelloServlet</servlet-class>路径写错了，忘记加最后的类名.HelloServlet</li></ul></li></ul></li></ul><figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-w6wf8llbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-w6wf8llbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></div></figure><ul><li>第六步:<strong>编写一个ava程序</strong>，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。这个Servlet接口不在IDK当中。(因为Servlet不JavaSE了。Servlet属于JavaEE，是另外的一套类库。)Servlet接口(Servlet.class文件)是Oracle提供的。(最原始的是sun公司提供的。)Servlet接口是JavaEE的规范中的一员。Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Serlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOMElib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。<ul><li>重点:从akartaEE9开始，Servlet接口的全名变了: jakarta.servlet.Servlet</li><li>注意:编写这个lava小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</li></ul></li><li>第七步:<strong>编译</strong>编写的HelloServlet<ul><li>重点:你怎么能让HelloSerxlet编译通过呢?</li><li><strong>配置环境变量CLASSBAIH</strong><br>CLASSPATH&#x3D;.;C:\devlapache-tomcat-10.0.12lliblservlet-api.jar<br>思考问题:以上配置的CLASSPATH和Tomcat服务器运行有没有关系?<br>没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。</li></ul></li><li>第八步:将以上编译之后的HelloServlet.class文件<strong>拷贝</strong>到WEB-INFIclasses目录下。</li><li>第九步:在<strong>web.xml文件中编写配置信息</strong>，让”请求路径”和””Servlet类名”关联在一起。这一步用专业术语描述:在web.xml文件中注册Servlet类。<figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-l28yqxlbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-l28yqxlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>suiyi<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>pes.az.helloServlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>suiyi<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/dou/ke/yi<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></div></figure>* <ul><li>第十步:启动Tomcat服务器</li><li>第十一步:打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是:<br><a href="http://127.0.0.1:8080/crm//dou/ke/yi">http://127.0.0.1:8080/crm//dou/ke/yi</a><br>非常重要的一件事:浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。注意:浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是:浏览器上的请求路径带项目名:&#x2F;crm</li></ul></li><li>浏览器上编写的路径太复杂，可以使用超链接。(非常重要: <strong>html页面只能放到WEB-INF目录外面</strong>。)<figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ro9u81lbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-ro9u81lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/crm/dou/ke/yi&quot;</span>&gt;</span>跳转java程序页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure></li></ul><h5 id="开发第一个Servlet总结"><a href="#开发第一个Servlet总结" class="headerlink" title="开发第一个Servlet总结"></a>开发第一个Servlet总结</h5><p>配置jdk和tomcat环境，在webapps目录按规范创建文件夹，编写java程序实现servlet编译后的字节文件放规定目录，配置xml路径。<br>其实重点就做两件事：</p><ol><li><strong>编写java程序</strong></li><li><strong>配置文件</strong></li></ol><h4 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h4><ul><li>JavaEE目前最高版本是JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将lavaEE规范捐献给Apache了。</li><li>Apache把lavaE换名了，以后不叫avaEE了，以后叫做jakartaE。</li><li>以后没有JavaEE了。以后都叫做JakartaEE。</li><li>JavaEE8版本升级之后的”LavaEE 9”，不再是”LavaEE9”这个名字了，叫做JakartaEE9lavaEE8的时候对应的Serxlet类名是:javax.servlet.Servlet<br>. JakartaEE9的时候对应的Servlet类名是: jakarta.servlet.Servlet(包名都换了)如果之前的项目还是在使用javaX.servlet.Servlet，那么项目无法直接部署到Tomcat10+版本上。只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h5 id="解决Tomcat服务器在DOS命令窗口中的乱码问题-控制台乱码"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题-控制台乱码" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题(控制台乱码)"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题(控制台乱码)</h5><p>将CATALINA_HOME&#x2F;conf&#x2F;logging.properties文件中的内容修改如下:<br>java.util.logging.ConsoleHandler.encoding &#x3D; GBK</p><h5 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h5><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-642ndtlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-642ndtlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br><span class="hljs-comment">//5个方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span><span class="hljs-keyword">throws</span> ServletException&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req,ServletResponse response)</span><br><span class="hljs-keyword">throws</span> ServletException , IOException&#123;<br><span class="hljs-comment">//向控制台打印输出</span><br>System.out.println(<span class="hljs-string">&quot;My First Servlet ,Hello Servlet&quot;</span>);<br><span class="hljs-comment">//设置响应内容的类型</span><br>response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br><span class="hljs-comment">//获取输出流，自动关流</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><span class="hljs-comment">//网页上输入/localhost:8080/crm/dou/ke/yi 会打印出hello servlet</span><br>out.print(<span class="hljs-string">&quot;&lt;h1&gt;hello servlet&lt;h1&gt;&quot;</span>);<br><br>&#125;<br>  ...<br></code></pre></td></tr></table></div></figure><h5 id="在Servlet中连接数据库"><a href="#在Servlet中连接数据库" class="headerlink" title="在Servlet中连接数据库"></a>在Servlet中连接数据库</h5><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-k8d1cclbavf10x"></i><span>java</span><div class="collapse show" id="collapse-k8d1cclbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCHello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123;<br><span class="hljs-comment">//5个方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span><span class="hljs-keyword">throws</span> ServletException&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req,ServletResponse response)</span><br><span class="hljs-keyword">throws</span> ServletException , IOException&#123;<br><span class="hljs-comment">//编写原始的JDBC程序，提前导包mysql驱动到了lib文件夹下</span><br><span class="hljs-comment">//连接数据库，查询student表内容</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//设置响应内容的类型</span><br>response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br><span class="hljs-comment">//获取输出流，自动关流</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//1.注册驱动</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><span class="hljs-comment">//2.通过DriverManager获取连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test_data_type&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>conn = DriverManager.getConnection(url,user,password);<br><span class="hljs-comment">//3.编写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from student&quot;</span>;<br><span class="hljs-comment">//4.把sql传给prepareStatement执行sql语句</span><br>ps = conn.prepareStatement(sql);<br>rs = ps.executeQuery();<br><span class="hljs-comment">//5.用结果集ResultSet处理查询结果</span><br><span class="hljs-keyword">while</span>(rs.next())&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">anInt</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">1</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">2</span>);<br>System.out.println(anInt + <span class="hljs-string">&quot;\t&quot;</span> + name);<br><br><span class="hljs-comment">//网页上打印出内容</span><br>out.print(anInt + <span class="hljs-string">&quot;\t&quot;</span> + name);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//6.关流，然后抓一下异常</span><br><span class="hljs-keyword">if</span>(rs != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br>rs.close();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ps != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br>ps.close();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(conn != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br>conn.close();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;    <br>&#125;<br></code></pre></td></tr></table></div></figure><h4 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h4><ol><li><strong>配置环境</strong>（win10，mysql，jdk（环境配置），Tomcat（环境配置））</li><li>把编译好的java<strong>字节码文件</strong>放到Servlet规范目录下</li><li>在规范位置编写<strong>web.xml</strong>文件</li></ol><ul><li>用户在浏览器输入对应url发起请求，根据xml文件对应路径找到字节码文件，然后运行程序会通过JDBC连接数据库，并将查询结果响应到浏览器上。</li></ul><h3 id="成开发环境中开发Servlet程序"><a href="#成开发环境中开发Servlet程序" class="headerlink" title="成开发环境中开发Servlet程序"></a>成开发环境中开发Servlet程序</h3><p>集成开发工具很多，使用较多的IntelliJ IDEA，Eclipse（日食）<br>使用IDEA开发Servlet：</p><ul><li>第一步：New Project</li><li>第二步：新建模块（File –&gt;new–&gt;Module…）</li><li>第三步：让Module变成JavaEE的模块。（符合webapp，Servlet的规范）<ul><li>在Module上右键单击：Add Framework Support.(添加框架支持)  </li><li>然后窗口会有Web Application(选择webapp支持)</li><li>idea会自动生成符合Servlet规范的webapp目录结构</li><li>重点，idea根据Web Application模板生成的目录中有一个web目录，代表webqpp的根</li></ul></li><li>第四步：配置环境，首先是Sevlet和JSP的jar包放到classpath中<ul><li>File –&gt; Project Structure–&gt;Modules–&gt; + –&gt;Add JARS</li><li>顺便实现jakarta.servlet.Servlet接口的5个方法</li></ul></li><li>第五步：在service方法里编写业务代码，这里是连接数据库</li><li>第六步：按规范新建目录lib，将JDBCjar包放进去</li><li>第七步：在web.xml文件中完成java类的注册（请求路径和Servlet之间对应起来），这里无法动态获取，先写死</li><li>第八步：编写一个html页面，页面中超链接指向java程序，用户点击即可获取数据库中的表单内容</li><li>第九步：idea关联Tomcat服务器，关联过程中将webapp部署到Tomcat服务器中<ul><li>idea右上角小锤Add Configuration,左上角+，点击Tomcat Server –&gt;local,设置参数，然后右边有个Deployment，修改Application context为项目名 我这里是 &#x2F;projectName</li></ul></li><li>第十步： 启动Tomcat服务器</li><li>第十一步：浏览器地址栏输入<a href="http://127.0.0.1:8080/projectName.index.html">http://127.0.0.1:8080/projectName.index.html</a></li></ul><h2 id="三、Servlet对象生命周期"><a href="#三、Servlet对象生命周期" class="headerlink" title="三、Servlet对象生命周期"></a>三、Servlet对象生命周期</h2><p>Servlet的生命周期全由WEB server（web容器）负责<br>容器创建的Servlet都放到map集合进行管理</p><ul><li>用户第一次发送请求：无参构造器实例化Servlet（只执行一次），init方法初始化（只执行一次），service方法–&gt;destroy方法销毁（关闭服务器遗言）</li><li>用户第n次请求会直接调用service方法n次</li></ul><h2 id="四、适配器设计模式"><a href="#四、适配器设计模式" class="headerlink" title="四、适配器设计模式"></a>四、适配器设计模式</h2><p>用抽象类GenericServlet实现Servlet，然后可以把目标方法暴露给下一个继承类</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-sq8fg8lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-sq8fg8lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> GenericServlet <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(...)</span>&#125;<br></code></pre></td></tr></table></div></figure><p>改造GennericServlet</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-hn1xbplbavf10x"></i><span>java</span><div class="collapse show" id="collapse-hn1xbplbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    ServletConfig servletConfig;<span class="hljs-comment">//把局部变量设置为全局变量</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">//ServletConfig对象由Tomcat创建并传进来</span><br>        <span class="hljs-built_in">this</span>.servletConfig = servletConfig;<br>        <span class="hljs-built_in">this</span>.init();<br>    &#125;<br><br>    <span class="hljs-comment">//实现了 init(ServletConfig servletConfig)方法不会被子类重写导致servletConfig失效，且可以修改代码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br></code></pre></td></tr></table></div></figure><p>Tomcat服务器有GennericServlet这个类</p><h2 id="五、GenericServlet源码分析"><a href="#五、GenericServlet源码分析" class="headerlink" title="五、GenericServlet源码分析"></a>五、GenericServlet源码分析</h2><p>这个包括了上面和下面的内容，结合起来看<br>可学到的内容：</p><ol><li>四、适配器设计模式<ul><li>通过方法传参把局部变量设置为全局变量（init）</li><li>面对子类想重写父类的final方法时，可在final方法内部调用其它抽象方法交给子类增加功能（init）</li></ul></li><li></li></ol><h2 id="六、ServletConfig接口详解"><a href="#六、ServletConfig接口详解" class="headerlink" title="六、ServletConfig接口详解"></a>六、ServletConfig接口详解</h2><p>ServletConfig作为Servlet规范中的一员，webServer实现了其四个方法（与配置信息有关）<br>getInitParameter(String name);<br>getInitParameterNames();<br>getServletContext();<br>getServletName();</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-s6c5s4lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-s6c5s4lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * GenericServlet封装了Config初始化Servlet配置信息的四个方法</span><br><span class="hljs-comment"> * 继承了GenericServlet的类可直接调用</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigTestServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>      <span class="hljs-comment">//设置响应类型</span><br>      servletResponse.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>      <span class="hljs-comment">//获取响应输出流，自动关闭</span><br>      <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> servletResponse.getWriter();<br>      <span class="hljs-comment">//调用父类方法返回初始化参数name用枚举类接收</span><br>      Enumeration&lt;String&gt; initParameterNames = <span class="hljs-built_in">this</span>.getInitParameterNames();<br>      <span class="hljs-comment">//通过遍历参数名获取参数值</span><br>      <span class="hljs-keyword">while</span> (initParameterNames.hasMoreElements())&#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> initParameterNames.nextElement();<span class="hljs-comment">//name</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">initParameter</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getInitParameter(name);<span class="hljs-comment">//name</span><br>          <span class="hljs-comment">//打印到前台</span><br>          out.println(name + <span class="hljs-string">&quot;=&quot;</span> + initParameter + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">页面显示内容：</span><br><span class="hljs-comment">password=123456</span><br><span class="hljs-comment">driver=com.mysql.jdbc.Driver</span><br><span class="hljs-comment">user=root</span><br><span class="hljs-comment">url=jdbc:mysql//127.0.0.1:3306/test_data_type</span><br><span class="hljs-comment">*/</span><br><br>      &#125;<br>  &#125;<br>&#125;<br><br><br>对应的配置文件<br>   &lt;servlet&gt;<br>        &lt;servlet-name&gt;suiyi5&lt;/servlet-name&gt;<br>        &lt;servlet-class&gt;com.az.test02.ConfigTestServlet&lt;/servlet-class&gt;<br>        &lt;init-param&gt;<br>            &lt;param-name&gt;driver&lt;/param-name&gt;<br>            &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;<br>        &lt;/init-param&gt;<br>        &lt;init-param&gt;<br>            &lt;param-name&gt;url&lt;/param-name&gt;<br>            &lt;param-value&gt;jdbc:mysql<span class="hljs-comment">//127.0.0.1:3306/test_data_type&lt;/param-value&gt;</span><br>        &lt;/init-param&gt;<br>        &lt;init-param&gt;<br>            &lt;param-name&gt;user&lt;/param-name&gt;<br>            &lt;param-value&gt;root&lt;/param-value&gt;<br>        &lt;/init-param&gt;<br>        &lt;init-param&gt;<br>            &lt;param-name&gt;password&lt;/param-name&gt;<br>            &lt;param-value&gt;<span class="hljs-number">123456</span>&lt;/param-value&gt;<br>        &lt;/init-param&gt;<br>    &lt;/servlet&gt;<br>    &lt;servlet-mapping&gt;<br>        &lt;servlet-name&gt;suiyi5&lt;/servlet-name&gt;<br>        &lt;url-pattern&gt;/dou/ke/yi5&lt;/url-pattern&gt;<br>    &lt;/servlet-mapping&gt;<br></code></pre></td></tr></table></div></figure><p><img src="https://s1.328888.xyz/2022/10/05/PrhB5.png"></p><h2 id="七、ServletContext接口详解"><a href="#七、ServletContext接口详解" class="headerlink" title="七、ServletContext接口详解"></a>七、ServletContext接口详解</h2><p>ServletContext是对象的环境对象（Servler对象的上下文对象）<br>由webServer实现，一个webapp对应一个ServletContext，多个Servlet共享一个ServletContext，一个ServletContext对应一个web.xml文件</p><ul><li><p>ServletContext接口中有哪些常用的方法？</p><ul><li>获取初始化参数，获取路径，对servletcontext应用域增删改查，查看日志等</li></ul></li></ul> <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-l9j5fclbavf10x"></i><span>java</span><div class="collapse show" id="collapse-l9j5fclbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInitParameter</span><span class="hljs-params">(String name)</span>; <span class="hljs-comment">// 通过初始化参数的name获取value</span><br><span class="hljs-keyword">public</span> Enumeration&lt;String&gt; <span class="hljs-title function_">getInitParameterNames</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 获取所有的初始化参数的name</span><br></code></pre></td></tr></table></div></figure><figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-t2pwxmlbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-t2pwxmlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>pageSize<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>startIndex<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span><br><span class="hljs-comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span><br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-muu05llbavf10x"></i><span>java</span><div class="collapse show" id="collapse-muu05llbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径</span><br><span class="hljs-comment">// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContextPath</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//String contextPath = application.getContextPath();</span><br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-h6asejlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-h6asejlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取文件的绝对路径（真实路径）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRealPath</span><span class="hljs-params">(String path)</span>;<br></code></pre></td></tr></table></div></figure> <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-lha56elbavf10x"></i><span>java</span><div class="collapse show" id="collapse-lha56elbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过ServletContext对象也是可以记录日志的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String message, Throwable t)</span>;<br>   <br><span class="hljs-comment">// Tomcat服务器的logs目录下都有哪些日志文件？</span><br><span class="hljs-comment">//catalina.20xx-11-05.log 服务器端的java程序运行的控制台信息。</span><br><span class="hljs-comment">//localhost.20xx-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。</span><br><span class="hljs-comment">//localhost_access_log.20xx-11-05.txt 访问日志</span><br></code></pre></td></tr></table></div></figure><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-piyic3lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-piyic3lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</span><br><br><span class="hljs-comment">// 如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</span><br> <span class="hljs-comment">// 存（怎么向ServletContext应用域中存数据）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(String name, Object value)</span>; <span class="hljs-comment">// map.put(k, v)</span><br><span class="hljs-comment">// 取（怎么从ServletContext应用域中取数据）</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>; <span class="hljs-comment">// Object v = map.get(k)</span><br><span class="hljs-comment">// 删（怎么删除ServletContext应用域中的数据）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>; <span class="hljs-comment">// map.remove(k)</span><br><br><br></code></pre></td></tr></table></div></figure><ul><li><p>注意：编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，B&#x2F;S结构的系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要知道它的继承结构：</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-gc7lvhlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-gc7lvhlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">jakarta.servlet.Servlet（接口）【爷爷】<br>jakarta.servlet.GenericServlet <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>（抽象类）【儿子】<br>jakarta.servlet.http.HttpServlet <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericServlet</span>（抽象类）【孙子】<br><br>以后编写的Servlet要继承HttpServlet类。<br></code></pre></td></tr></table></div></figure></li><li><p>大家到目前为止都接触过哪些缓存机制了？</p><ul><li>堆内存当中的字符串常量池。<ul><li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li></ul></li><li>堆内存当中的整数型常量池。<ul><li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li></ul></li><li>连接池(Connection Cache)<ul><li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li><li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li><li>连接池<ul><li>最小连接数</li><li>最大连接数</li><li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li></ul></li></ul></li><li>线程池<ul><li>Tomcat服务器本身就是支持多线程的。</li><li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？<ul><li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li><li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li></ul></li></ul></li><li>redis<ul><li>NoSQL数据库。非关系型数据库。缓存数据库。</li></ul></li><li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</li></ul></li></ul><h2 id="八、HTTP协议剖析"><a href="#八、HTTP协议剖析" class="headerlink" title="八、HTTP协议剖析"></a>八、HTTP协议剖析</h2><p>request:<br>请求行：请求方法（get、post…） url  协议版本号<br>请求头：配置信息<br>空白行：分割行头和体<br>请求体：键值对</p><p>response：<br>状态行： 例：404、405、200、等<br>响应行：协议版本号 状态码  状态<br>响应头：响应内容状态<br>空白行：分割<br>响应体：具体内容被浏览器编译执行</p><h2 id="九、GET和POST本质区别及选择"><a href="#九、GET和POST本质区别及选择" class="headerlink" title="九、GET和POST本质区别及选择"></a>九、GET和POST本质区别及选择</h2><p>get发送请求信息，安全<br>post提交数据，相对不安全</p><h2 id="十、HttpServlet源码分析"><a href="#十、HttpServlet源码分析" class="headerlink" title="十、HttpServlet源码分析"></a>十、HttpServlet源码分析</h2><h2 id="十一、模板方法设计模式"><a href="#十一、模板方法设计模式" class="headerlink" title="十一、模板方法设计模式"></a>十一、模板方法设计模式</h2><p>父类定义算法骨架具体实现留抽象方法给子类去做</p><h2 id="十二、WEB欢迎页"><a href="#十二、WEB欢迎页" class="headerlink" title="十二、WEB欢迎页"></a>十二、WEB欢迎页</h2><p>只带项目名默认走你设置的欢迎页<br>例：127.0.0.1:8080&#x2F;ServletHttpTest  —&gt;   127.0.0.1:8080&#x2F;ServletHttpTest&#x2F;index.html<br>xml文件可以配置多个欢迎页，优先级依次下降</p><figure class="highlight xml"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-p3fegflbavf10x"></i><span>xml</span><div class="collapse show" id="collapse-p3fegflbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 默认从webapp根开始找--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>loginTest.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h2 id="十三、HttpServletRequest源码分析"><a href="#十三、HttpServletRequest源码分析" class="headerlink" title="十三、HttpServletRequest源码分析"></a>十三、HttpServletRequest源码分析</h2><h2 id="十四、乱码解决方案"><a href="#十四、乱码解决方案" class="headerlink" title="十四、乱码解决方案"></a>十四、乱码解决方案</h2><h2 id="十五、转发和重定向深度剖析"><a href="#十五、转发和重定向深度剖析" class="headerlink" title="十五、转发和重定向深度剖析"></a>十五、转发和重定向深度剖析</h2><h2 id="十六、Servlet注解式开发"><a href="#十六、Servlet注解式开发" class="headerlink" title="十六、Servlet注解式开发"></a>十六、Servlet注解式开发</h2><h2 id="十七、session原理剖析"><a href="#十七、session原理剖析" class="headerlink" title="十七、session原理剖析"></a>十七、session原理剖析</h2><h2 id="十八、cookie-原理剖析"><a href="#十八、cookie-原理剖析" class="headerlink" title="十八、cookie 原理剖析"></a>十八、cookie 原理剖析</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX和JQuery</title>
      <link href="/2022/09/29/AJAX%E5%92%8CJQuery/"/>
      <url>/2022/09/29/AJAX%E5%92%8CJQuery/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><blockquote><p>意义 </p><ul><li>可以实现网页的<strong>局部刷新</strong>，让程序更快响应用户操作</li></ul><p>概念  </p><ul><li>是一种综合的技术，内容包括<br>JavaScript : 创建XMLHttpRequest对象,调用属性或方法<br>dom ：处理dom，更新select的数据<br>css：处理视图，更新美化<br>Servlet：服务器端技术<br>数据格式：json，它之前是xml<br>以上技术的综合使用叫做AJAX（Asynchronous JavaScript and XML）</li></ul><p>ajax 核心是javascript和xml（json）：使用js操作XMLHttpRequest，和服务器交互使用json数据格式</p></blockquote><h3 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h3><blockquote><p>1）全局刷新:使用form,href等发起的请求是全局刷新。<br>用户发起请求，视图改变了，跳转视图，使用新的数据添加到页面。缺点:</p><ol><li>传递数据量比较大。占用网络的带宽</li><li>浏览器需要重新的渲染整个页面。</li><li>用户的体验不是那么好</li></ol><p>2)局部刷新︰在当前页面中，发起请求，获取数据，更新当前页面的dom对象。对视图部分刷新<br>特点:</p><ol><li>数量比较小，在网络中传输速度快。</li><li>更新页面内容，是部分更新页面，浏览器不用全部渲染视图。</li><li>在一个页面中，可以做多个局部刷新</li><li>从服务器获取的是数据，拿到更新视图</li></ol></blockquote><h3 id="异步请求对象"><a href="#异步请求对象" class="headerlink" title="异步请求对象"></a>异步请求对象</h3><blockquote><p>通过创建异步对象<strong>XMLHttpRequest</strong>操作属性方法完成局部刷新</p></blockquote><blockquote><p>在局部刷新，需要创建一个对象，代替浏览器发起请求的行为，这个对象存在内存中。代替浏览器发起请求并接收响应数据。这个对象叫做异步请求对象。<br>全局刷新是同步行为，局部刷新是异步行为[浏览器数据没有全部更新]<br>这个异步对象用于在后台与服务器交换数据。XMLHttpRequest 就是异步对象<br>异步对象是在浏览器内部的一种javascript对象。各大浏览器都能支持异步对象使用。<br><img src="https://s1.328888.xyz/2022/09/29/sZrHN.png"></p></blockquote><h3 id="AJAX实例"><a href="#AJAX实例" class="headerlink" title="AJAX实例"></a>AJAX实例</h3><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h3 id="AJAX-1"><a href="#AJAX-1" class="headerlink" title="AJAX"></a>AJAX</h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/09/22/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/22/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript概述："><a href="#JavaScript概述：" class="headerlink" title="JavaScript概述："></a>JavaScript概述：</h3><blockquote><p>脚本语言（解释型语言）程序可被笔记本直接打开,其前身是网景的liveScript，sun公司为其命名javaScript，微软为了抢蛋糕做了个JScript<br>ECMA（欧洲计算机制造协会）统一制定了262标准ECMAScript，同时JScript和JavaScript都遵守这个标准</p><blockquote><p>JavaSrcipt三大块：</p><blockquote><ol><li>核心语法：ECMAScript</li><li>DOM : 对节点进行规范操作，dom规范由W3C指定</li><li>BOM：对浏览器本身操作，例后退，地址栏，弹窗等<br>DOM： Document Object Model：文档对象模型<br>BOM： Browser Object Modeel:浏览器对象模型</li></ol></blockquote></blockquote></blockquote><hr><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><h3 id="嵌入JS的三种方式"><a href="#嵌入JS的三种方式" class="headerlink" title="嵌入JS的三种方式"></a>嵌入JS的三种方式</h3><h5 id="第一种-行间事件"><a href="#第一种-行间事件" class="headerlink" title="第一种 行间事件"></a>第一种 行间事件</h5><blockquote><p>1、需求:用户点击以下这个按钮，弹出一个对话框，对话框上显示: hello world<br>2、JavaScript是一种事件驱动型的编程语言，通常都是在发生某个事件的时候，去执行某段代码。其中事件包括很多，<br>例如:鼠标单击事件click，另外还有其它事件，例如:mouseover是鼠标经过事件等。并且在JavaScript当中任何一个事件都有对应的事件句柄。<br>例如: click对应的事件句柄是onclick, mouseover对应的事件句柄是onmouseover。<br>3、所有的事件句柄都是以标签的属性形式存在。<br>例如以下input button就有一个onclick这样属性。只要有用户点击了以下的这个按钮对象，此时按钮对象上发生了鼠标单击事件，<br>那么注册在onclick事件句柄当中的s代码会被执行! onclick后面代码实际上是浏览器负责执行的。<br>4、onclick&#x3D;”后面的代码”并不是在浏览器打开的时候执行，浏览器打开的时候，只是将这个代码注册给onclick事件句柄了。<br>等待该按钮的click事件发生，只要发生，后面代码会被事件监听器调用。<br>5、怎么使用Js代码弹窗?<br>在s当中有一个内置的BOM对象，可以直接拿来使用，全部小写: window其中window对象有一个方法&#x2F;函数叫做alert，这个函数专门用来弹出对话框!<br>6、 window .alert( ‘ hello world! ‘);弹窗的s代码。<br>通过这个代码可以知道:Js中的字符串可以使用单引号括起来，也可以使用双引号。s中的一条语句可以“;”结尾，也可以不以“;”结尾。</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-015qsvlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-015qsvlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.alert(&#x27;hello word&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我2&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.alert(&#x27;hello world&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-tag">window.alert(&#x27;哼&#x27;)</span></span><br><span class="hljs-string"><span class="hljs-tag">window.alert(&#x27;啊啊啊啊啊啊啊&#x27;)&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="第二种-脚本块"><a href="#第二种-脚本块" class="headerlink" title="第二种 脚本块"></a>第二种 脚本块</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-flg8adlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-flg8adlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//可任意位置</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello start&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>嵌入JS第二种方式，脚本块<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*可任意位置*/</span></span><br><span class="language-javascript"><span class="hljs-comment">//从上往下依次执行</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello zhangsan&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello lisi&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello end&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="第三种-引入外部独立文件"><a href="#第三种-引入外部独立文件" class="headerlink" title="第三种 引入外部独立文件"></a>第三种 引入外部独立文件</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-8im7nllbavf10w"></i><span>html</span><div class="collapse show" id="collapse-8im7nllbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">src的=后面不能有空格<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span> =<span class="hljs-string">&quot;路径&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="函数初步"><a href="#函数初步" class="headerlink" title="函数初步"></a>函数初步</h3><h5 id="语法格式："><a href="#语法格式：" class="headerlink" title="语法格式："></a>语法格式：</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-xuc9erlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-xuc9erlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">JavaScript语法格式<br>function 函数名(形式参数列表)&#123;<br>    函数体;<br>&#125;<br>例如:<br>function sum(a, b)&#123;<br>    return a + b;<br>&#125;<br>函数名:sum<br>形式参数列表是:a和b<br>Js中的函数返回值类型是不需要指定的,因为可以返回任何类型的数据,没有限制<br><br><br></code></pre></td></tr></table></div></figure><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-twauh9lbavf10w"></i><span>html</span><div class="collapse show" id="collapse-twauh9lbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">//函数必须手动调用才会执行<br>//且函数声明优先级高，打开网页时先声明函数，因此调用顺序可写在函数前面<br>//调用sum函数<br>sum(true,1); //语法松散<br>//编写函数<br>function sum(x, y)&#123;<br>        alert(x + &quot;,&quot; + y);<br>&#125;<br>//调用sum函数<br>sum();<br>//调用sum函数<br>sum(1);<br>//调用sum函数<br>sum(1,2);<br>//调用sum函数<br>sum(1,2,3);<br></code></pre></td></tr></table></div></figure><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-7o6zc2lbavf10w"></i><span>html</span><div class="collapse show" id="collapse-7o6zc2lbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">//第一种声明方式<br>function mysum1(a, b)&#123;<br>    return a + b;<br>&#125;<br>//调用函数<br>mysum1(10,20)<br><br>//第二种声明方式<br>mysum2 = function(a, b)&#123;<br>    return a + b;<br>&#125;<br>//调用函数<br>var result = mysum2(10,20);<br>alert(result)<br><br></code></pre></td></tr></table></div></figure><h5 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h5><blockquote><p>后浪推前浪，前浪死在沙滩上</p></blockquote><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><blockquote><p>关于JS的的调试?<br>首选方案是: alert(),在程序的某个位置先使用alert弹出某个变量的值,<br>看看是否是你需要的,通过alert可以调试Js代码.<br>另外一种方案是:采用浏览器自带的调试插件:F12<br>F12这个插件中比较重要的面板:<br>控制台<br>查看器<br>网络<br>掌握以上三个面板!!!</p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>js的变量怎么声明?</p><ul><li>var 变量名;</li><li>var i;</li></ul><p>怎么赋值?</p><ul><li>变量名 &#x3D; 值;</li></ul><p>一行上能声明多个变量吗?</p><ul><li>var &#x3D; a,b,c&#x3D;300;<br>声明3个变量, a,b,c,并且c赋值300，其中a和b变量没有赋值，<br>系统默认赋值undefined<br>undefined在JS中是一个具体的值,这个值就是undefined</li></ul><p>重点:Js语言是一种弱类型语言，没有编译阶段，直接浏览器打开解释执行，<br>        在js中声明变量时不需要指定变量的数据类型，<br>        程序在运行过程当中，赋什么类型的值,变量就是什么数据类型,<br>        并且变量的数据类型是可变的。<br>var i;<br>i &#x3D; 100; 到这里i是整数型<br>i &#x3D; false;到这里i就是布尔类型了<br>i &#x3D; 3.14;<br>i &#x3D; new 0bject();<br>遵循就近原则，<br>注意：</p><ul><li>函数体中声明的变量称为局部变量，<br>当函数体中的局部变量没有声明且赋值了 则作为全局变量，没有赋值则报错</li></ul></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>关于JS的数据类型<br>1、JS中声明变量不需要指定变量数据类型呀，为什么还要学习数据类型呢?<br>例如: var i &#x3D; 100; var d &#x3D; 3.14;<br>在Js中学习数据类型也不是为了声明变量，是为了理解s程序的底层原理。我们起码要知道100是什么类型，3.14是什么类型，怎么存储的….</p><p>2、ES6之前JS的数据类型包括6种:</p><ul><li>Undefined</li><li>Null</li><li>Number</li><li>Boolean</li><li>String</li><li>Object<br>其中:Undefined、Number、String、Boolean、Null都属于原始类型（或者叫做基本数据类型)其中:object属于引用数据类型(或者叫做对象类型)</li></ul><p>3、在ES6之后引入了其它新的类型，知道就行:</p><ul><li>Symbol</li><li>BigInt<br>注意:Es6之后是8种类型。Es6之前是6种类型。</li></ul><p>4、 typeof运算符返回值（非常重要)</p><ul><li>“undefined”</li><li>“number”</li><li>“string”</li><li>“boolean”</li><li>“object”</li><li>“function”<br>并且以上6个字符串都是全部小写的!</li></ul><p>5、在Js中判断两个字符串是否相等，应该使用“&#x3D;&#x3D;”,JS中没有equals函数! ! !</p></blockquote><blockquote><p>练习</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-lb0rgvlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-lb0rgvlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">m</span>(<span class="hljs-params">x , y</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> z = x+y;</span><br><span class="language-javascript">    o = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(z)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//记得关闭百度药丸</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> o);<span class="hljs-comment">//没有声明的o返回的类型undefined</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> d)<span class="hljs-comment">//null返回的类型object</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h5><blockquote><ol><li>只有一个值，值就是：undefined</li><li>当一个变量没有手动赋值，系统默认赋值undefined</li></ol></blockquote><h5 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1ilhxulbavf10w"></i><span>html</span><div class="collapse show" id="collapse-1ilhxulbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>Null类型<br>1.null类型也属于原始类型<br>3.Null类型只有一个值：null<br>3.typeof null 运算结果是&quot;object&quot;<br>*/<br>var i = null;<br>var j ;<br>console.log(typeof i);//object<br>console.log(typeof j);//undefined<br></code></pre></td></tr></table></div></figure><h5 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h5><blockquote><p>1、Number类型属于原始类型。<br>2、Number类型特殊的值:</p><ul><li>NaN</li><li>Infinity</li></ul><p>3、 NaN?<br>&amp;nbsp;&amp;nbsp; Not a Number，表示不是一个数字。但NaN是一个值。它属于Number类型。<br>4、什么情况下结果是一个NaN?<br>&amp;nbsp;&amp;nbsp; 当一个数学表达式的运算结果本应该返回一个数字，但是最终无法返回一个数字的时候，结果是NaN。例如100&#x2F;string<br>5、Infinity是无穷大，当除数是e的时候，最终计算结果是无穷大。例如100&#x2F;0<br>6、强调:<br>&amp;nbsp;&amp;nbsp; JavaScript当中的Number类型代表了java中的基本数据类型:<br>&amp;nbsp;&amp;nbsp; byte、short 、int 、 long、float 、double、</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-rrqpf4lbavf10w"></i><span>html</span><div class="collapse show" id="collapse-rrqpf4lbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">Number类型</span></span><br><span class="hljs-comment"><span class="language-javascript">1.NaN和Infinity</span></span><br><span class="hljs-comment"><span class="language-javascript">2.相当于java中基本数据类型</span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> k =<span class="hljs-title class_">NaN</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> k);<span class="hljs-comment">//&quot;number&quot;</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-number">100</span>/<span class="hljs-string">&quot;中&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<span class="hljs-comment">//&quot;NaN&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> v = <span class="hljs-title class_">Infinity</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> v);<span class="hljs-comment">//&quot;number&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> retVale = <span class="hljs-number">100</span>/<span class="hljs-number">0</span>;</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(retVale);<span class="hljs-comment">//Infinity</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><blockquote><p>7、在Number类型这一块，有一个函数叫做:isNaN()函数，这个函数最终返回布尔类型，返回true表示不是一个数字，返回false表示是一个数字。(双重否定)</p><ul><li>isNaN : is Not a Numbertrue:表示不是一个数字,返回false表示是一个数字,这个函数有一个特点，它会首先尝试将“数据”转换成数字，如果转换失败了，则结果就是true。转换为数字成功了，那么结果就是false。</li></ul><p>8、在Number类型这一块还有一个函数叫做:Number()函数，这个函数的作用是可以将不是数字类型的数据转换成数字类型的数据。</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-zbf846lbavf10w"></i><span>html</span><div class="collapse show" id="collapse-zbf846lbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">function sum(x,y)&#123;<br>    if(isNaN(x)||isNaN(y))&#123;//只要存在一个ture就表示参数里有非数字<br>        alert(&quot;参与求和数据必须都是数字&quot;)<br>&#125;else&#123;<br>    alert(Number(x)+Number(y))<br>    &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sum&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sum(true,100)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sum&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sum(&#x27;中国&#x27;,100)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sum&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sum(&#x27;123&#x27;,100)&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><blockquote><p>9、parseInt()函数，将字符串数字转换成数字，并且取整。向下取整。<br>10、Math.ceil()，这是一个Math工具类中的一个函数，向上取整。</p></blockquote><h6 id="null-undefined-NaN-的区别？"><a href="#null-undefined-NaN-的区别？" class="headerlink" title="null undefined NaN 的区别？"></a>null undefined NaN 的区别？</h6><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-7jplkrlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-7jplkrlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>    1.  == 和 === 有什么区别？<br>        == 等同运算符，只比较值是否相等。<br>        === 全等运算符，既比较值也比较数据类型是否相等<br><br>    2.  null undefined NaN 的区别？<br>    类型都是不一样的，null和undefined是值等同关系<br><br>*/<br>//== 和 === 区别<br>var v1 = true;<br>var v2 = 1;<br>console.log(v1 == v2);//true<br>console.log(v1 === v2);//false<br>var v3 = 1;<br>condole.log(v2 === v3);//true<br><br>//null undefined NaN 的区别<br>//类型比较<br>console.log(typeof null)// &quot;object&quot;<br>console.log(typeof NaN)//&quot;number&quot;<br>console.log(typeof undefined)//&quot;undefined&quot;<br>//==比较<br>console.log(null == NaN)//false<br>console.log(undefined == NaN)//false<br>console.log(null == undefined)//true<br>//===比较<br>console.log(null === NaN)//false<br>console.log(null === undefined)//false<br>console.log(undefined === NaN)//false<br><br><br></code></pre></td></tr></table></div></figure><h5 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h5><blockquote><p>1、Boolean类型属于原始类型。<br>2、Boolean类型只有两个值:true,false，没有其他值。<br>3、Boolean类型中有一个函数:Boolean()函数，这个函数的作用是?<br>&amp;nbsp;&amp;nbsp;&amp;emsp;将不是布尔类型的转换成布尔类型。<br>&amp;nbsp;&amp;nbsp;&amp;emsp;转换规律是什么?<br>&amp;nbsp;&amp;nbsp;&amp;emsp;<strong>“只要有东西”</strong> 结果就是true。同时这个函数会被js隐式调用</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-tu277flbavf10w"></i><span>html</span><div class="collapse show" id="collapse-tu277flbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>Boolean类型<br>*/<br>console.log(Boolean(1));//true<br>console.log(Boolean(0));//false<br><br>console.log(Boolean(&quot;字符串&quot;));//true<br>console.log(Boolean(&quot;&quot;));//false<br><br>console.log(Boolean(Infinity));//true<br>console.log(Boolean(NaN));//false<br><br>console.log(Boolean(new Object()));//true<br>console.log(Boolean(null));//false<br><br>console.log(Boolean(undefined));//false<br><br>//Boolean()函数隐式调用<br>var i = 10;<br>while(i)&#123;//这里相当于Boolean(i)<br>    alert(i);<br>    i--;<br>&#125;<br></code></pre></td></tr></table></div></figure><h5 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h5><blockquote><p>1、string类型属于原始类型（基本数据类型)<br>2、在JS中怎么定义字符串，包括两种方式:</p><ul><li>var s &#x3D;”字符串”;<br>var s &#x3D;’字符串’;</li><li>var s &#x3D; new String(“字符串”);</li></ul><p>3、在JS当中提供了创建字符串的两种方式:<br>如果采用这种方式创建的字符串就属于原始类型!<br>var s &#x3D; “hello” ;<br>如果采用这种方式创建的字符串就属于object类型，这里使用了object类的子类String,String类是JS内置的，可以直接使用:<br>var s&#x3D;new String( “hello”);<br>4、在JS中不管是原始类型的字符串，还是object类型的字符串，他们的方法和属性都是通用的。<br>5、String当中的常用属性和方法:<br>常用属性:</p><blockquote><p>length 属性</p></blockquote><p>获取字符串长度常用方法:</p><blockquote><p>charAt() 获取指定下标位置的字符<br>concat() 连接字符串<br>indexOf() 获取某个字符串在当前字符串中第一次出现处的索引<br>lastIndex0f() 获取某个字符串在当前字符串中最后一次出现处的索引replace方法替换<br>split() 拆分字符串<br>substr(startIndex,length) 截取字符串<br>substring(startIndex,endIndex) 截取字符串,不包括endIndex<br>toLowerCase() 转小写<br>toUpperCase() 转大写</p></blockquote></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-h3piinlbavf10w"></i><span>html</span><div class="collapse show" id="collapse-h3piinlbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>String类型<br>*/<br>//两种方式<br>var s1 = &quot;hello&quot;;<br>console.log(typeof s1);//String<br>var s2 = new String(&quot;hello&quot;);<br>console.log(typeof s2);//Object<br>//常用方法练习<br>console.log(&quot;abcdef.length&quot;);//6<br>console.log(&quot;http://www.baidu.com&quot;.charAt(3))//p<br>console.log(&quot;abc&quot;.concat(&quot;def&quot;));//abcdef<br>console.log(&quot;username=zhangsan&amp;password=123&quot;.indexOf(&quot;=&quot;));//8<br>console.log(&quot;username=zhangsan&amp;password=123&quot;.lastIndexOf(&quot;=&quot;));//26<br>console.log(&quot;1980-10-11&quot;.replace(&quot;-&quot;,&quot;,&quot;));//1980,10,11(替换所有需要正则表达式)<br><br>//拆分字符返回一个数组<br>var arr = &quot;1980-11-12&quot;.split(&quot;-&quot;);//js没有arr[]这种写法<br>for(var i = 0;i &lt; arr.length; i++)&#123;<br>    console.log(arr[i])<br>&#125;<br><br>//对于substr和substring来说，只传一个参数没有区别<br>console.log(&quot;abcdef&quot;.substr(2));//cdef<br>console.log(&quot;abcdef&quot;.substring(2));//cdef<br>//传两个参数<br>//substr(startIndex,length)<br>console.log(&quot;abcdef&quot;.substr(2,3));//cde<br>//substring(startIndex,endIndex),不包括endIndex<br>console.log(&quot;abcdef&quot;.substring(2,3));//c<br><br><br></code></pre></td></tr></table></div></figure><h5 id="object类型"><a href="#object类型" class="headerlink" title="object类型:"></a>object类型:</h5><blockquote><p>1、在js当中内置了一个类型object，可以将object类型看做是所有对象的超类&#x2F;基类。<br>2、在Js当中默认定义的类型，没有特殊说明的话，默认继承object。<br>3、Object类型中有哪些通用属性和方法呢?<br>属性:<br>prototype 属性| constructor 属性<br>方法:<br>toLocalestring 方法| toString 方法│ valueof 方法<br>重点掌握:<br>prototype属性。(prototype翻译为原型）这个属性可以给对象动态扩展属性和方法。</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-o5yg8ulbavf10w"></i><span>html</span><div class="collapse show" id="collapse-o5yg8ulbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>    Object类型<br>*/<br>var obj = new Object();<br>console.log(typeof obj);<br><br>//prototype属性<br>//给Object类型的对象扩展一个doSome()方法<br>Object.prototype.doSome = function()&#123;<br>console.log(&quot;测试prototype属性&quot;)<br>&#125;<br>//给Object类型的对象扩展一个userName属性<br>Object.prototype.userName = &quot;zhangsan&quot;;<br><br>//调用方法和属性<br>obj.doSome();//测试prototype属性<br>console.log(obj.userName);//zhangsan<br><br>//给String扩展方法<br>String.prototype.mysubstr = function(startIndex,length)&#123;<br>    return this.substr(startIndex,length);<br>&#125;<br>console.log(&quot;abcdef&quot;.mysubstr(2,3));//cde<br>console.log(&quot;kingsoft&quot;.mysubstr(3,3));//gso<br></code></pre></td></tr></table></div></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote><p>1、在JS中怎么定义类?包括两种方式</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ynf60plbavf10w"></i><span>html</span><div class="collapse show" id="collapse-ynf60plbavf10w"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html">第一种方式:<br>function类名(形式参数列表&#123;<br>    this.属性名=参数;<br>    this.属性名=参数;<br>    this.方法名 = function()&#123;<br>    &#125;<br>&#125;<br>第二种方式:<br>类名= function(形式参数列表)&#123;<br>    this.属性名=参数;<br>    this.属性名=参数;<br>    this.方法名 = function()&#123;<br>    &#125;<br>&#125;<br><br>//可以看出类和函数的定义方式相同，也就是说既是一个函数,同时又是一个类的定义,函数名是:sayHello,类名是:sayHello<br>/*function sayHello()&#123;<br>&#125;  */<br>sayHello = function()&#123;&#125;<br>//关键看你怎么调用,如果没有使用new运算符调用,表示普通函数调用.不会在堆中new对象<br>sayHello( );<br>//使用new运算符去调用这个函数,显然是把它当做一个类来看待,这个会导致浏览器的堆当中开辟一个新对象!<br>var obj = new sayHello(); //obj是一个引用,保存内存地址指向对象!<br>var obj2 = new sayHello();<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建员工类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Emp</span>(<span class="hljs-params">id,name</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">working</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;正在工作&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;ddd&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> e1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;as&#x27;</span>);</span><br><span class="language-javascript">    e1.<span class="hljs-title function_">working</span>();<span class="hljs-comment">//调用方法</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Emp</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//也可直接当方法调用，就很怪</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;e1.id=&quot;</span> + e1.<span class="hljs-property">id</span>);<span class="hljs-comment">//调用属性</span></span><br><span class="language-javascript">    <span class="hljs-comment">//属性还可以这样调用，语法：引用名[&quot;属性名&quot;]</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;e1.id=&quot;</span> + e1[<span class="hljs-string">&quot;id&quot;</span>]);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><blockquote><p>常用事件：</p><ol><li>blur&amp;emsp;去焦点</li><li>focus&amp;emsp;获得焦点<br></li><li>click&amp;emsp;鼠标单击</li><li>dblclick&amp;emsp;鼠标双击<br></li><li>keydown&amp;emsp;键盘按下</li><li>keyup&amp;emsp;键盘弹起<br></li><li>mousedown&amp;emsp;鼠标按下</li><li>mouseover&amp;emsp;鼠标经过</li><li>mousemove&amp;emsp;鼠标移动</li><li>mouseout&amp;emsp;鼠标离开</li><li>mouseup&amp;emsp;鼠标弹起<br></li><li>submit&amp;emsp;表单提交</li><li>reset&amp;emsp;表单重置<br></li><li>select&amp;emsp;文本被选定</li><li>change&amp;emsp;下拉列表选中项改变,或文本框内容改变</li><li>load&amp;emsp;页面加载完毕工</li></ol></blockquote><blockquote><p>事件测试</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ckptcplbavf10x"></i><span>html</span><div class="collapse show" id="collapse-ckptcplbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>1.测试失去焦点事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;console.log(&#x27;失去焦点了&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>2.测试获得焦点事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;console.log(&#x27;获取焦点了&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>3.测试鼠标单击事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标单机了&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>4.测试鼠标双击事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ondblclick</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标双击了&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>5.测试键盘按下事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeydown</span>=<span class="hljs-string">&quot;console.log(&#x27;键盘按下了&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>6.测试键盘弹起事件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;console.log(&#x27;键盘弹起了&#x27;)&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>7.测试鼠标按下事件:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onmousedown</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标按下了&#x27;)&quot;</span>&gt;</span>鼠标测试区域<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>8.测试鼠标经过事件:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标经过了&#x27;)&quot;</span>&gt;</span>鼠标测试区域<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>9.测试鼠标移动事件:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onmousemove</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标在移动&#x27;)&quot;</span>&gt;</span>鼠标测试区域<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>10.测试鼠标离开事件:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标离开了&#x27;)&quot;</span>&gt;</span>鼠标测试区域<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>11.测试鼠标弹起事件:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onmouseup</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标弹起了&#x27;)&quot;</span>&gt;</span>鼠标测试区域<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>鼠标事件结合:<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouse&quot;</span> <span class="hljs-attr">onkeyup</span>=<span class="hljs-string">&quot;console.log(&#x27;键盘弹起了&#x27;)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">onmousedown</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标按下了&#x27;)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标经过了&#x27;)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">onmousemove</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标在移动&#x27;)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">onmouseout</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标离开了&#x27;)&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">onmouseup</span>=<span class="hljs-string">&quot;console.log(&#x27;鼠标弹起了&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>12.测试表单提交和重置事件:<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;console.log(&#x27;表单提交了&#x27;)&quot;</span> <span class="hljs-attr">onreset</span>= <span class="hljs-string">&quot;(console.log(&#x27;表单重置了&#x27;))&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>14.测试文本被选定事件:<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">onselect</span>=<span class="hljs-string">&quot;console.log(&#x27;文本被选中了&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onselect</span>=<span class="hljs-string">&quot;console.log(&#x27;文本被选中了&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>15.测试下拉列表选中项改变,或文本框内容改变事件:<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;console.log(&#x27;选项被修改！&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--请选择你的爱好<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>事件测试截图<br><img src="https://s1.328888.xyz/2022/09/24/V6qyE.png"></p></blockquote><h4 id="注册事件的第一种方式"><a href="#注册事件的第一种方式" class="headerlink" title="注册事件的第一种方式"></a>注册事件的第一种方式</h4><blockquote><p>在<strong>标签</strong>中使用”事件句柄”，在事件句柄后面编写JS代码<br>当这个事件句柄对应的事件发生之后，注册在事件句柄当中的这个代码被监听器调用。即onclick鼠标单击的事件句柄，只有当鼠标单击事件click发生之后，注册在onclick后面的代码会被执行。<br>下面的button标签中的sayHello()函数，在页面打开的时候并不会执行，只是在页面打开的过程中完成事件的绑定，完成事件的注册，以后只有当该事件发生之后sayHello()函数才会执行，像这种函数有一种特殊的称谓:<strong>回调函数</strong>。英语单词叫做: callback function<br>这个回调函数的特点是:</p><ul><li>监听器负责调用，程序员不负责调用。</li><li>当事件发生之后，监听器会负责调用该函数。</li></ul></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-5bk7bhlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-5bk7bhlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello jack&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sayHello()&quot;</span>/&gt;</span><br></code></pre></td></tr></table></div></figure><h6 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h6><blockquote><p>在学习第二种方式前得先知道如何根据id获取元素&#x2F;节点对象</p><blockquote><p>在JS当中有一个内置的隐含的对象叫做:document</p></blockquote><ul><li>document代表整个HTML文档<br>document对象是DoM的顶级对象, DoM中的老大</li></ul><p>在Js当中有一个内置的隐含的对象叫做:window</p><ul><li>window代表整个浏览器窗口<br>window对象是Bon的顶级对象,BOM中的老大</li></ul><p>严格意义上来说, window是包含document的<br>其中document有一个函数可以通过id获取节点：<strong>getElementById（）</strong><br>var mybtnElt &#x3D; document.getElementById(“mybtn”);<br>获取节点后可以对其属性进行操作，这自然也包括了回调函数</p></blockquote><h4 id="JS注册事件的第二种方式"><a href="#JS注册事件的第二种方式" class="headerlink" title="JS注册事件的第二种方式"></a>JS注册事件的第二种方式</h4><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-fysklolbavf10x"></i><span>html</span><div class="collapse show" id="collapse-fysklolbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hellobtn&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//定义一个函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;sum function invoke! &quot;</span>)&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//根据id获取button对象</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> hellobtnElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;hellobtn&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//元素中有什么属性,就能&quot;点&quot;什么.</span></span><br><span class="language-javascript"><span class="hljs-comment">//这行代码在页面打开的时候会执行，这行代码执行的意义是:</span></span><br><span class="language-javascript">将sum这个回调函数绑定到hellobtn的click事件上</span><br><span class="language-javascript"><span class="hljs-comment">//这个回调函数sum在什么时候执行? click事件发生之后才会被监听器调用!</span></span><br><span class="language-javascript">hellobtnElt.<span class="hljs-property">onclick</span> = sum<span class="hljs-comment">//不要这样写:hellobtnElt.onclick = sum()</span></span><br><span class="language-javascript"><span class="hljs-comment">//回调函数可以是一个匿名函数</span></span><br><span class="language-javascript"><span class="hljs-comment">//这行代码的执行只是完成事件click的注册,给click事件注册一个回调函数</span></span><br><span class="language-javascript"><span class="hljs-comment">//执行到这的时候，回调函数并不会被执行。</span></span><br><span class="language-javascript"><span class="hljs-comment">//只有当这个按钮发生click事件之后,这个回调函数会自动被监听器来调用</span></span><br><span class="language-javascript">hellobtnElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> </span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是一个回调函数，同时我没有名字，叫做匿名函数! &quot;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="代码执行顺序"><a href="#代码执行顺序" class="headerlink" title="代码执行顺序"></a>代码执行顺序</h4><h5 id="1-代码执行顺序问题引出"><a href="#1-代码执行顺序问题引出" class="headerlink" title="1.代码执行顺序问题引出"></a>1.代码执行顺序问题引出</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-gvngnmlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-gvngnmlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//报错Uncaught TypeError: Cannot set properties of null (setting &#x27;onclick&#x27;)</span></span><br><span class="language-javascript">    <span class="hljs-comment">//id为null，代码还没执行到下面</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btnElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript">    btnElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按钮被点击，匿名函数被执行&#x27;</span>)</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="2-代码执行顺序问题解决"><a href="#2-代码执行顺序问题解决" class="headerlink" title="2.代码执行顺序问题解决"></a>2.代码执行顺序问题解决</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ut33y4lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-ut33y4lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript">        btnElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;按钮被点击，匿名函数被执行&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="3-代码执行顺序问题优化"><a href="#3-代码执行顺序问题优化" class="headerlink" title="3.代码执行顺序问题优化"></a>3.代码执行顺序问题优化</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-91curelbavf10x"></i><span>html</span><div class="collapse show" id="collapse-91curelbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">//可以用body的id来获取body节点，然后给它注册load事件，但代码还是冗余</span></span><br><span class="language-javascript">    <span class="hljs-comment">/* var bd = document.getElementById(&#x27;bodyid&#x27;);</span></span><br><span class="hljs-comment"><span class="language-javascript">    bd.onload = test; */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//window可以代替body，因此可以把load事件注册（绑定）到window上，等到事件发生之后监听器自动调用</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-title function_">test</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="4-代码执行顺序完整案例"><a href="#4-代码执行顺序完整案例" class="headerlink" title="4.代码执行顺序完整案例"></a>4.代码执行顺序完整案例</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-nt7jnalbavf10x"></i><span>html</span><div class="collapse show" id="collapse-nt7jnalbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//注册加载事件，事件触发后由监听器调用回调函数</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//正常写</span></span><br><span class="language-javascript">        <span class="hljs-comment">/* var b1 = document.getElementById(&#x27;button1&#x27;);</span></span><br><span class="hljs-comment"><span class="language-javascript">        b1.onclick = function()&#123;//注册单击事件，事件触发后由监听器调用回调函数</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log(&#x27;按钮1被单击了&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">        var b1 = document.getElementById(&#x27;button1&#x27;);</span></span><br><span class="hljs-comment"><span class="language-javascript">        b2.onclick = function()&#123;//注册单击事件，事件触发后由监听器调用回调函数</span></span><br><span class="hljs-comment"><span class="language-javascript">            console.log(&#x27;按钮2被单击了&#x27;)</span></span><br><span class="hljs-comment"><span class="language-javascript">        &#125; */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//简写</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;button1&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按钮1被单击了&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;button2&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按钮2被单击了&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="捕捉键值"><a href="#捕捉键值" class="headerlink" title="捕捉键值"></a>捕捉键值</h4><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-po5ucklbavf10x"></i><span>html</span><div class="collapse show" id="collapse-po5ucklbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>).<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//事件发生后监听器会调用此函数并传入一个键盘事件对象，这个对象有keyCode属性</span></span><br><span class="language-javascript">            <span class="hljs-comment">//其中值为13代表回车，27代表ESC</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(x.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;捕捉到回车键，可以进行相关操作&quot;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="运算符void"><a href="#运算符void" class="headerlink" title="运算符void"></a>运算符void</h3><blockquote><p>1、和java一样Js当中也有很多运算符<br>算术运算符<br>逻辑运算符<br>关系运算符<br>位运算符<br>三目运算符<br>赋值运算符<br>…<br>2、这里主要学习一下JavaScript当中的void和typeof运算符。</p><ul><li><p>typeof 运算符:可以在程序运行阶段动态获取变量的数据类型，结果有6个字符串:<br>“ number” “undefined” “boolean” “string” “object” “function”</p></li><li><p>void 运算符：<br>语法格式： <strong>void(表达式)</strong><br>执行表达式但不返回任何结果</p></li></ul><p>使用场景的话像是设置超链接执行js代码但不跳转，超链接默认空字符串也就是本地地址，需要把地址去掉：</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-kal68elbavf10x"></i><span>html</span><div class="collapse show" id="collapse-kal68elbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> <span class="hljs-attr">onclick</span> = <span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">执行js代码</span>&#x27;)&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><blockquote><p>1、JS中的控制语句，基本和java相同<br>选择结构:</p><ul><li>if语句</li><li>switch</li></ul><p>语句循环结构:</p><ul><li>for while</li><li>do . .while</li></ul><p>转向语句:</p><ul><li>break</li><li>continue</li><li>return</li></ul><p>2.除此之外还有两个语句需要了解<br>for…in 和 with</p></blockquote><figure class="highlight javascript"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-73ifpelbavf10x"></i><span>JavaScript</span><div class="collapse show" id="collapse-73ifpelbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;script&gt;<br>    <span class="hljs-comment">//for..in语句</span><br>    <span class="hljs-comment">//在js中数组元素随意</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">false</span>,<span class="hljs-number">76</span>,<span class="hljs-number">3.14</span>]<br>    <span class="hljs-comment">//用for..in语句遍历数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> ddddd <span class="hljs-keyword">in</span> arr)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[ddddd]);<br>    &#125;;<br>    <span class="hljs-comment">//用for..in遍历对象</span><br>    <span class="hljs-title class_">Emp</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">id,name</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> suiyi <span class="hljs-keyword">in</span> e)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> suiyi);<span class="hljs-comment">//String</span><br>        <span class="hljs-comment">//这里不能用e.suiyi方式调用了，因为随意是字符串，所以用第二种方式对象名[&quot;属性名&quot;]</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e[suiyi])<span class="hljs-comment">//第一次输出1，第二次张三</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//whit语句</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;jack&quot;</span>)<br>    <span class="hljs-title function_">with</span>(<span class="hljs-params">x</span>)&#123;<span class="hljs-comment">//可直接调用了，有点鸡肋</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id +<span class="hljs-string">&quot;,&quot;</span> + name);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id +<span class="hljs-string">&quot;,&quot;</span> + name);<br>    &#125;<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></div></figure><h3 id="JS内置对象"><a href="#JS内置对象" class="headerlink" title="JS内置对象"></a>JS内置对象</h3><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><figure class="highlight javascript"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-eh9xpulbavf10x"></i><span>JavaScript</span><div class="collapse show" id="collapse-eh9xpulbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//创建数组的第一种方式</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">false</span>,<span class="hljs-number">76</span>,<span class="hljs-number">3.14</span>];<br><span class="hljs-comment">//创建数组的第二种方式</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<span class="hljs-comment">//创建长度为0的数组</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<span class="hljs-comment">//创建长度为3的数组</span><br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">53</span>,<span class="hljs-number">532</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//Array常用函数</span><br><span class="hljs-comment">//1.push 添加元素到末尾</span><br><span class="hljs-comment">//2.pop 取出末尾元素</span><br><span class="hljs-comment">//push和pop联合起来，实际是模拟了栈数据结构</span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>a.<span class="hljs-title function_">push</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> a)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[i])<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">length</span>);<span class="hljs-comment">//4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">pop</span>());<span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">length</span>);<span class="hljs-comment">//3</span><br><span class="hljs-comment">//3.reverse翻转数组</span><br><span class="hljs-comment">//4.join将每个元素以指定内容连接成一个字符串</span><br><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">65</span>,<span class="hljs-number">345</span>,<span class="hljs-number">5467</span>];<br>array.<span class="hljs-title function_">reverse</span>();<span class="hljs-comment">//翻转</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> array)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array[i])<br>&#125;<br><span class="hljs-keyword">var</span> str = array.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//5467-345-65-3-1</span><br></code></pre></td></tr></table></div></figure><h5 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h5><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-m0tzv2lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-m0tzv2lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">JS的内置对象:Date</span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//获取系统当前时间</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time)<span class="hljs-comment">//(中国标准时间)</span></span><br><span class="language-javascript"><span class="hljs-comment">//进行格式转换将所有时间信息都拿出来</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> year = time.<span class="hljs-title function_">getFullYear</span>();<span class="hljs-comment">//年</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> month = time.<span class="hljs-title function_">getMonth</span>(); <span class="hljs-comment">//月</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> day = time.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">//日</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> week = time.<span class="hljs-title function_">getDay</span>();<span class="hljs-comment">//星期几</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> hour = time.<span class="hljs-title function_">getHours</span>()<span class="hljs-comment">//时</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> minutes = time.<span class="hljs-title function_">getMinutes</span>()<span class="hljs-comment">//分</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> seconds = time.<span class="hljs-title function_">getSeconds</span>()<span class="hljs-comment">//秒</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> millis = time.<span class="hljs-title function_">getMilliseconds</span>()<span class="hljs-comment">//毫秒</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(year + <span class="hljs-string">&quot;年&quot;</span> +(month + <span class="hljs-number">1</span>) +<span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//获取时间戳</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> timeMillis = now.<span class="hljs-title function_">getTime</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(timeMillis);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//Object中有一个函数toLocaleString()，可以将时间转换成具有本体语言环境的日期格式</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> strTime = time.<span class="hljs-title function_">toLocaleString</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strTime);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json<p id = "json" ></p></h3><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-2iqjf0lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-2iqjf0lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">json存在的意义？实现不同语言的数据交互</span></span><br><span class="hljs-comment"><span class="language-javascript">概念：json是一种数据格式，本质是字符串</span></span><br><span class="hljs-comment"><span class="language-javascript">eval函数：可以将json字符串解释转成json对象</span></span><br><span class="hljs-comment"><span class="language-javascript">json对象：语法格式为(键:值,键:值...),其中值为任意内容(json对象,集合,字符串...)</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">java和javascript两个语言怎么交换数据?</span></span><br><span class="hljs-comment"><span class="language-javascript">获取：java的JDBC连接数据库查询数据，然后将数据拼接成json格式的字符串传给javascript，</span></span><br><span class="hljs-comment"><span class="language-javascript">转换：然后在javascript当中把json格式的字符串转换成json对象，</span></span><br><span class="hljs-comment"><span class="language-javascript">操作：可以从json对象中取数据了，这样就完成了数据的交换。</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">练习json+eval+innerHTML完成对节点的操作</span></span><br><span class="hljs-comment"><span class="language-javascript">想到的问题：</span></span><br><span class="hljs-comment"><span class="language-javascript">1.用console.log(typeof jsObj.total)这个语句查看了jsObj对象的total属性是number类型，</span></span><br><span class="hljs-comment"><span class="language-javascript">那么我设置记录数那块用的是innerText，后面是字符串拼接没啥问题，但我测试font.innerText = jsObj.total ;</span></span><br><span class="hljs-comment"><span class="language-javascript">这样也能通过，后面可以跟number类型吗？</span></span><br><span class="hljs-comment"><span class="language-javascript">好吧，查了一下 innerText后面的字符串即使是一个HTML代码,也不会当做HTML执行,只是看做普通文本.</span></span><br><span class="hljs-comment"><span class="language-javascript">2.json字符串的真实获取方式？</span></span><br><span class="hljs-comment"><span class="language-javascript">1)使用 Ajax 方式获取</span></span><br><span class="hljs-comment"><span class="language-javascript">2)使用 getJSON 方式获取</span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"><span class="hljs-comment">//三步走：  获取数据--&gt;数据转成json对象--&gt;操作对象</span></span><br><span class="language-javascript"><span class="hljs-comment">//1.接收json字符串</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> jsonStr = <span class="hljs-string">&quot;&#123;\&quot;total\&quot;:3,\&quot;student\&quot;:[&#123;\&quot;number\&quot;:1,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;hobby\&quot;:\&quot;唱\&quot;&#125;,&#123;\&quot;number\&quot;:2,\&quot;name\&quot;:\&quot;李五\&quot;,\&quot;hobby\&quot;:\&quot;跳\&quot;&#125;,&#123;\&quot;number\&quot;:3,\&quot;name\&quot;:\&quot;王四\&quot;,\&quot;hobby\&quot;:\&quot;rap\&quot;&#125;]&#125;&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-comment">//2.转换成json对象</span></span><br><span class="language-javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;jsObj =&#x27;</span> + jsonStr);<span class="hljs-comment">//第一次写的时候把jsonStr拼接到=后面了</span></span><br><span class="language-javascript"><span class="hljs-comment">//3.后面就是对数据的操作了</span></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//显示学生总记录数</span></span><br><span class="language-javascript"><span class="hljs-comment">//1.获取要交互数据的节点对象font</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> font = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;record&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//2.从获取的jsObj对象取出数据设置给font节点对象</span></span><br><span class="language-javascript">font.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;总记录:&quot;</span>+jsObj.<span class="hljs-property">total</span> +<span class="hljs-string">&quot;条&quot;</span> ;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//点击按钮让表格所有记录显示出来</span></span><br><span class="language-javascript"><span class="hljs-comment">//1.获取要交互数据的节点对象tbody</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;stuBody&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">//2.注册按钮单击事件</span></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;but&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//3.从获取的jsObj对象取出数据设置给tbody节点对象</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> htmlStr = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//设置一个拼接字符串</span></span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; jsObj.<span class="hljs-property">student</span>.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">        htmlStr += <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="language-javascript">        htmlStr += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + jsObj.<span class="hljs-property">student</span>[i].<span class="hljs-property">number</span> + <span class="hljs-string">&quot;&lt;td&gt;&quot;</span></span><br><span class="language-javascript">        htmlStr += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + jsObj.<span class="hljs-property">student</span>[i].<span class="hljs-property">name</span> + <span class="hljs-string">&quot;&lt;td&gt;&quot;</span></span><br><span class="language-javascript">        htmlStr += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + jsObj.<span class="hljs-property">student</span>[i].<span class="hljs-property">hobby</span> + <span class="hljs-string">&quot;&lt;td&gt;&quot;</span></span><br><span class="language-javascript">        htmlStr += <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//4.将拼接好的字符串htmlStr设置给tbody(innerHTML)</span></span><br><span class="language-javascript">tbody.<span class="hljs-property">innerHTML</span> = htmlStr;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;record&quot;</span>&gt;</span>总记录<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;显示所有学生记录&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">ali</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>爱好<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stuBody&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;tr&gt;</span><br><span class="hljs-comment">&lt;td&gt;1&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;张三&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;唱&lt;/td&gt;</span><br><span class="hljs-comment">&lt;/tr&gt;</span><br><span class="hljs-comment">&lt;tr&gt;</span><br><span class="hljs-comment">&lt;td&gt;2&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;李五&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;跳&lt;/td&gt;</span><br><span class="hljs-comment">&lt;/tr&gt;</span><br><span class="hljs-comment">&lt;tr&gt;</span><br><span class="hljs-comment">&lt;td&gt;3&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;王四&lt;/td&gt;</span><br><span class="hljs-comment">&lt;td&gt;rap&lt;/td&gt;</span><br><span class="hljs-comment">&lt;/tr&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><blockquote><p>在js中怎么创建正则表达式对象？<br>之前学过正则,这里主要掌握语法,包括两种方式，重点使用第一种</p><ol><li>var regExp &#x3D; &#x2F;正则表达式&#x2F;标记</li><li>内置RegExp类：var regExp &#x3D; new RegExp(“正则表达式”,”标记”)<br>其中标记是可选项：<br>g: 全局global<br>i: 忽略大小写 ignorecase<br>gi:全局扫描且忽略大小写</li></ol><p>js的正则表达式对象有一个很重要的函数：</p><ul><li>regExp.test(“用户输入的字符串”)  返回boolean值</li></ul></blockquote><h3 id="BOM和DOM"><a href="#BOM和DOM" class="headerlink" title="BOM和DOM"></a>BOM和DOM</h3><blockquote><p>区别和联系<br>从功能区分：<br>BOM可以通过对象方法完成对窗口的操作，DOM是对网页中元素的增删改<br>浏览器包含网页，BOM是包含DOM的<br>BOM顶级对象 window<br>DOM顶级对象 document<br>日常使用中window.document.getElementById()可以省略为document.getElementById()<br><img src="https://s1.328888.xyz/2022/09/25/VPnSm.png"></p></blockquote><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="js获取元素的三种方式"><a href="#js获取元素的三种方式" class="headerlink" title="js获取元素的三种方式"></a>js获取元素的三种方式</h4><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-icjp5hlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-icjp5hlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1.根据id获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> div1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div1)</span><br><span class="language-javascript">        <span class="hljs-comment">//2.根据name属性获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> checkBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;hobby&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(checkBox)</span><br><span class="language-javascript">        <span class="hljs-comment">//3.根据标签名获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(divs)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="InnerHTML和InnerText"><a href="#InnerHTML和InnerText" class="headerlink" title="InnerHTML和InnerText"></a>InnerHTML和InnerText</h4><blockquote><p>InnerHTML用来设置或获取HTML中元素的内容。<br>InnerText用来设置或获取HTML中元素的文本。</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1gqbsrlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-1gqbsrlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#div1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="language-css">        <span class="hljs-attribute">border</span> : <span class="hljs-number">1px</span>  solid  red;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//给按钮注册鼠标单击事件，监听器检测到后调用该函数并传参（单击事件对象）</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;but&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> tx = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(tx.<span class="hljs-property">innerText</span> == <span class="hljs-string">&#x27;&#x27;</span>)&#123;</span><br><span class="language-javascript">                tx.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;font color = &#x27;red&#x27;&gt;不能为空&lt;/font&gt;&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but&quot;</span>&gt;</span><br></code></pre></td></tr></table></div></figure>    </div></div><h4 id="复选框的全选和取消"><a href="#复选框的全选和取消" class="headerlink" title="复选框的全选和取消"></a>复选框的全选和取消</h4><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-7vh4pqlbavf10x"></i><span>html</span><div class="collapse show" id="collapse-7vh4pqlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//1.全选框对复选框的影响</span></span><br><span class="language-javascript"><span class="hljs-comment">//根据id获取全选框元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> selAll = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;all&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//通过name属性拿到所有复选框对象集合</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> hobbies = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//给全选框注册单击事件，监听器，回调函数</span></span><br><span class="language-javascript">selAll.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; hobbies.<span class="hljs-property">length</span>; i++)&#123;<span class="hljs-comment">//遍历复选框对象集合</span></span><br><span class="language-javascript">        <span class="hljs-comment">//即点击全选后所有复选框状态和全选框保持一致</span></span><br><span class="language-javascript">        hobbies[i].<span class="hljs-property">checked</span> = selAll.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hobbies.<span class="hljs-property">length</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//2.复选框对全选框的影响</span></span><br><span class="language-javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;hobbies.<span class="hljs-property">length</span>;i++)&#123;<span class="hljs-comment">//遍历复选框对象集合</span></span><br><span class="language-javascript">    <span class="hljs-comment">////给每一个复选框注册单击事件</span></span><br><span class="language-javascript">    hobbies[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//即每个复选框被单击后都要检查其它复选框是否勾选上了并用一个变量记录下来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> checkedCount = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">之前有关checkedCount变量的疑问</span></span><br><span class="hljs-comment"><span class="language-javascript">//1.这个值是共享的吗？2.之后怎么重置为0的？</span></span><br><span class="hljs-comment"><span class="language-javascript">有这个疑问根本在于没理解事件的机制。</span></span><br><span class="hljs-comment"><span class="language-javascript">首先肯定不是共享的，每个复选框的点击事件发生后就指定值为0，这个值用来做记录的，即开始遍历复选框对象集合，通过查看其它复选框的状态并记录，来决定是否要勾上全选框</span></span><br><span class="hljs-comment"><span class="language-javascript">也就是说，三个复选框各自都注册了自己的单击事件，触发事件后由监听器调用各自对应的回调函数</span></span><br><span class="hljs-comment"><span class="language-javascript">也就是说各个复选框的checkedCount值压根没啥关系，且重新调用后自然是给定的值0</span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"><span class="hljs-comment">//再次遍复选框对象集合？用来在此复选框被点击同时确认其它复选框的状态且记录下来</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;hobbies.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(hobbies[i].<span class="hljs-property">checked</span>)&#123;</span><br><span class="language-javascript">            checkedCount++;&#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"><span class="hljs-comment">//检查完其它复选框状态后，决定全选框的状态</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(checkedCount == hobbies.<span class="hljs-property">length</span>)&#123;</span><br><span class="language-javascript">            selAll.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">            selAll.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all&quot;</span> &gt;</span>全选<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> /&gt;</span>唱<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;</span>跳<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>/&gt;</span>rap<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></div></figure>    </div></div><h4 id="获取文本框和下拉列表的值"><a href="#获取文本框和下拉列表的值" class="headerlink" title="获取文本框和下拉列表的值"></a>获取文本框和下拉列表的值</h4><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-u1tn42lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-u1tn42lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html">文本框的值<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;but&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text1&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(t.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取文本框信息&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>下拉列表的值<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;pr&#x27;</span>).<span class="hljs-property">onchange</span>  = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//this代表change事件发生的节点对象</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;province&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pr&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--选择下拉列表--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;001&quot;</span>&gt;</span>山东<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;002&quot;</span>&gt;</span>山西<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;003&quot;</span>&gt;</span>湖南<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;004&quot;</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h4 id="拼接html的方式，设置table的tbody"><a href="#拼接html的方式，设置table的tbody" class="headerlink" title="拼接html的方式，设置table的tbody"></a>拼接html的方式，设置table的tbody</h4><blockquote><p>详情查看 <a href="#json">点击跳转</a></p></blockquote><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-jsopn1lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-jsopn1lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">        表单验证</span></span><br><span class="hljs-comment"><span class="language-javascript">        </span></span><br><span class="hljs-comment"><span class="language-javascript">    (1)用户名不能为空</span></span><br><span class="hljs-comment"><span class="language-javascript">    (2)用户名必须在6-14位之间</span></span><br><span class="hljs-comment"><span class="language-javascript">    (3)用户名只能有数字和字母组成，不能含有其它符号（正则表达式)</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    (4)密码和确认密码一致</span></span><br><span class="hljs-comment"><span class="language-javascript">    (5)统一失去焦点验证</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    (6)错误提示信息统一在span标签中提示，并且要求字体12号，红色。</span></span><br><span class="hljs-comment"><span class="language-javascript">    (7)文本框再次获得焦点后，清空错误提示信息</span></span><br><span class="hljs-comment"><span class="language-javascript">    (8)最终表单中所有项均合法方可提交</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    根据要求可知：</span></span><br><span class="hljs-comment"><span class="language-javascript">        1.blur失去焦点验证</span></span><br><span class="hljs-comment"><span class="language-javascript">        2.focus获得焦点清除提示信息</span></span><br><span class="hljs-comment"><span class="language-javascript">        3.表单提交验证</span></span><br><span class="hljs-comment"><span class="language-javascript">        注意这里没考虑全空的情况,那样得封装验证方法</span></span><br><span class="hljs-comment"><span class="language-javascript">    会用到的函数  </span></span><br><span class="hljs-comment"><span class="language-javascript">        userNameVal.trim() 去除字符串前后空格</span></span><br><span class="hljs-comment"><span class="language-javascript">        form节点.submit(); 提交表单</span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> userName = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userName&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//1.失去焦点开始验证</span></span><br><span class="language-javascript">    <span class="hljs-comment">//用户名验证</span></span><br><span class="language-javascript">    userName.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//获取用户名值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> userNameVal = userName.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//去除前后空串</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> userNameStr = userNameVal.<span class="hljs-title function_">trim</span>()</span><br><span class="language-javascript">        <span class="hljs-comment">//验证格式，过关斩将</span></span><br><span class="language-javascript">        regExp = <span class="hljs-regexp">/^[a-z0-9]&#123;4,16&#125;$/</span>;<span class="hljs-comment">//这个同时判断了长度和字母数字,但还是按需求吧</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(userNameStr.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//为空判断</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userNameClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;不能为空&quot;</span></span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!(userNameStr.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">6</span> &amp;&amp; userNameStr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">16</span>))&#123;<span class="hljs-comment">//长度判断</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userNameClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;用户名长度为6~16&quot;</span></span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!(regExp.<span class="hljs-title function_">test</span>(userNameStr)))&#123;<span class="hljs-comment">//符号判断，正则</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userNameClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;用户名只能是字母和数字&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//密码验证</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord&#x27;</span>);</span><br><span class="language-javascript">    password.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> passStr = password.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(passStr.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;不能为空&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//重复密码验证</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> password1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord1&#x27;</span>);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    password1.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> passStr1 = password1.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(passStr1 != password.<span class="hljs-property">value</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify1&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;和原密码不一致&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//2.获取焦点清空之前的错误信息</span></span><br><span class="language-javascript">    userName.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//清空用户名提示</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userNameClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot; &quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    password.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//清空密码提示</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot; &quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    password1.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//清空重复密码提示</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify1&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot; &quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//3.表单提交验证</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//这里的验证没有重写一遍，那样的话最好把验证封装成一个方法,这里换种思路</span></span><br><span class="language-javascript">        <span class="hljs-comment">//户鼠标离开焦点的时候会进行验证，</span></span><br><span class="language-javascript">        <span class="hljs-comment">//那么只需要自动触发blur事件,且span提示信息为空即可。</span></span><br><span class="language-javascript">        <span class="hljs-comment">//用户名验证</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userName&#x27;</span>).<span class="hljs-property">focus</span>;<span class="hljs-comment">//先获取焦点才能失去焦点</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userName&#x27;</span>).<span class="hljs-property">blur</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//密码验证</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord&#x27;</span>).<span class="hljs-property">focus</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord&#x27;</span>).<span class="hljs-property">blur</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//重复密码验证</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord1&#x27;</span>).<span class="hljs-property">focus</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;passWord1&#x27;</span>).<span class="hljs-property">blur</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userNameClassify&#x27;</span>).<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;用户名有误&#x27;</span>);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify&#x27;</span>).<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;密码有误&#x27;</span>);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;userPasswordClassify1&#x27;</span>).<span class="hljs-property">value</span> != <span class="hljs-literal">null</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;重复密码有误&#x27;</span>);</span><br><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> formObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userForm&quot;</span>);</span><br><span class="language-javascript">            formObj.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;提交成功&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;   </span><br><span class="language-javascript">&#125;   </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userForm&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户名--&gt;</span><br>用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNameClassify&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!--密码--&gt;</span><br>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;passWord&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passWord&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userPasswordClassify&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!--确认密码--&gt;</span><br>确认密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;passWord1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userPasswordClassify1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!--提交按钮--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure>    </div></div><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="开启和关闭窗口"><a href="#开启和关闭窗口" class="headerlink" title="开启和关闭窗口"></a>开启和关闭窗口</h3><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-rkzqeplbavf10x"></i><span>html</span><div class="collapse show" id="collapse-rkzqeplbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        window.open(url,target) </span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--默认新窗口打开--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认新窗口打开百度&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://www.baidu.com&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--_block新窗口打开--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;新窗口打开百度&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_block&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--_self本页窗口打开--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;本页窗口打开百度&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_self&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--_parent父窗口打开--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;父窗口打开百度&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_parent&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--_top顶级窗口窗口打开--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;顶级窗口打开百度&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://www.baidu.com&#x27;,&#x27;_top&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在新窗口打开本地文件窗口--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;localFile&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;2-关闭窗口.html&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>点击关闭窗口<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.close()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="alert和confirm"><a href="#alert和confirm" class="headerlink" title="alert和confirm"></a>alert和confirm</h3><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-bnh1z6lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-bnh1z6lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params"></span>)&#123;alert</span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;确认删除？&quot;</span>))&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;正在删除中&#x27;</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;del()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>&lt;/html<br></code></pre></td></tr></table></div></figure><h3 id="子级窗口设置为顶级窗口"><a href="#子级窗口设置为顶级窗口" class="headerlink" title="子级窗口设置为顶级窗口"></a>子级窗口设置为顶级窗口</h3><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3bnw0llbavf10x"></i><span>html</span><div class="collapse show" id="collapse-3bnw0llbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    这是顶级窗口<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;2.2子级窗口.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    这是子级窗口<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">setTop</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">top</span> != <span class="hljs-variable language_">window</span>.<span class="hljs-property">self</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">window</span>.<span class="hljs-property">top</span>.<span class="hljs-property">location</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">self</span>.<span class="hljs-property">location</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;如果当前窗口不是顶级窗口的话，将当前窗口设置为顶级窗口&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;setTop()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h3><blockquote><p>第一页</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-4tepyglbavf10x"></i><span>html</span><div class="collapse show" id="collapse-4tepyglbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;4.2-历史记录.html&quot;</span>&gt;</span>测试链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;刷新&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.location.reload()&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;前进&#x27;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.go(1)&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;前进&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.forward()&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><blockquote><p>第二页</p></blockquote><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ry5ox4lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-ry5ox4lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;刷新&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.location.reload()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;后退&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.go(-1)&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;后退&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.back()&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;后退刷新&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.go(-1);window.location.reload()&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><h3 id="客户端发送请求的常见五种方式"><a href="#客户端发送请求的常见五种方式" class="headerlink" title="客户端发送请求的常见五种方式"></a>客户端发送请求的常见五种方式</h3><figure class="highlight html"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-kez688lbavf10x"></i><span>html</span><div class="collapse show" id="collapse-kez688lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    &lt;! --</span></span><br><span class="hljs-comment"><span class="language-javascript">    跳转页面可以通过多种方式:(这些都是发送请求!!! ! )</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    第一种方式:直接在浏览器地址栏上写 URL(重点)(get请求)</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    第二种方式:可以点击超链接(重点)(get请求)</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    第三种方式:提交form表单(重点)(get或post请求)</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    第四种方式:window.open(url,target) (了解)</span></span><br><span class="hljs-comment"><span class="language-javascript">    </span></span><br><span class="hljs-comment"><span class="language-javascript">    第五种方式:js代码（重点）:</span></span><br><span class="hljs-comment"><span class="language-javascript">                            window .location.href</span></span><br><span class="hljs-comment"><span class="language-javascript">                            window.location</span></span><br><span class="hljs-comment"><span class="language-javascript">                            document.location.hre</span></span><br><span class="hljs-comment"><span class="language-javascript">                            fdocument.location</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">Script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;跳转&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;go()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></div></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多用户即时通信系统</title>
      <link href="/2022/09/03/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/09/03/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么选择这个项目"><a href="#为什么选择这个项目" class="headerlink" title="为什么选择这个项目"></a>为什么选择这个项目</h4><blockquote><p>有意思且涉及到各个方面的技术，还可以巩固基础学习新知识<br>知识点包括：</p><ol><li>项目框架设计</li><li>java面向对象编程</li><li>网络编程</li><li>多线程</li><li>IO流</li><li>Mysql&#x2F;（先用集合充当内存数据库）</li></ol></blockquote><h3 id="多用户通信系统思路（第一版）和代码实现"><a href="#多用户通信系统思路（第一版）和代码实现" class="headerlink" title="多用户通信系统思路（第一版）和代码实现"></a>多用户通信系统思路（第一版）和代码实现</h3><blockquote><p><strong>通信结构分为客户端和服务端</strong></p><blockquote><p><strong>服务端</strong>验证客户端账号信息和数据传输<br><strong>客户端</strong>作为用户可以通过服务器给其它用户发送消息和各类文件<br><strong>数据的传输</strong>主要采用对象流的方式，包括用户对象和消息数据包<br><img src="https://s1.328888.xyz/2022/09/06/50SQy.png"></p></blockquote></blockquote><blockquote><p>一、 实现第一个功能，<strong>用户登录</strong></p></blockquote><p> <strong>客户端，根据用户界面提前创建用户对象和消息数据包，都作为对象数据流来传输。</strong></p><p>1）用户这个类包括用户名&#x2F;id,用户密码</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-53b7q8lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-53b7q8lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//用户名/id</span><br>    String passWord;<span class="hljs-comment">//密码</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassWord</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassWord</span><span class="hljs-params">(String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>2）数据包这个类会包含数据类型，数据内容，发送者和接收者，最后还有发送时间</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ago0k1lbavf10x"></i><span>JAVA</span><div class="collapse show" id="collapse-ago0k1lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String content;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String dataType;<span class="hljs-comment">//数据类型</span><br>    <span class="hljs-keyword">private</span> String sender;<span class="hljs-comment">//发送者</span><br>    <span class="hljs-keyword">private</span> String receiver;<span class="hljs-comment">//接收者</span><br>    <span class="hljs-keyword">private</span> String data;<span class="hljs-comment">//日期，感觉可以用第三代日期类，后面再改</span><br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDataType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dataType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataType</span><span class="hljs-params">(String dataType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dataType = dataType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender</span><span class="hljs-params">(String sender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender = sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver</span><span class="hljs-params">(String receiver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver = receiver;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>3）为了管理数据包的数据类型，再创建个接口来管理</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-qjtjszlbavf10x"></i><span>JAVA</span><div class="collapse show" id="collapse-qjtjszlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> az.qqServer;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//在接口中定义常量，表示不同的消息类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAIL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><blockquote><p>4)用户登录界面制作，先把逻辑打通再细写代码</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p><img src="https://s1.328888.xyz/2022/09/05/1x4fK.png"><br>进入二级菜单<br><img src="https://s1.328888.xyz/2022/09/05/1xi5J.png"></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-f2p027lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-f2p027lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端登入界面</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">qqView</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">qqView</span>().mainView();<span class="hljs-comment">//测试mainView方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//菜单控制循环</span><br>    <span class="hljs-keyword">private</span> String key;<span class="hljs-comment">//用户输入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainView</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;==========欢迎登录网络通信系统=========&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t1 登录系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t9 退出系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的选择:&quot;</span>);<br>            key = Utility.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//根据用户输入来执行操作</span><br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入你的用户名:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;请输入你的密码:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    <span class="hljs-comment">//这里需要到服务端验证是否合法，代码后续补，先通逻辑</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//假如验证合法，则进入二级菜单</span><br>                        System.out.println(<span class="hljs-string">&quot;========欢迎用户&quot;</span> + userId + <span class="hljs-string">&quot;===========&quot;</span>);<br>                        <span class="hljs-keyword">while</span> (loop) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;==========网络通信系统二级菜单（&quot;</span> + userId + <span class="hljs-string">&quot;）========&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t1 显示在线用户列表&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t2 群发消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t3 私发消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t4 发送文件&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t9 退出系统&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;请输入你的选择:&quot;</span>);<br>                            key = Utility.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (key) &#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;显示在线用户列表&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私发消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;发送文件&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;退出系统&quot;</span>);<br>                                    loop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">//验证不通过</span><br>                        System.out.println(<span class="hljs-string">&quot;========登录失败=======&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;退出系统&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>5）根据用户输入的账密进行验证，客户端创建一个用户服务类，用来验证账密并建立连接</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-gr4e4jlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-gr4e4jlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><span class="hljs-keyword">import</span> azqq.qqcommon.MessageType;<br><span class="hljs-keyword">import</span> azqq.qqcommon.User;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  这个类用来检验用户账密是否正确，并开启一个线程（持有socket）。</span><br><span class="hljs-comment"> *  根据用户输入的账号密码设置user对象，发给服务端进行验证，服务端会返回一个Message对象</span><br><span class="hljs-comment"> *  根据Message对象返回的信息判断是否登录成功，登录成功则创建一个线程持有socket和服务端保持通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br>    <span class="hljs-comment">//其它地方有可能用到socket和u，所以做成属性</span><br>    <span class="hljs-keyword">private</span>  Socket socket;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br><br>    <span class="hljs-comment">//根据用户输入的id和密码确认是否合法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userId , String passWord)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始发送对象进行检验&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//向服务器发送user对象，因此需要创建设置一个</span><br>        u.setName(userId);<br>        u.setPassWord(passWord);<br>        <span class="hljs-comment">//1.通过socket向服务器发送user对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9999</span>);<br><span class="hljs-comment">//            outputStream = socket.getOutputStream();下面简写</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            oos.writeObject(u);<br><span class="hljs-comment">//            InputStream inputStream = socket.getInputStream();</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-comment">//2.接收服务器返回的信息</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>            <span class="hljs-comment">//3.根据返回数据判断是否登录成功</span><br>            <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_LOGIN_SUCCEED))&#123;<br>                <span class="hljs-comment">//如果登录成功，需要有一个线程持socket来不停的验证和传输数据，因此新建一个线程类ClientConnectServerThread</span><br>                <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">ccst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>(socket);<span class="hljs-comment">//将socket传过去</span><br>                <span class="hljs-comment">//启动线程</span><br>                ccst.start();<br>                <span class="hljs-comment">//为了后面线程方便管理，将这里的线程加入集合</span><br>                ManageClientConnectServiceThread.addClientConnectServerThread(userId,ccst);<br>                b = <span class="hljs-literal">true</span>;<br>                System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>                socket.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>6）新建的线程类</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-889jw0lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-889jw0lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  这个线程类持有socket用来保持和服务端的通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Socket socket ;<br>    <span class="hljs-comment">//通过构造器来获得socket，金典</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-comment">//此线程监视用户信息和数据库是否保持一致</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;接收消息&quot;</span>);<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(inputStream);<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span>(Message) ois.readObject();<br>                <span class="hljs-comment">//后续对message进行处理</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//其它类会需要socket</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>7)用hashMap管理线程</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-b42dl8lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-b42dl8lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  线程池</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageClientConnectServiceThread</span> &#123;<br>    <span class="hljs-comment">//先用集合hashMap来管理，k为用户名，v为线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,ClientConnectServerThread&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//添加某一个线程进来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClientConnectServerThread</span><span class="hljs-params">(String userId,ClientConnectServerThread ccst )</span>&#123;<br>        hashMap.put(userId,ccst);<br>    &#125;<br>    <span class="hljs-comment">//根据id返回线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientConnectServerThread <span class="hljs-title function_">getClientConnectServerThread</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> hashMap.get(userId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure><p><strong>服务端，同理需要有用户对象和消息类，客户端负责验证客户端账户信息和接收数据</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <blockquote><p>注意服务端对于序列化的对象路径要和客户端保存一致，不然无法识别<br><img src="https://s1.328888.xyz/2022/09/06/54Ytn.png"></p></blockquote><blockquote><p>1.服务端得要接收客户端发送过来的user对象，并根据数据库来检验账密是否正确，正确就开启线程和客户端进行通信</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-wx9b91lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-wx9b91lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><span class="hljs-keyword">import</span> azqq.qqcommon.MessageType;<br><span class="hljs-keyword">import</span> azqq.qqcommon.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 该服务类持续监听9999端口，如果有客服端进行连接则根据客户端发送的user对象来跟数据库比对，如果正确就建立连接</span><br><span class="hljs-comment"> 创建线程进行数据交互，中途如果又有其它客户端加入连接，则同理user没问题就又增加一个线程进行通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">QQServer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>            System.out.println(<span class="hljs-string">&quot;客户端等待连接...&quot;</span>);<br>            <span class="hljs-comment">//当和某个客户端连接后会持续监听，且持续监听是否有其它连接，因此用while</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<span class="hljs-comment">//如果没有客户端连接就会阻塞在这里</span><br>                <span class="hljs-comment">//得到和socket关联的输入输出流</span><br>                System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ois.readObject();<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                System.out.println(<span class="hljs-string">&quot;开始验证&quot;</span>);<br>                <span class="hljs-comment">//验证，如果账号密码正确，则可以登录，这里先死后活，用100，123465作为一个合法用户，后续改</span><br>                <span class="hljs-keyword">if</span> (user.getName().equals(<span class="hljs-string">&quot;100&quot;</span>) &amp;&amp; user.getPassWord().equals(<span class="hljs-string">&quot;123456&quot;</span>)) &#123;<span class="hljs-comment">//根据user的账号密码是否登录成功，先通逻辑</span><br>                    <span class="hljs-comment">//登录成功返回Massege信息</span><br>                    message.setDataType(MessageType.MESSAGE_LOGIN_SUCCEED);<br><span class="hljs-comment">//                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());//考虑作用域放if外面去</span><br>                    <span class="hljs-comment">//发送message对象</span><br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//同理确认可以登录后创建一个线程和客户端保持通信</span><br>                    <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerConnectClientThread</span>(socket, user.getName());<br>                    <span class="hljs-comment">//启动通信的线程，并放入集合管理</span><br>                    serverConnectClientThread.start();<br>                    System.out.println(<span class="hljs-string">&quot;踩踩踩踩踩踩&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败返回Message信息</span><br>                    System.out.println(<span class="hljs-string">&quot;测试语句，&quot;</span>+ user.getName() +<span class="hljs-string">&quot;登录失败&quot;</span> + user.getPassWord());<br>                    message.setDataType(MessageType.MESSAGE_LOGIN_FAIL);<br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//关闭socket</span><br>                    socket.close();<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//如果服务器退出了while则表示断开了连接，关闭serverSocket</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                serverSocket.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>2.线程持有socket</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-lwy52slbavf10x"></i><span>java</span><div class="collapse show" id="collapse-lwy52slbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *      该线程类用来和客户端保持通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> String userId;<span class="hljs-comment">//用来确认是哪个用户连接的客户端</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">(Socket socket, String userId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-comment">//这里由于外层判断用户确认连接后调用此线程来接收用户发送的消息，所以转Message</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>                <span class="hljs-comment">//后续对message进行处理</span><br><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>3.线程太多加入管理</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-0b14tclbavf10x"></i><span>java</span><div class="collapse show" id="collapse-0b14tclbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  线程池</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageClientConnectServiceThread</span> &#123;<br>    <span class="hljs-comment">//先用集合hashMap来管理，k为用户名，v为线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,ServerConnectClientThread&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//添加某一个线程进来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServerConnectClientThread</span><span class="hljs-params">(String userId,ServerConnectClientThread scct )</span>&#123;<br>        hashMap.put(userId,scct);<br>    &#125;<br>    <span class="hljs-comment">//根据id返回线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerConnectClientThread <span class="hljs-title function_">getServerConnectClientThread</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> hashMap.get(userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>以上双方的通信基本打通，验证一下没问题<br><img src="https://s1.328888.xyz/2022/09/06/5TosR.png"></p></blockquote><blockquote><p>完善一下客户端用户数据，先用集合保存在服务里</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-h5yqvilbavf10x"></i><span>java</span><div class="collapse show" id="collapse-h5yqvilbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//考虑多线程用ConcurrentHashMap，线程同步</span><br><span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String,User&gt; validUsers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<span class="hljs-comment">//静态代码块，先代替数据库存放用户数据</span><br>    validUsers.put(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;我是账户名&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;我是账户名&quot;</span>,<span class="hljs-string">&quot;我是对应密码&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;老亚萨西了&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;老亚萨西了&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>二、实现拉取在线用户功能</strong><br>1.增加数据类型（两端都要）</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-nt6m4slbavf10x"></i><span>java</span><div class="collapse show" id="collapse-nt6m4slbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//在接口中定义常量，表示不同的消息类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAIL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<span class="hljs-comment">//登录失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_COMM_MES</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;3&quot;</span>;<span class="hljs-comment">//普通信息包</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_GET_ONLINE_FRIEND</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;4&quot;</span>;<span class="hljs-comment">//要求返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_RET_ONLINE_FRIEND</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;5&quot;</span>;<span class="hljs-comment">//返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_CLIENT_EXIT</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;6&quot;</span>;<span class="hljs-comment">//客户端请求退出</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>客户端发送拉取在线用户请求并接收</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-xl0ppflbavf10x"></i><span>java</span><div class="collapse show" id="collapse-xl0ppflbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">根据用户输入<span class="hljs-number">1</span>拉取在线列表，创建一个方法在客户端的服务里<br><span class="hljs-comment">//请求服务端获取在线好友列表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">olineFriendList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        <span class="hljs-comment">//设置数据类型</span><br>        message.setDataType(MessageType.MESSAGE_GET_ONLINE_FRIEND);<br>        <span class="hljs-comment">//设置发送者</span><br>        message.setSender(u.getName());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取相关用户线程对应的socket，可以通过线程集合来获取</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">userSocket</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.<br>                    getClientConnectServerThread(u.getName()).getSocket();<br>            <span class="hljs-comment">//根据socket得到输出流</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(userSocket.getOutputStream());<br>            <span class="hljs-comment">//发送请求给服务端</span><br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>这段代码在用户线程的run方法里，一直读取服务端数据<br>    <span class="hljs-comment">//判断message数据类型，进行相应处理</span><br>                <span class="hljs-keyword">if</span> (message.getDataType().equals(MessageType.MESSAGE_RET_ONLINE_FRIEND)) &#123;<br>                    <span class="hljs-comment">//默认好友在线列表以字符串形式且以“”隔开</span><br>                    String[] onlineUsers = message.getContent().split(<span class="hljs-string">&quot; &quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;\n=========当前在线用户列表============&quot;</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; onlineUsers.length; i++) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;用户:&quot;</span> + onlineUsers[i]);<br>                    &#125;<br><br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p>客户端接收请求并返回在线用户列表数据</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-3bydsylbavf10x"></i><span>java</span><div class="collapse show" id="collapse-3bydsylbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">服务端接收并返回数据<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;服务端和客户端&quot;</span> + userId +<span class="hljs-string">&quot;保持通信，读取数据&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-comment">//这里由于外层判断用户确认连接后调用此线程来接收用户发送的消息，所以转Message</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>                <span class="hljs-comment">//根据接收的数据类型进行相应业务处理</span><br>                <span class="hljs-comment">//如果数据类型为获取在线好友列表请求</span><br>                <span class="hljs-keyword">if</span> (message.getDataType().equals(MessageType.MESSAGE_GET_ONLINE_FRIEND)) &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        好友列表格式为 100 200 老亚萨西了</span><br><span class="hljs-comment">                        考虑到线程池有所有在运行的用户，所以在那里编写方法获取userId</span><br><span class="hljs-comment">                    */</span><br>                    System.out.println(message.getSender() + <span class="hljs-string">&quot;要在线用户列表&quot;</span>);<br>                    <span class="hljs-comment">//获取要发送的在线用户列表</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">onlineUserList</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getUserId();<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">message2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                    message2.setDataType(MessageType.MESSAGE_RET_ONLINE_FRIEND);<br>                    message2.setContent(onlineUserList);<br>                    <span class="hljs-comment">//message发送者getSender是谁，接收者就设置成谁</span><br>                    message2.setReceiver(message.getSender());<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message2);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    服务端接收数据后的还未返回时对数据的处理过程<br>    <span class="hljs-comment">//返回在线用户id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">onlineUserList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//从hashmap中取，遍历</span><br>        <span class="hljs-comment">//1.取迭代器</span><br>        Iterator&lt;String&gt; iterator = hashMap.keySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            onlineUserList += iterator.next() + <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        System.out.println(onlineUserList);<br>        <span class="hljs-keyword">return</span> onlineUserList;<br><br>    &#125;<br></code></pre></td></tr></table></div></figure><p>功能实现截图<br><img src="https://s1.328888.xyz/2022/09/07/5Umby.png"></p>    </div></div><p><strong>无异常退出</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p><img src="https://s1.328888.xyz/2022/09/07/5eLz0.png"></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-lrnw6jlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-lrnw6jlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">用户选择<span class="hljs-number">9</span>退出时调用此方法<br> <span class="hljs-comment">//编写方法给服务端发送message通知关闭线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeThread</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(u.getName());<br>        <span class="hljs-comment">//消息数据类型为客户端申请退出</span><br>        message.setDataType(MessageType.MESSAGE_CLIENT_EXIT);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>            oos.writeObject(message);<span class="hljs-comment">//发送数据给服务端</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>         System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <br><br>    服务端对应线程处<br>      <span class="hljs-comment">//如果数据类型为请求关闭类型</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_CLIENT_EXIT))&#123;<br>                    <span class="hljs-comment">//从线程池里移除数据包里面对应的发送者</span><br>                    ManageClientConnectServiceThread.removeServerConnectClientThread(message.getSender());<br>                    socket.close();<span class="hljs-comment">//关闭连接</span><br>                    System.out.println(message.getSender() + <span class="hljs-string">&quot;下线了&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>私聊功能</strong></p><blockquote><p>打包——转发——拆包</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-n0br0wlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-n0br0wlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">打包<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用于客户端私聊/群聊</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageClientService</span> &#123;<br>    <span class="hljs-comment">//私发消息的功能</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sendId 发送者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> receiver 接收者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 发送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateChat</span><span class="hljs-params">(String sendId, String receiver, String content)</span>&#123;<br>        <span class="hljs-comment">//设置数据基本属性，发送者接收者，数据类型，发送内容</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(sendId);<br>        message.setDataType(MessageType.MESSAGE_COMM_MES);<br>        message.setContent(content);<br>        message.setReceiver(receiver);<br>        <span class="hljs-comment">//日期设置</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd E hh:mm:ss a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        message.setData(strDate);<br>        <span class="hljs-comment">//给客户端自己提示一句话</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sendId + <span class="hljs-string">&quot;对&quot;</span> + receiver + <span class="hljs-string">&quot;说:&quot;</span> + content);<br>        <span class="hljs-comment">//将数据发送到服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectServiceThread.getClientConnectServerThread(sendId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br>转发<br><span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_COMM_MES))&#123;<br>                    <span class="hljs-comment">//从数据包里面提取发送者想要私聊的对象</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br>                    <span class="hljs-comment">//根据接收者的userId来获取对应的线程socket</span><br>                    <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getServerConnectClientThread(receiver).socket;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//后面考虑加入离线的情况</span><br>                &#125;<br>拆包<br><span class="hljs-comment">//如果数据类型为普通信息包</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_COMM_MES))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> message.getContent();<br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender+ <span class="hljs-string">&quot;对&quot;</span> + message.getReceiver() + <span class="hljs-string">&quot;说：&quot;</span> + content + <span class="hljs-string">&quot;\t&quot;</span> + message.getData());<br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>群聊功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-y2yl8plbavf10x"></i><span>java</span><div class="collapse show" id="collapse-y2yl8plbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">用户选择<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;请输入群发消息内容&quot;</span>);<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">groupContent</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                                    mcs.groupChat(userId, groupContent);<br>                                    <span class="hljs-keyword">break</span>;<br><br>客户端发送数据包<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sendId 发送者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 发送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupChat</span><span class="hljs-params">(String sendId, String content)</span>&#123;<br>        <span class="hljs-comment">//设置数据基本属性，发送者接收者，数据类型，发送内容</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(sendId);<br>        message.setDataType(MessageType.MESSAGE_GROUP_MES);<br>        message.setContent(content);<br>        <span class="hljs-comment">//日期设置</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd E hh:mm:ss a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        message.setData(strDate);<br>        <span class="hljs-comment">//给客户端自己提示一句话</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sendId + <span class="hljs-string">&quot;对所有人说:&quot;</span> + content);<br>        <span class="hljs-comment">//将数据发送到服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectServiceThread.getClientConnectServerThread(sendId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> 服务端处理<br><span class="hljs-comment">//如果数据类型为群聊</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_GROUP_MES))&#123;<br>                        ManageClientConnectServiceThread.groupChat(userId,message);<br>                    System.out.println(userId + <span class="hljs-string">&quot;给所有人发了消息&quot;</span>);<br>                &#125;<br> <span class="hljs-comment">//群聊消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupChat</span><span class="hljs-params">(String userId , Message message)</span>&#123;<br>        Iterator&lt;ServerConnectClientThread&gt; iterator = hashMap.values().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span>( next != hashMap.get(userId))&#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> next.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>客户端再接收<br><span class="hljs-comment">//如果数据类型为群聊包</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_GROUP_MES))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> message.getContent();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender+ <span class="hljs-string">&quot;对所有人说：&quot;</span> + content + <span class="hljs-string">&quot;\t&quot;</span> + content);<br>                &#125;            <br><br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>发文件功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ulcs6slbavf10x"></i><span>java</span><div class="collapse show" id="collapse-ulcs6slbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java">客户端发送文件<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件给哪个用户:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">fileReceiver</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件的路径:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sourcePath</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件至对方的的路径:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">targetPath</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>fileClientService.sendFile(userId,sourcePath,fileReceiver,targetPath);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileClientService</span> &#123;<br><span class="hljs-comment">//给其它客户端传送文件</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> sender    发送者</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> sourcePath  发送路径</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> receiver      接收者</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> targetPath    接收路径</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(String sender,String sourcePath,String receiver,String targetPath)</span>&#123;<br><span class="hljs-comment">//数据包初始化发送者接收者，发送路径，接收路径，数据包类型</span><br><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>message.setSender(sender);<br>message.setReceiver(receiver);<br>message.setSourcePath(sourcePath);<br>message.setTargetPath(targetPath);<br>message.setDataType(MessageType.MESSAGE_FILE_MES);<br><span class="hljs-comment">//根据指定路径，将输入流转成字节数组，打包进message</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(sourcePath);<br><span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(inputStream);<br>message.setBytes(bytes);<br><span class="hljs-comment">//根据发送者id--&gt;线程池--&gt;socket--&gt;getOutputStream()</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getClientConnectServerThread(sender).getSocket().getOutputStream();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br><span class="hljs-comment">//发送数据包</span><br>oos.writeObject(message);<br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender + <span class="hljs-string">&quot;把来自&quot;</span> + targetPath + <span class="hljs-string">&quot;的文件发送给了&quot;</span>+ receiver);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>ex.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>服务端转发<br><span class="hljs-comment">//判断数据类型为文件</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br><span class="hljs-comment">//获取接收者</span><br><span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br><span class="hljs-comment">//根据接收者获取对应线程</span><br><span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">scct</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getServerConnectClientThread(receiver);<br><span class="hljs-comment">//根据线程获取socket</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> scct.getSocket();<br><span class="hljs-comment">//把读取到的数据发送到对应线程</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>oos.writeObject(message);<br><span class="hljs-comment">//提示信息</span><br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> +message.getSender() + <span class="hljs-string">&quot;发送文件给&quot;</span> + receiver);<br>&#125;<br>客户端接收<br> <span class="hljs-comment">//如果数据类型为文件</span><br><span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br><span class="hljs-comment">//拆包获取数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br><span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br><span class="hljs-type">String</span> <span class="hljs-variable">targetPath</span> <span class="hljs-operator">=</span> message.getTargetPath();<br><span class="hljs-type">byte</span>[] bytes = message.getBytes();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetPath);<br>fileOutputStream.write(bytes);<br><span class="hljs-keyword">if</span>(fileOutputStream != <span class="hljs-literal">null</span>)&#123;<br>    fileOutputStream.close();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> +receiver + <span class="hljs-string">&quot;接收了&quot;</span> + sender + <span class="hljs-string">&quot;发送的文件并存入了&quot;</span> + targetPath);<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>推送消息功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-6t4644lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-6t4644lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 一个独立线程负责推送消息<br> **/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendNewsToAllService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//可反复推送消息</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入你想推送的消息(输入exit表示退出推送服务线程):&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">if</span>(news.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//设置要发送的数据包</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>            message.setSender(<span class="hljs-string">&quot;服务器&quot;</span>);<br>            message.setDataType(MessageType.MESSAGE_GROUP_MES);<br>            message.setContent(news);<br>            <span class="hljs-comment">//发送给所有线程</span><br>            HashMap&lt;String, ServerConnectClientThread&gt; hashMap = ManageClientConnectServiceThread.getHashMap();<br>            Iterator&lt;ServerConnectClientThread&gt; iterator = hashMap.values().iterator();<br>            <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> next.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<span class="hljs-comment">//发送数据包</span><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p>扩展部分：离线消息和离线文件<br><strong>离线消息</strong></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ccsuq6lbavf10x"></i><span>java</span><div class="collapse show" id="collapse-ccsuq6lbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  监视线程，保证离线用户上线后第一时间收到消息</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OfflineUserPackage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Message message;<br><br>    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            <span class="hljs-comment">//从数据包里获取接收者</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br>            <span class="hljs-comment">//获取线程集合hashMap</span><br>            HashMap&lt;String, ServerConnectClientThread&gt; hashMap = ManageClientConnectServiceThread.getHashMap();<br>            <span class="hljs-keyword">if</span>(hashMap.get(receiver) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> hashMap.get(receiver);<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverConnectClientThread.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                    loop = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></div></figure><p><strong>离线文件</strong></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-oqf7pnlbavf10x"></i><span>java</span><div class="collapse show" id="collapse-oqf7pnlbavf10x"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">给离线文件和消息都加了个筛选<br><span class="hljs-keyword">if</span>(hashMap.get(receiver) != <span class="hljs-literal">null</span> &amp;&amp; message.getDataType().equals(MessageType.MESSAGE_FILE_MES)) &#123;<br>                <span class="hljs-comment">//根据接收者获取对应线程</span><br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> hashMap.get(receiver);<br>                <span class="hljs-comment">//根据线程获取socket</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverConnectClientThread.getSocket();<br>                <span class="hljs-comment">//把读取到的数据发送到对应线程</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>                    oos.writeObject(message);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-comment">//提示信息</span><br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + message.getSender() + <span class="hljs-string">&quot;发送文件给&quot;</span> + receiver);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></div></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程章节</title>
      <link href="/2022/09/03/java%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/03/java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b759f6e514531724e9e580705b6e6950bd14f18acaea66d5131de3519794726a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码为123456</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题</title>
      <link href="/2022/08/18/Hexo%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/08/18/Hexo%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="77d4b6f973f114ee1f1ba74226e22235317b14b7ed4a02fc84111e185c0352d2">0bca038eed8a1afa963dd59b310a40ff23496a676dc9db398cad9731bb19b7f966472a6db0f6e7f9071b0fc6cb21fbd3afd8d771058cd7c658409045a89e9544a50c74e6e8a6413f4cfbe61e98643bfa9df5829a2590f953004bf9911cdd5b11504050080491e08c52b76c10df7ba1e9ce92c65b99f00cb6af4bdc519fd7a25c134e4056744d4b92c1f8e03d5d0d9f04425ee57a62961048110c4ae5a2a1e91a2661de5252a7047c4935f8a49013dce67208c08f1f023d78597df3af33a721626d73e76b518976d8ccda47d2f7ddb6648f9da81a16e6660c7302f147987eb95f894e1a35acc8c87b6ea59a8c308820303a10d10e4c6de4e4e4f4f5cc71c723253dcc5df836aad96a4028ff3f60dbe716f88f00ae2b4f3888388f9ffece05b5bf330acbadfe0ff52f2bfacf6f4a9213c94feddd8d3d23ebffc1e939a68389595aedc3d8e817c792b11c33fbfa6470fcedc57a10657f6099957af9ac1e723ede51b88397c267bdd24fd85c603a2b54d3634946d08f4f40917bf0661e843160ca6672818001536717af68b8554f83e75a448f63f7c427af4b4ed868d1e3bd6246dd1b1191de987032f2769c0603ddca5d6e14217ffdd6157e77f2b905d9a8565e483ff8fab23f36ca21442eeafaa80e315f3a6cb748d24258aa74c805308899beffd986a0e524a5588f9cee3cfa6b6da6eb91b5214a917b4a0db491faa0e57b845b135ea793d3e9c80290d5cf1a199d263d39146cd70e06e105ab32632a39cc2bb2b1f7f755629303d95372cb3108b124ed05dc93bf59167855f03646ab48c647744ee838c5bfc29e91f98ed77b461e8fe14a2eccc4bf46ce021f8f5dc8a5d6316e5f12249abc13cef4f93166cdb85a4d8d8b32653d49e8a72942a93492ccc671ac8d7dfa3d9de05c11028db021cd3e91104da11da608b05374c98d918ab2ff1563714800890c49bd436924aeeb51d9b0e69bdd1d9184d84f5963f5b123f01fe8ccb1714455042431341eb7435f805c3c729fc90cb9cf497a468af90cb63de125123100e82c9dfc5cd3bc157efc330b527a2bee9dd7d2a6b6983c6cdd82a2d9c63794551890a0dae19df6c137d08d230f6d9c19026e26234d76de0f82de82e3156a608dfc7739c3f74bcc06029126a4469e7cf57352e6a8d3a3ad9b266433d7bf2371a4cdf56d58184a08f2755a8267a1a6234351348dad22ad398047e11a81e74f2bf090c878def98242c51bdf8f5b1f470903031acb7ec93bb4e32c623bd99f739a27c715b3a78feab0db2f430ad3c99014502730826494c74c3681d7de416d00a8613b03acb798128b3961cea4bda8e1297a3d786cc95a49bf3bc16cc9616bba5d8c6ec45a0b9b890a8fd7e8faf7a9187490a2513ab090d1e994919fd0e35f0b3edad5b6f1145280d442d927a64b821595016d0cfa3a3265eaa2207ce317db81c9d19d8c6939b22e2eaf0f119adbf018c0c37165bb4249a9c980632d85459d47bb0cbeeb9f44c6c190f65771b6e2393fb6993d2033eb8ff7171ff7a235079ac46fde09ad9cb88b9a2b14ecefc059aca4f3be1098502eed4cea08546c58dcfe0e7c2e78ae34f342148b774dfc9218eb0369d45901bd9a675c285659f574e179c8c7f4b8316de90b74aebcbee283c246e0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo和Github搭建个人博客</title>
      <link href="/2022/08/18/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/18/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="75c490ad1cce67e524a16d8f7a86b42f1d742ba6dda2fd8f5a1e482b0439428a">0bca038eed8a1afa963dd59b310a40ffcff8f184ee4b1145fe4c02fcaf6d464763dd5016051250aadd7b99817742c9b0a6cef8200686de0ea48ebac00fc90527479a9e54b2d6a48fbdf56e9761d093d58112f1615a927316850ddf04092bf7c26492660057654039d9dd429d59f93f32ee622e21c730975a8656a469af50d05904df769dda6a11fc99f3af137ad164b10a106441243f3832fcd73ebcf8cd7572cacfdc58a4cf282d8af821d2311a8bbfc65fd45658a623c69b6201676fecd3aab1ed41db1adf4f0dce0049905626b3d17358a592fd4f400a2923fda71f32f917f77725ca06f31e34f63f9e33b4bf5c29c7fc01d3c291f0244535fb03d4751fe44a8a4e340217c03de26098449dd010fcf4f0d9857cf90c7dbb58be96e6d5a817abf93bdd4ab6bdb80cb3c42d6091697ddd66da4747ed94fc26aa8d07e1c94242bd20d51abaf6efec287258e2c8c6323cced32ecab0c80eac99f57172a47efb270b3bb27c2555671003858ab7e61a76aa42df5a78c83a8a9d446be5903badbf874aeecdbc67082a273eeb0da6a73be5be1cec5ec3fc0a72996e9f00c6dc0afa449a042094d91057797f66822565fdf8285e769664c487cd0fbc9381f88811955221fdd5d84284b97c72e06c3cd3640a0f093112fb1c9f2263883511c618ffc06f2a68929dd5138a3e50a309608273af0a95325c681c1efb0717259b2f80c103d575fa3ce20f325578ceedc09317393f6cf8848c3d23b0596d286ea7064178832c5b8801a34cf88ef0a47e75b102ccff3fa9ebf204f54f6d4524284e43ee7e6a79b1695992ec6097e6c3eac482829d9144080a2253412a8f4eb43dff95c1a65d6920c76318c4c4c0abc8f3534b0dabede786368a6eb04f1e91e490e714f07e74ec95700692c6eaf4d4422054a8f131a91d729436459bf6d4ff4d15f3117d3fa7682f7ce8f4af0768b47e9d7eee4205b502512c5dbbff98c34abef62b04da307442b00f7f01081c55f261dc3a678eda5b03249c172664873db2a1075e5b0a0894e69f97bd0fbfcefe38397317cefc782252c6140a498ca12e8f33aa2b2ec50279365d7baa9a1379986b19771f587cbf70d3c5c4896a3537187a750e7141a194e0c2c339e7c97128eb060e890bf282d6d6919ca95df1f0db77cb6eec9cf85200d7a0f26d224e474b385f2fb689df47a1606c44bdb0cf140db8d7257c5f5a092a16c48af19e86304129276b877c4d4bf90b2fe5b541ad54ec32b1933b4b8aa321f98a02fe8450938def2e11136d85417d1c3bb8422cf603e3cef1d8c273ea571075fb966c1bd6c1e6e5e2fd9220ed52f0dfca9348cd178c768d6c996d9bd6ac39857b55869e5827c77d04e397bbc14033d68f7b68d34487a84533b5e7e004441cbd6cf8811b0d536fb6b1b5013cd838c1edd7a89dca14e2782cedf04e3a026df991c38ea6a18294214522101a1dd6c49e7d34270a3d31a4ed2a018ff1e35e019f1b297a74a7f2ab8feb1b3a591829a52f262544f227d2174ec0d02883e9d8fbb223454f3392974b7947dc59ad7d2800b69a2ac28c061860c48897236d3f89597ebd91140543ac4c336eb52e68b4fe487cc46f45b68d0e1315baa3727703ee888c030fdffc51f34698e24c30c51b468f8191a47399dc0fa68ed90181fb6840ea64367c448600d19573b49a19bb1b8fbe0cd8f8456b271f3c5422ceb107da6a7944e1c168bcd614a9a68aeb3730569cc2d4c0052ba735eecc6c4287bee01152ad9b9f9b62fcb30bc7b9980e1c956abbdd90f2b227abdf3141237548eccc64b64d6b7d75ee62e851b30a07e1a43015c7d238e0a56873fcc170643f0abd87612b6ed56a96684fa1770d5c1d4073db5b3aa19131835d593b31b60ffd0a3f3eec0c4b47d9919cc18457abb5b16f46a970e5bfa6283f42e0cdef52cde61f20d25cf4978b15736b00cbe7f8b62104d4fb16982e4416160c60f88d11518917547518cf91df449f1992987485d358372891e9e1d5ca18bf9eeacb6c17a8412a0858c93f6e9df9b4109d3c60995fd3189bb335b5d96ff0e08d08e6cc0e94d4c1cc35eaf7f52c5e16774a480a3eb82912d79be67994a1f0ec19caaa8cd623ea3f491cac362f0e41514fa8c0e05aa180ac47192943a8df71f6c38dcf7f3c3aec27f97018387322fbce6117e005cb6a0821af35cd969369f84b3d119f1d2e903413f0152c6037e03bce127dead732fb1b4f5514e1b809ee410074ed285a2259e3f88b1f1ba80380a0609bed3dfa3e33264a48c84cb20e2c36cfa16299459083a13c5efb1af4b00a1e80</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/2022/08/12/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/08/12/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="89556a10b5cda8832bb37de6077ad3cf9e52d51434589b1ed496d71518b86d53">0bca038eed8a1afa963dd59b310a40fff8d8e361c41ac739a8c86cfbb35bdad2de21f4f40b1059e57f5e6842db5fdaadc5d9cec6fc620bc739e11f6bc2dd203edfe426bfb1eb8d32c028e13cf472f0cc0d7c867ad93e3ca6907365e5ec418041b3e458e57e03636290cc71ec55af4ec7c7e618847bdbc9c811dcd2aaf78d2c456eecb179be30dbafa6331df1a960133c84f5984b73e902e13bd317f863e9647262cef5a3b7ea8712c9e2f7b0b63e9aca2e691611a95082f2e48f4ee4026d02dc740ee26b0d3a566e14974c760fa0ad829455beb0ae9e625f3c00fdf827b213601e4462253ce1df717eb4cc17fa807ccdf87e117135cd17ee828bb8cd570b9c14b2bf901ae5c5e5a607765a6b449994542ed9bd8054aadbe4a5a2dd5765b030dcada945ab23ce1fff16ec864c368af626925df0643b856c6124e0473b973dd655a367602c4db728a3497fc8ea948eeda2ea948630bd55b561494991f6848108d4b8e6aa878bcac1aeae981954a997fe6a0ddaa455e56a1f95a00442c3148d4020b66a2d247ac8a6da5b9c00979244ee0bf862f6621ea4d678f07c5fbdac4b9b67696fa7cea83317b663d3d7ad5538431267f4eefbedb6ea9b2b12544a45b7d4703265d3dd0fccdfd39cb6e2d768ea5465557e36977057ea107164acbadee64a587ad1d3f27e495c7ca1835743088388d469464c80f22e14422c20a95e6eb0892ce08d8ddaf3cad5124061a0be1a8a70f9e966abaff48f0c4cc545a39115e590ede502a8a65e704ee19503b9273d75663cf6bbdc6a6a3912cb2ddc34bf010c88de68a9b672363f40a4ea4803535fd3f472bf4894eb06a8e8ab18027d35e24c8012e4e1d4dd09e7617aee7b88f9db66530f556eec44f4ea5f4a68061ae4e1c9b555aa09ff8519792ff813286802c1ee34786ee6ee52a0f4a27fb413897a3fa6200376821f7479b7ff9a09a7cc9b3d3b49fd512369045561f051c0ec635e8d80a5e4edc620684e5ba83b65872097e9f0705f6b4547d61e730725b23256aa3133e21f0d7f390dac6d31a302ee35fb84714723bb7b284781ea2fb7f762a80a452b89bb402f02e12856c56e5ea560af100e64049084e5fe6b2ca8a11c10d65edfad9f998ab6d711dda1feb285304da13561fab8eb6686ec5ef8a6b9d0608449f5b34a274af75e72a79b71b22f7884dee60279724d45ddf4158d9a677510dfa461f050994d89fd1decd8b87b84d7413e987f16ca8532a2f04a040f5d175db7bcab2ffc8ec6a14af523e1c2b00ca34f24b180488facbb8d604a400e1ecd8e4704a0ce701712d1491ab1708bc636e3486fe87074db4fffe9500bf8f365ce210517cd437da659e0ca5e0787172eb983ff5deb52469494858611e7b42420f7ff1314c1f1a3632e2ee760b7ed160c7e2dd848281e0427761525106e1125c6aa66ad229778eb82d7ab14ebae4101af25dbe777c45617812a3a995704b5b2fc2aa2dcf8c133c8b53d05b8e41a2661a7838d27f3bc34fab9d1bb6216496ddcff64cda7f6eaa965edbb5b6ea81e59ce39ba2a3c22ce1bcb4db4e4404008ad8405a2384778c52f3f765afdbfa1f2ea60269825a0235ad06e850ae939ec36956b12657d409b1c820996ecdcf74e3afac0569f7d96f5117184396b0fc2e1e1415d14917e477bc7db43788cb6fcf9a55dff25e28e7e030d319d04a4816995c46e34c1fc966946b2b9a9cdba4cb687a3d1f7e7465679c4bdb19d38d183aa0961210605f354f231d33bc417f1edce11a8cdee7fbca0b155d09215382d00d5e4c49860e7893a5baa160c766e86975ff54dfdcfe8a2055734019271b129902ffff67870beb2b7c8f43f7c35a317e96c249e00385ec73a44dcf4d99f97e310971c91603f9a410c92a9d707855c9d0b6e960b11f3c6596d889619845c12bf6ea66cdb61de2e7106a88ccfcf31f2b1069ad21fdc790587083b10605778a3d4f540dff6d34de93be8053340059834120e221f4abbd89835bed79c194eab68d37cbc87cdd14cec7c14603b1deafdf608e7d49ec8011b50cf13cbddc3b65f8ac33441aa512ca9137042f8b7168a5fb4f5adb023218c4663b4ef06c226d4fd2539a8dc5491bcd7bfc8da37f03fbc68565e8f5c0ef503e3cf36ac3af6ea2c341a2291979489113f3ae1b60a2e1d98f54319631db59cfa5d40356a17614c2b774a088cfefb7f42ea9bd33c16132030937c9ff91b0540429b30e08e37b23389660c506d08105ec77e5c4b98e6dbc8b8ef347711bed670bd142e2274be9d9e63bdf32ad20672b6ab62df695bd0c361f795366f80cc795454ed773697a75edbacf67c102b8d3214d10d461a01e3a837dcdd563f82db3520fb359c7c642838542949fad53897472a42a8996ceaa09d2a9c5391a060e5139e29751576521543ad798744c9a9ca729cc8d870bca4293a58bc3d319a0e10641590e0b671819cbc382d169a9a5fec8b2173fae2b658e07e26463417a85f1c9dbfae0d172be8e6d979b0f0987f1e7188b59a8a4bced040d3311c631d291b982b1c5e31b1244d4b85d74b86884050fa16f8ead5f5b584931131d392ebb84ec0d8db61160e4e1fd0d81330c205e29e66a96930fcf04c9556f230715e7d0cc89e00df4772cbef22abb1260b5f23a416737cd486ff7594dec4490cfc0a84132d035a6f895d7590e214f566f49135e00fd5b5ca2c62c10cde0b1ebe9c5bd337b9bc304f962e82f80931f1653dc0f08b426b1c9583e0c883c19e07b05d08356a4992a9123345275f8b3c7ff60c2e6e4c3f12a15f32789f1d2b96bdd472aaa7e9c6b877e376dcc6004fadb56f17b56ba9d8dfca79fec869b631ab972933a14a73f888eff76e657717258ba9e8004ef8471fdbace9371c87386878f9b9d2a6cc6a799906d29e86bcedf30cb8c5348296fe47ec6fc2afb1dcdbe99fdcce11b28e7fea538051add203d59da087fcd653e251e9f47a94ac525ffc1bc552beef690d29dca125de01363c7153f718881d160112dca09cf62a05fed3ab2463d197bb7233c41fe17c045e5509305324b9c85d643854da11c1aa90a23f3ce69588bb93dc95f7348978e2ab6be60f5261874b6929b4375381741db9e0150a662dcc4081497b287a845c3cf85342c7db6460ae3b0af22109c365561039796ed098a971b58f9a378ca576e77c2b712c71183b6b3b34153206fca8dab5ef37a9778069c9ec8e5744fb7802e9e49f4f7990b0a9765caea83ab9622245198d0d693098110cf9f4f28f9d37aa9e0d70f4d14d3910a2c7a59fdfdc8884930152e8dac30b0599629ec75a66f708d140acea275198e74d13775385f828ca396f2efa3244f42243689e8e5ca116a5cfd458ab18e6d834a9844969f08937191892a79b60004ff5e82c5ed1ee12013a3f459bd70fac42d9cf2abc1bffa0964796028c65436c32df9c3d9e8dbcd04eec6082413da79f68d13e8e2cee8d696fa2397cd9886df8722c715f3f9a5e7e7208e2929fc711849f0d0a59010a8014006054272894b75c23f442fcd1940df69f5fd9fc35fb2f38b38728c5333c587a30f0bb5143f7f0c110230163d1fa9b88f0592ebc2fc1814eaaaee02dff6d76add3978cd35b847d2f5003f059ffb7f500d1ef0b19b43264b985ed7e488bd76615325cff10ae7c60bb5fa7392715b51fbde93c19b06702936e20710607f8673a3f2aa41deb6df65583e0d9589b2235a47a7ef099fdf0e37d8abf6a90ba8ed8a7ab7d3370a3fe04fad6ea7e57cb93fb4ff5e000a55787350e8925b2ff6804574ce6a94f6d15a7a6c44a17b7109836e19f2cafa0b7a1d3975841135bbdb5ba998f1c45f72f4fa3849482dacb8845c39320ed60e683c8303b5dd036a0fdc3439e8b519140254d9c38e53e2bf47a92496bf2161aba99a84c3eeb1fae421501cf1cd15f1986a3408d810129c552787683d63f73208f617563adf7c203c862efee24cdb5310a300534e227209fe35add53e95568b0944a6ead1c9386fc85941f79cb15512b9ec89a4a2abf986b2b86ce43d0b255cb41687c9c075694467bc9b28573d9c19db6652902b832140480ff751ee7cd8a1757cecae862d4185009bff7e67cbd669cf85e982bb215483646312512da73681a1921860cf13b087d440190896ac8a0ffd38bc719412ec4bf0760b04ef69cab19b93f30172be918cf0e7ec71a321c6cb4e168938d816a604eb644bf74d3c7f1ba2edd6d9fddd27b77bdc4c5d74efbd08a671d5f73741e0e83f4f5a95faa327d40610782d957b4bb4c017f2ee3dd025313f2998c1424bd2fddb1250ddb15fd87c4363dd8a136c1459512074be43e5dc854e508fbc0645a140062f4124cfee9d302df9a2e6ab71cc3b8d8b28f526e044362898e6abb29a319a2a61df767b2491aebd09e00204a7740f071ae6728e82efea42f22d1875ed847d39e3b450a24380d9a9ec09cdd6d538ff2e3bef8e6ba6941075092a51dec85a647578d559a3706060d33031240e7e8604680db540f02dce4d664bc4f9d07d8262b6b63c10c60d616c3c97de60d34755f6040b59757101921bd84c0eabdb087c9c478837a84f3bb9c3d20f1cfd0db220dd4fa60a7ab8d619eb5921912f449c7ad2b28eef22e687d1dc3b1684b5e4f696639c7cfb14fea6fa1ea588ee19910839af5fc81002d21bce259acd4f5c37139d0d60aa592738d7d1f5b1f85cb7722dde24da0bb34cf5105d0d3984a7be93dd2c25a612fde82bc5ce3d968f875e032830ceac80a59b35e39a64e883d878919f106cf3524b235628ce939de49657c639679b445e6c7f66463f2099467c277e62c84e13e22998cb9c22197bc15b002d6376566f9e45c5f82ddac086830bc0e793af6d5c2ef39cb93d033c902c7976afe6b93144c85a4aabc354bc3fac9864b807b9bcf22a8685b188592645a59148c826a0b44573a7fe5f843f86c71a4aa046b1f7f4499fddc2208eab075ed6b5cf2572967c4da62a86ee94d3fd94608bb529967c2f6935637392ece626ee0296f0bf4715d05380bd74ea0e30d49a2756eac03fc0766a0ad8ab8954b92686b0565a72c14e7817e2c95ee8d5726caa7ae94987124c01461872b819cf2cef50c54b258abcd0937722b882ff6e1832f341f35f918470bd694b86ed37da92ad053ee0757126036b98e47539f5758cd9cf341d3a53cacdb6eaf9cef17d02a58d8d39df614d297956364ef640281471f5c9ff074cd4bb031eb8c6bc89af6b84536f1a7a1ca1883aa662b6fac53b45a7a0930e098e1b7ba26cc122b3cdbccdcbbb4f843c9290cd40c010858dc5a21347473cf3f3d873c7a602fc6e45578c01a4c60793d2d94ae5d63704248b29c10eb265333024e9c5948b061190e063e5402f1e56cf1bafcdb7d0ca095acb2dea86e599d3894c7056e981446d7773083021703c04589d5723a31ed4551f33a93d29343dd8dca54efb0f192c1e5bc079ad47b562c37637405b8bd4b46076b48b8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
