<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多用户即时通信系统</title>
      <link href="/2022/09/03/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/09/03/%E5%A4%9A%E7%94%A8%E6%88%B7%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么选择这个项目"><a href="#为什么选择这个项目" class="headerlink" title="为什么选择这个项目"></a>为什么选择这个项目</h4><blockquote><p>有意思且涉及到各个方面的技术，还可以巩固基础学习新知识<br>知识点包括：</p><ol><li>项目框架设计</li><li>java面向对象编程</li><li>网络编程</li><li>多线程</li><li>IO流</li><li>Mysql&#x2F;（先用集合充当内存数据库）</li></ol></blockquote><h3 id="多用户通信系统思路（第一版）和代码实现"><a href="#多用户通信系统思路（第一版）和代码实现" class="headerlink" title="多用户通信系统思路（第一版）和代码实现"></a>多用户通信系统思路（第一版）和代码实现</h3><blockquote><p><strong>通信结构分为客户端和服务端</strong></p><blockquote><p><strong>服务端</strong>验证客户端账号信息和数据传输<br><strong>客户端</strong>作为用户可以通过服务器给其它用户发送消息和各类文件<br><strong>数据的传输</strong>主要采用对象流的方式，包括用户对象和消息数据包<br><img src="https://s1.328888.xyz/2022/09/06/50SQy.png"></p></blockquote></blockquote><blockquote><p>一、 实现第一个功能，<strong>用户登录</strong></p></blockquote><p> <strong>客户端，根据用户界面提前创建用户对象和消息数据包，都作为对象数据流来传输。</strong></p><p>1）用户这个类包括用户名&#x2F;id,用户密码</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-n72bigl7vpalpv"></i><span>java</span><div class="collapse show" id="collapse-n72bigl7vpalpv"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//用户名/id</span><br>    String passWord;<span class="hljs-comment">//密码</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassWord</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassWord</span><span class="hljs-params">(String passWord)</span> &#123;<br>        <span class="hljs-built_in">this</span>.passWord = passWord;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>2）数据包这个类会包含数据类型，数据内容，发送者和接收者，最后还有发送时间</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-fzneppl7vpalpw"></i><span>JAVA</span><div class="collapse show" id="collapse-fzneppl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String content;<span class="hljs-comment">//发送内容</span><br>    <span class="hljs-keyword">private</span> String dataType;<span class="hljs-comment">//数据类型</span><br>    <span class="hljs-keyword">private</span> String sender;<span class="hljs-comment">//发送者</span><br>    <span class="hljs-keyword">private</span> String receiver;<span class="hljs-comment">//接收者</span><br>    <span class="hljs-keyword">private</span> String data;<span class="hljs-comment">//日期，感觉可以用第三代日期类，后面再改</span><br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span> &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDataType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dataType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataType</span><span class="hljs-params">(String dataType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dataType = dataType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSender</span><span class="hljs-params">(String sender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sender = sender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReceiver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> receiver;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReceiver</span><span class="hljs-params">(String receiver)</span> &#123;<br>        <span class="hljs-built_in">this</span>.receiver = receiver;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>3）为了管理数据包的数据类型，再创建个接口来管理</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1faejml7vpalpw"></i><span>JAVA</span><div class="collapse show" id="collapse-1faejml7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> az.qqServer;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//在接口中定义常量，表示不同的消息类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAIL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></div></figure><blockquote><p>4)用户登录界面制作，先把逻辑打通再细写代码</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p><img src="https://s1.328888.xyz/2022/09/05/1x4fK.png"><br>进入二级菜单<br><img src="https://s1.328888.xyz/2022/09/05/1xi5J.png"></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-e8wnyel7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-e8wnyel7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户端登入界面</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">qqView</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">qqView</span>().mainView();<span class="hljs-comment">//测试mainView方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//菜单控制循环</span><br>    <span class="hljs-keyword">private</span> String key;<span class="hljs-comment">//用户输入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainView</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            System.out.println(<span class="hljs-string">&quot;==========欢迎登录网络通信系统=========&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t1 登录系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t\t9 退出系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的选择:&quot;</span>);<br>            key = Utility.readString(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//根据用户输入来执行操作</span><br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入你的用户名:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">&quot;请输入你的密码:&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">passWord</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                    <span class="hljs-comment">//这里需要到服务端验证是否合法，代码后续补，先通逻辑</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//假如验证合法，则进入二级菜单</span><br>                        System.out.println(<span class="hljs-string">&quot;========欢迎用户&quot;</span> + userId + <span class="hljs-string">&quot;===========&quot;</span>);<br>                        <span class="hljs-keyword">while</span> (loop) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;==========网络通信系统二级菜单（&quot;</span> + userId + <span class="hljs-string">&quot;）========&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t1 显示在线用户列表&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t2 群发消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t3 私发消息&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t4 发送文件&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;\t\t9 退出系统&quot;</span>);<br>                            System.out.println(<span class="hljs-string">&quot;请输入你的选择:&quot;</span>);<br>                            key = Utility.readString(<span class="hljs-number">1</span>);<br>                            <span class="hljs-keyword">switch</span> (key) &#123;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;显示在线用户列表&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;群发消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;私发消息&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;发送文件&quot;</span>);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;退出系统&quot;</span>);<br>                                    loop = <span class="hljs-literal">false</span>;<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">//验证不通过</span><br>                        System.out.println(<span class="hljs-string">&quot;========登录失败=======&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;退出系统&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>5）根据用户输入的账密进行验证，客户端创建一个用户服务类，用来验证账密并建立连接</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-jh4mu6l7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-jh4mu6l7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><span class="hljs-keyword">import</span> azqq.qqcommon.MessageType;<br><span class="hljs-keyword">import</span> azqq.qqcommon.User;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  这个类用来检验用户账密是否正确，并开启一个线程（持有socket）。</span><br><span class="hljs-comment"> *  根据用户输入的账号密码设置user对象，发给服务端进行验证，服务端会返回一个Message对象</span><br><span class="hljs-comment"> *  根据Message对象返回的信息判断是否登录成功，登录成功则创建一个线程持有socket和服务端保持通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientService</span> &#123;<br>    <span class="hljs-comment">//其它地方有可能用到socket和u，所以做成属性</span><br>    <span class="hljs-keyword">private</span>  Socket socket;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br><br>    <span class="hljs-comment">//根据用户输入的id和密码确认是否合法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUser</span><span class="hljs-params">(String userId , String passWord)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始发送对象进行检验&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//向服务器发送user对象，因此需要创建设置一个</span><br>        u.setName(userId);<br>        u.setPassWord(passWord);<br>        <span class="hljs-comment">//1.通过socket向服务器发送user对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">9999</span>);<br><span class="hljs-comment">//            outputStream = socket.getOutputStream();下面简写</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>            oos.writeObject(u);<br><span class="hljs-comment">//            InputStream inputStream = socket.getInputStream();</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>            <span class="hljs-comment">//2.接收服务器返回的信息</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>            <span class="hljs-comment">//3.根据返回数据判断是否登录成功</span><br>            <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_LOGIN_SUCCEED))&#123;<br>                <span class="hljs-comment">//如果登录成功，需要有一个线程持socket来不停的验证和传输数据，因此新建一个线程类ClientConnectServerThread</span><br>                <span class="hljs-type">ClientConnectServerThread</span> <span class="hljs-variable">ccst</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientConnectServerThread</span>(socket);<span class="hljs-comment">//将socket传过去</span><br>                <span class="hljs-comment">//启动线程</span><br>                ccst.start();<br>                <span class="hljs-comment">//为了后面线程方便管理，将这里的线程加入集合</span><br>                ManageClientConnectServiceThread.addClientConnectServerThread(userId,ccst);<br>                b = <span class="hljs-literal">true</span>;<br>                System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>                socket.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>6）新建的线程类</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-qzb899l7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-qzb899l7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  这个线程类持有socket用来保持和服务端的通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientConnectServerThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Socket socket ;<br>    <span class="hljs-comment">//通过构造器来获得socket，金典</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientConnectServerThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-comment">//此线程监视用户信息和数据库是否保持一致</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;接收消息&quot;</span>);<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(inputStream);<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span>(Message) ois.readObject();<br>                <span class="hljs-comment">//后续对message进行处理</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//其它类会需要socket</span><br>    <span class="hljs-keyword">public</span> Socket <span class="hljs-title function_">getSocket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> socket;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>7)用hashMap管理线程</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-jh3w6gl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-jh3w6gl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.service;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  线程池</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageClientConnectServiceThread</span> &#123;<br>    <span class="hljs-comment">//先用集合hashMap来管理，k为用户名，v为线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,ClientConnectServerThread&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//添加某一个线程进来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addClientConnectServerThread</span><span class="hljs-params">(String userId,ClientConnectServerThread ccst )</span>&#123;<br>        hashMap.put(userId,ccst);<br>    &#125;<br>    <span class="hljs-comment">//根据id返回线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientConnectServerThread <span class="hljs-title function_">getClientConnectServerThread</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> hashMap.get(userId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure><p><strong>服务端，同理需要有用户对象和消息类，客户端负责验证客户端账户信息和接收数据</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <blockquote><p>注意服务端对于序列化的对象路径要和客户端保存一致，不然无法识别<br><img src="https://s1.328888.xyz/2022/09/06/54Ytn.png"></p></blockquote><blockquote><p>1.服务端得要接收客户端发送过来的user对象，并根据数据库来检验账密是否正确，正确就开启线程和客户端进行通信</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-500t5tl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-500t5tl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><span class="hljs-keyword">import</span> azqq.qqcommon.MessageType;<br><span class="hljs-keyword">import</span> azqq.qqcommon.User;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 该服务类持续监听9999端口，如果有客服端进行连接则根据客户端发送的user对象来跟数据库比对，如果正确就建立连接</span><br><span class="hljs-comment"> 创建线程进行数据交互，中途如果又有其它客户端加入连接，则同理user没问题就又增加一个线程进行通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title function_">QQServer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>            System.out.println(<span class="hljs-string">&quot;客户端等待连接...&quot;</span>);<br>            <span class="hljs-comment">//当和某个客户端连接后会持续监听，且持续监听是否有其它连接，因此用while</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<span class="hljs-comment">//如果没有客户端连接就会阻塞在这里</span><br>                <span class="hljs-comment">//得到和socket关联的输入输出流</span><br>                System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) ois.readObject();<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                System.out.println(<span class="hljs-string">&quot;开始验证&quot;</span>);<br>                <span class="hljs-comment">//验证，如果账号密码正确，则可以登录，这里先死后活，用100，123465作为一个合法用户，后续改</span><br>                <span class="hljs-keyword">if</span> (user.getName().equals(<span class="hljs-string">&quot;100&quot;</span>) &amp;&amp; user.getPassWord().equals(<span class="hljs-string">&quot;123456&quot;</span>)) &#123;<span class="hljs-comment">//根据user的账号密码是否登录成功，先通逻辑</span><br>                    <span class="hljs-comment">//登录成功返回Massege信息</span><br>                    message.setDataType(MessageType.MESSAGE_LOGIN_SUCCEED);<br><span class="hljs-comment">//                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());//考虑作用域放if外面去</span><br>                    <span class="hljs-comment">//发送message对象</span><br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//同理确认可以登录后创建一个线程和客户端保持通信</span><br>                    <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerConnectClientThread</span>(socket, user.getName());<br>                    <span class="hljs-comment">//启动通信的线程，并放入集合管理</span><br>                    serverConnectClientThread.start();<br>                    System.out.println(<span class="hljs-string">&quot;踩踩踩踩踩踩&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//登录失败返回Message信息</span><br>                    System.out.println(<span class="hljs-string">&quot;测试语句，&quot;</span>+ user.getName() +<span class="hljs-string">&quot;登录失败&quot;</span> + user.getPassWord());<br>                    message.setDataType(MessageType.MESSAGE_LOGIN_FAIL);<br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//关闭socket</span><br>                    socket.close();<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//如果服务器退出了while则表示断开了连接，关闭serverSocket</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                serverSocket.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>2.线程持有socket</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-0ymgqxl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-0ymgqxl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> azqq.qqcommon.Message;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *      该线程类用来和客户端保持通信</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerConnectClientThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">private</span> String userId;<span class="hljs-comment">//用来确认是哪个用户连接的客户端</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerConnectClientThread</span><span class="hljs-params">(Socket socket, String userId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-comment">//这里由于外层判断用户确认连接后调用此线程来接收用户发送的消息，所以转Message</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>                <span class="hljs-comment">//后续对message进行处理</span><br><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>3.线程太多加入管理</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-1oyjjdl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-1oyjjdl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azqq.qqService;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  线程池</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageClientConnectServiceThread</span> &#123;<br>    <span class="hljs-comment">//先用集合hashMap来管理，k为用户名，v为线程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;String,ServerConnectClientThread&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//添加某一个线程进来</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addServerConnectClientThread</span><span class="hljs-params">(String userId,ServerConnectClientThread scct )</span>&#123;<br>        hashMap.put(userId,scct);<br>    &#125;<br>    <span class="hljs-comment">//根据id返回线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerConnectClientThread <span class="hljs-title function_">getServerConnectClientThread</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-keyword">return</span> hashMap.get(userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><blockquote><p>以上双方的通信基本打通，验证一下没问题<br><img src="https://s1.328888.xyz/2022/09/06/5TosR.png"></p></blockquote><blockquote><p>完善一下客户端用户数据，先用集合保存在服务里</p></blockquote><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-8s75u6l7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-8s75u6l7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">//考虑多线程用ConcurrentHashMap，线程同步</span><br><span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String,User&gt; validUsers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><span class="hljs-keyword">static</span> &#123;<span class="hljs-comment">//静态代码块，先代替数据库存放用户数据</span><br>    validUsers.put(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;100&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;我是账户名&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;我是账户名&quot;</span>,<span class="hljs-string">&quot;我是对应密码&quot;</span>));<br>    validUsers.put(<span class="hljs-string">&quot;老亚萨西了&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;老亚萨西了&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></div></figure><p><strong>二、实现拉取在线用户功能</strong><br>1.增加数据类型（两端都要）</p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-b3sxaul7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-b3sxaul7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MessageType</span> &#123;<br>    <span class="hljs-comment">//在接口中定义常量，表示不同的消息类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_SUCCEED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;<span class="hljs-comment">//表示登录成功</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_LOGIN_FAIL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span>;<span class="hljs-comment">//登录失败</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_COMM_MES</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;3&quot;</span>;<span class="hljs-comment">//普通信息包</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_GET_ONLINE_FRIEND</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;4&quot;</span>;<span class="hljs-comment">//要求返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_RET_ONLINE_FRIEND</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;5&quot;</span>;<span class="hljs-comment">//返回在线用户列表</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_CLIENT_EXIT</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;6&quot;</span>;<span class="hljs-comment">//客户端请求退出</span><br>&#125;<br></code></pre></td></tr></table></div></figure><p>客户端发送拉取在线用户请求并接收</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-tvzpxpl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-tvzpxpl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">根据用户输入<span class="hljs-number">1</span>拉取在线列表，创建一个方法在客户端的服务里<br><span class="hljs-comment">//请求服务端获取在线好友列表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">olineFriendList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        <span class="hljs-comment">//设置数据类型</span><br>        message.setDataType(MessageType.MESSAGE_GET_ONLINE_FRIEND);<br>        <span class="hljs-comment">//设置发送者</span><br>        message.setSender(u.getName());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取相关用户线程对应的socket，可以通过线程集合来获取</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">userSocket</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.<br>                    getClientConnectServerThread(u.getName()).getSocket();<br>            <span class="hljs-comment">//根据socket得到输出流</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(userSocket.getOutputStream());<br>            <span class="hljs-comment">//发送请求给服务端</span><br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>这段代码在用户线程的run方法里，一直读取服务端数据<br>    <span class="hljs-comment">//判断message数据类型，进行相应处理</span><br>                <span class="hljs-keyword">if</span> (message.getDataType().equals(MessageType.MESSAGE_RET_ONLINE_FRIEND)) &#123;<br>                    <span class="hljs-comment">//默认好友在线列表以字符串形式且以“”隔开</span><br>                    String[] onlineUsers = message.getContent().split(<span class="hljs-string">&quot; &quot;</span>);<br>                    System.out.println(<span class="hljs-string">&quot;\n=========当前在线用户列表============&quot;</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; onlineUsers.length; i++) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;用户:&quot;</span> + onlineUsers[i]);<br>                    &#125;<br><br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p>客户端接收请求并返回在线用户列表数据</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-yllhepl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-yllhepl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">服务端接收并返回数据<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;服务端和客户端&quot;</span> + userId +<span class="hljs-string">&quot;保持通信，读取数据&quot;</span>);<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());<br>                <span class="hljs-comment">//这里由于外层判断用户确认连接后调用此线程来接收用户发送的消息，所以转Message</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>                <span class="hljs-comment">//根据接收的数据类型进行相应业务处理</span><br>                <span class="hljs-comment">//如果数据类型为获取在线好友列表请求</span><br>                <span class="hljs-keyword">if</span> (message.getDataType().equals(MessageType.MESSAGE_GET_ONLINE_FRIEND)) &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        好友列表格式为 100 200 老亚萨西了</span><br><span class="hljs-comment">                        考虑到线程池有所有在运行的用户，所以在那里编写方法获取userId</span><br><span class="hljs-comment">                    */</span><br>                    System.out.println(message.getSender() + <span class="hljs-string">&quot;要在线用户列表&quot;</span>);<br>                    <span class="hljs-comment">//获取要发送的在线用户列表</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">onlineUserList</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getUserId();<br>                    <span class="hljs-type">Message</span> <span class="hljs-variable">message2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                    message2.setDataType(MessageType.MESSAGE_RET_ONLINE_FRIEND);<br>                    message2.setContent(onlineUserList);<br>                    <span class="hljs-comment">//message发送者getSender是谁，接收者就设置成谁</span><br>                    message2.setReceiver(message.getSender());<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message2);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    服务端接收数据后的还未返回时对数据的处理过程<br>    <span class="hljs-comment">//返回在线用户id</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">onlineUserList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//从hashmap中取，遍历</span><br>        <span class="hljs-comment">//1.取迭代器</span><br>        Iterator&lt;String&gt; iterator = hashMap.keySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            onlineUserList += iterator.next() + <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        System.out.println(onlineUserList);<br>        <span class="hljs-keyword">return</span> onlineUserList;<br><br>    &#125;<br></code></pre></td></tr></table></div></figure><p>功能实现截图<br><img src="https://s1.328888.xyz/2022/09/07/5Umby.png"></p>    </div></div><p><strong>无异常退出</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <p><img src="https://s1.328888.xyz/2022/09/07/5eLz0.png"></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-h9dajil7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-h9dajil7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">用户选择<span class="hljs-number">9</span>退出时调用此方法<br> <span class="hljs-comment">//编写方法给服务端发送message通知关闭线程</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeThread</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(u.getName());<br>        <span class="hljs-comment">//消息数据类型为客户端申请退出</span><br>        message.setDataType(MessageType.MESSAGE_CLIENT_EXIT);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>            oos.writeObject(message);<span class="hljs-comment">//发送数据给服务端</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>         System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br>    <br><br>    服务端对应线程处<br>      <span class="hljs-comment">//如果数据类型为请求关闭类型</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_CLIENT_EXIT))&#123;<br>                    <span class="hljs-comment">//从线程池里移除数据包里面对应的发送者</span><br>                    ManageClientConnectServiceThread.removeServerConnectClientThread(message.getSender());<br>                    socket.close();<span class="hljs-comment">//关闭连接</span><br>                    System.out.println(message.getSender() + <span class="hljs-string">&quot;下线了&quot;</span>);<br>                    loop = <span class="hljs-literal">false</span>;<br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>私聊功能</strong></p><blockquote><p>打包——转发——拆包</p></blockquote><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-antoswl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-antoswl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java">打包<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  用于客户端私聊/群聊</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageClientService</span> &#123;<br>    <span class="hljs-comment">//私发消息的功能</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sendId 发送者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> receiver 接收者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 发送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateChat</span><span class="hljs-params">(String sendId, String receiver, String content)</span>&#123;<br>        <span class="hljs-comment">//设置数据基本属性，发送者接收者，数据类型，发送内容</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(sendId);<br>        message.setDataType(MessageType.MESSAGE_COMM_MES);<br>        message.setContent(content);<br>        message.setReceiver(receiver);<br>        <span class="hljs-comment">//日期设置</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd E hh:mm:ss a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        message.setData(strDate);<br>        <span class="hljs-comment">//给客户端自己提示一句话</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sendId + <span class="hljs-string">&quot;对&quot;</span> + receiver + <span class="hljs-string">&quot;说:&quot;</span> + content);<br>        <span class="hljs-comment">//将数据发送到服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectServiceThread.getClientConnectServerThread(sendId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br>转发<br><span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_COMM_MES))&#123;<br>                    <span class="hljs-comment">//从数据包里面提取发送者想要私聊的对象</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br>                    <span class="hljs-comment">//根据接收者的userId来获取对应的线程socket</span><br>                    <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getServerConnectClientThread(receiver).socket;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                    <span class="hljs-comment">//后面考虑加入离线的情况</span><br>                &#125;<br>拆包<br><span class="hljs-comment">//如果数据类型为普通信息包</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_COMM_MES))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> message.getContent();<br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender+ <span class="hljs-string">&quot;对&quot;</span> + message.getReceiver() + <span class="hljs-string">&quot;说：&quot;</span> + content + <span class="hljs-string">&quot;\t&quot;</span> + message.getData());<br>                &#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>群聊功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-2v5u82l7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-2v5u82l7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">用户选择<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                                    System.out.println(<span class="hljs-string">&quot;请输入群发消息内容&quot;</span>);<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">groupContent</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>                                    mcs.groupChat(userId, groupContent);<br>                                    <span class="hljs-keyword">break</span>;<br><br>客户端发送数据包<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sendId 发送者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 发送内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupChat</span><span class="hljs-params">(String sendId, String content)</span>&#123;<br>        <span class="hljs-comment">//设置数据基本属性，发送者接收者，数据类型，发送内容</span><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setSender(sendId);<br>        message.setDataType(MessageType.MESSAGE_GROUP_MES);<br>        message.setContent(content);<br>        <span class="hljs-comment">//日期设置</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd E hh:mm:ss a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">strDate</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        message.setData(strDate);<br>        <span class="hljs-comment">//给客户端自己提示一句话</span><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sendId + <span class="hljs-string">&quot;对所有人说:&quot;</span> + content);<br>        <span class="hljs-comment">//将数据发送到服务端</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ManageClientConnectServiceThread.getClientConnectServerThread(sendId).getSocket().getOutputStream());<br>            oos.writeObject(message);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br> 服务端处理<br><span class="hljs-comment">//如果数据类型为群聊</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_GROUP_MES))&#123;<br>                        ManageClientConnectServiceThread.groupChat(userId,message);<br>                    System.out.println(userId + <span class="hljs-string">&quot;给所有人发了消息&quot;</span>);<br>                &#125;<br> <span class="hljs-comment">//群聊消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groupChat</span><span class="hljs-params">(String userId , Message message)</span>&#123;<br>        Iterator&lt;ServerConnectClientThread&gt; iterator = hashMap.values().iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span>( next != hashMap.get(userId))&#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> next.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>客户端再接收<br><span class="hljs-comment">//如果数据类型为群聊包</span><br>                <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_GROUP_MES))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> message.getContent();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender+ <span class="hljs-string">&quot;对所有人说：&quot;</span> + content + <span class="hljs-string">&quot;\t&quot;</span> + content);<br>                &#125;            <br><br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>发文件功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-fch70fl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-fch70fl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java">客户端发送文件<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件给哪个用户:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">fileReceiver</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件的路径:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sourcePath</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>System.out.println(<span class="hljs-string">&quot;请输入发送文件至对方的的路径:&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">targetPath</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">50</span>);<br>fileClientService.sendFile(userId,sourcePath,fileReceiver,targetPath);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileClientService</span> &#123;<br><span class="hljs-comment">//给其它客户端传送文件</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> sender    发送者</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> sourcePath  发送路径</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> receiver      接收者</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> targetPath    接收路径</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(String sender,String sourcePath,String receiver,String targetPath)</span>&#123;<br><span class="hljs-comment">//数据包初始化发送者接收者，发送路径，接收路径，数据包类型</span><br><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>message.setSender(sender);<br>message.setReceiver(receiver);<br>message.setSourcePath(sourcePath);<br>message.setTargetPath(targetPath);<br>message.setDataType(MessageType.MESSAGE_FILE_MES);<br><span class="hljs-comment">//根据指定路径，将输入流转成字节数组，打包进message</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(sourcePath);<br><span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(inputStream);<br>message.setBytes(bytes);<br><span class="hljs-comment">//根据发送者id--&gt;线程池--&gt;socket--&gt;getOutputStream()</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getClientConnectServerThread(sender).getSocket().getOutputStream();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br><span class="hljs-comment">//发送数据包</span><br>oos.writeObject(message);<br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + sender + <span class="hljs-string">&quot;把来自&quot;</span> + targetPath + <span class="hljs-string">&quot;的文件发送给了&quot;</span>+ receiver);<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>ex.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>服务端转发<br><span class="hljs-comment">//判断数据类型为文件</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br><span class="hljs-comment">//获取接收者</span><br><span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br><span class="hljs-comment">//根据接收者获取对应线程</span><br><span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">scct</span> <span class="hljs-operator">=</span> ManageClientConnectServiceThread.getServerConnectClientThread(receiver);<br><span class="hljs-comment">//根据线程获取socket</span><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> scct.getSocket();<br><span class="hljs-comment">//把读取到的数据发送到对应线程</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>oos.writeObject(message);<br><span class="hljs-comment">//提示信息</span><br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> +message.getSender() + <span class="hljs-string">&quot;发送文件给&quot;</span> + receiver);<br>&#125;<br>客户端接收<br> <span class="hljs-comment">//如果数据类型为文件</span><br><span class="hljs-keyword">if</span>(message.getDataType().equals(MessageType.MESSAGE_FILE_MES))&#123;<br><span class="hljs-comment">//拆包获取数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> message.getSender();<br><span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br><span class="hljs-type">String</span> <span class="hljs-variable">targetPath</span> <span class="hljs-operator">=</span> message.getTargetPath();<br><span class="hljs-type">byte</span>[] bytes = message.getBytes();<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetPath);<br>fileOutputStream.write(bytes);<br><span class="hljs-keyword">if</span>(fileOutputStream != <span class="hljs-literal">null</span>)&#123;<br>    fileOutputStream.close();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;\n&quot;</span> +receiver + <span class="hljs-string">&quot;接收了&quot;</span> + sender + <span class="hljs-string">&quot;发送的文件并存入了&quot;</span> + targetPath);<br>&#125;<br><br></code></pre></td></tr></table></div></figure>    </div></div><p><strong>推送消息功能</strong></p><div class='spoiler collapsed'>    <div class='spoiler-title'>        点击显/隐内容    </div>    <div class='spoiler-content'>        <figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-dgmimdl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-dgmimdl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 一个独立线程负责推送消息<br> **/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendNewsToAllService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//可反复推送消息</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入你想推送的消息(输入exit表示退出推送服务线程):&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> Utility.readString(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">if</span>(news.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//设置要发送的数据包</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>            message.setSender(<span class="hljs-string">&quot;服务器&quot;</span>);<br>            message.setDataType(MessageType.MESSAGE_GROUP_MES);<br>            message.setContent(news);<br>            <span class="hljs-comment">//发送给所有线程</span><br>            HashMap&lt;String, ServerConnectClientThread&gt; hashMap = ManageClientConnectServiceThread.getHashMap();<br>            Iterator&lt;ServerConnectClientThread&gt; iterator = hashMap.values().iterator();<br>            <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> next.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<span class="hljs-comment">//发送数据包</span><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></div></figure>    </div></div><p>扩展部分：离线消息和离线文件<br><strong>离线消息</strong></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-eh35jyl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-eh35jyl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  监视线程，保证离线用户上线后第一时间收到消息</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OfflineUserPackage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    Message message;<br><br>    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(Message message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            <span class="hljs-comment">//从数据包里获取接收者</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> message.getReceiver();<br>            <span class="hljs-comment">//获取线程集合hashMap</span><br>            HashMap&lt;String, ServerConnectClientThread&gt; hashMap = ManageClientConnectServiceThread.getHashMap();<br>            <span class="hljs-keyword">if</span>(hashMap.get(receiver) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> hashMap.get(receiver);<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverConnectClientThread.getSocket();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());<br>                    oos.writeObject(message);<br>                    loop = <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></div></figure><p><strong>离线文件</strong></p><figure class="highlight java"><i class="iconfont icon-github-fill" type="button" data-toggle="collapse" data-target="#collapse-ombqvvl7vpalpw"></i><span>java</span><div class="collapse show" id="collapse-ombqvvl7vpalpw"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">给离线文件和消息都加了个筛选<br><span class="hljs-keyword">if</span>(hashMap.get(receiver) != <span class="hljs-literal">null</span> &amp;&amp; message.getDataType().equals(MessageType.MESSAGE_FILE_MES)) &#123;<br>                <span class="hljs-comment">//根据接收者获取对应线程</span><br>                <span class="hljs-type">ServerConnectClientThread</span> <span class="hljs-variable">serverConnectClientThread</span> <span class="hljs-operator">=</span> hashMap.get(receiver);<br>                <span class="hljs-comment">//根据线程获取socket</span><br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverConnectClientThread.getSocket();<br>                <span class="hljs-comment">//把读取到的数据发送到对应线程</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(outputStream);<br>                    oos.writeObject(message);<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-comment">//提示信息</span><br>                    System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + message.getSender() + <span class="hljs-string">&quot;发送文件给&quot;</span> + receiver);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></div></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程章节</title>
      <link href="/2022/09/03/java%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/09/03/java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b759f6e514531724e9e580705b6e6950bd14f18acaea66d5131de3519794726a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码为123456</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题</title>
      <link href="/2022/08/18/Hexo%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/08/18/Hexo%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="77d4b6f973f114ee1f1ba74226e22235317b14b7ed4a02fc84111e185c0352d2">0bca038eed8a1afa963dd59b310a40ff23496a676dc9db398cad9731bb19b7f966472a6db0f6e7f9071b0fc6cb21fbd3afd8d771058cd7c658409045a89e9544a50c74e6e8a6413f4cfbe61e98643bfa9df5829a2590f953004bf9911cdd5b11504050080491e08c52b76c10df7ba1e9ce92c65b99f00cb6af4bdc519fd7a25c134e4056744d4b92c1f8e03d5d0d9f04425ee57a62961048110c4ae5a2a1e91a2661de5252a7047c4935f8a49013dce67208c08f1f023d78597df3af33a721626d73e76b518976d8ccda47d2f7ddb6648f9da81a16e6660c7302f147987eb95f894e1a35acc8c87b6ea59a8c308820303a10d10e4c6de4e4e4f4f5cc71c723253dcc5df836aad96a4028ff3f60dbe716f88f00ae2b4f3888388f9ffece05b5bf330acbadfe0ff52f2bfacf6f4a9213c94feddd8d3d23ebffc1e939a68389595aedc3d8e817c792b11c33fbfa6470fcedc57a10657f6099957af9ac1e723ede51b88397c267bdd24fd85c603a2b54d3634946d08f4f40917bf0661e843160ca6672818001536717af68b8554f83e75a448f63f7c427af4b4ed868d1e3bd6246dd1b1191de987032f2769c0603ddca5d6e14217ffdd6157e77f2b905d9a8565e483ff8fab23f36ca21442eeafaa80e315f3a6cb748d24258aa74c805308899beffd986a0e524a5588f9cee3cfa6b6da6eb91b5214a917b4a0db491faa0e57b845b135ea793d3e9c80290d5cf1a199d263d39146cd70e06e105ab32632a39cc2bb2b1f7f755629303d95372cb3108b124ed05dc93bf59167855f03646ab48c647744ee838c5bfc29e91f98ed77b461e8fe14a2eccc4bf46ce021f8f5dc8a5d6316e5f12249abc13cef4f93166cdb85a4d8d8b32653d49e8a72942a93492ccc671ac8d7dfa3d9de05c11028db021cd3e91104da11da608b05374c98d918ab2ff1563714800890c49bd436924aeeb51d9b0e69bdd1d9184d84f5963f5b123f01fe8ccb1714455042431341eb7435f805c3c729fc90cb9cf497a468af90cb63de125123100e82c9dfc5cd3bc157efc330b527a2bee9dd7d2a6b6983c6cdd82a2d9c63794551890a0dae19df6c137d08d230f6d9c19026e26234d76de0f82de82e3156a608dfc7739c3f74bcc06029126a4469e7cf57352e6a8d3a3ad9b266433d7bf2371a4cdf56d58184a08f2755a8267a1a6234351348dad22ad398047e11a81e74f2bf090c878def98242c51bdf8f5b1f470903031acb7ec93bb4e32c623bd99f739a27c715b3a78feab0db2f430ad3c99014502730826494c74c3681d7de416d00a8613b03acb798128b3961cea4bda8e1297a3d786cc95a49bf3bc16cc9616bba5d8c6ec45a0b9b890a8fd7e8faf7a9187490a2513ab090d1e994919fd0e35f0b3edad5b6f1145280d442d927a64b821595016d0cfa3a3265eaa2207ce317db81c9d19d8c6939b22e2eaf0f119adbf018c0c37165bb4249a9c980632d85459d47bb0cbeeb9f44c6c190f65771b6e2393fb6993d2033eb8ff7171ff7a235079ac46fde09ad9cb88b9a2b14ecefc059aca4f3be1098502eed4cea08546c58dcfe0e7c2e78ae34f342148b774dfc9218eb0369d45901bd9a675c285659f574e179c8c7f4b8316de90b74aebcbee283c246e0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo和Github搭建个人博客</title>
      <link href="/2022/08/18/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/08/18/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="75c490ad1cce67e524a16d8f7a86b42f1d742ba6dda2fd8f5a1e482b0439428a">0bca038eed8a1afa963dd59b310a40ffcff8f184ee4b1145fe4c02fcaf6d464763dd5016051250aadd7b99817742c9b0a6cef8200686de0ea48ebac00fc90527479a9e54b2d6a48fbdf56e9761d093d58112f1615a927316850ddf04092bf7c26492660057654039d9dd429d59f93f32ee622e21c730975a8656a469af50d05904df769dda6a11fc99f3af137ad164b10a106441243f3832fcd73ebcf8cd7572cacfdc58a4cf282d8af821d2311a8bbfc65fd45658a623c69b6201676fecd3aab1ed41db1adf4f0dce0049905626b3d17358a592fd4f400a2923fda71f32f917f77725ca06f31e34f63f9e33b4bf5c29c7fc01d3c291f0244535fb03d4751fe44a8a4e340217c03de26098449dd010fcf4f0d9857cf90c7dbb58be96e6d5a817abf93bdd4ab6bdb80cb3c42d6091697ddd66da4747ed94fc26aa8d07e1c94242bd20d51abaf6efec287258e2c8c6323cced32ecab0c80eac99f57172a47efb270b3bb27c2555671003858ab7e61a76aa42df5a78c83a8a9d446be5903badbf874aeecdbc67082a273eeb0da6a73be5be1cec5ec3fc0a72996e9f00c6dc0afa449a042094d91057797f66822565fdf8285e769664c487cd0fbc9381f88811955221fdd5d84284b97c72e06c3cd3640a0f093112fb1c9f2263883511c618ffc06f2a68929dd5138a3e50a309608273af0a95325c681c1efb0717259b2f80c103d575fa3ce20f325578ceedc09317393f6cf8848c3d23b0596d286ea7064178832c5b8801a34cf88ef0a47e75b102ccff3fa9ebf204f54f6d4524284e43ee7e6a79b1695992ec6097e6c3eac482829d9144080a2253412a8f4eb43dff95c1a65d6920c76318c4c4c0abc8f3534b0dabede786368a6eb04f1e91e490e714f07e74ec95700692c6eaf4d4422054a8f131a91d729436459bf6d4ff4d15f3117d3fa7682f7ce8f4af0768b47e9d7eee4205b502512c5dbbff98c34abef62b04da307442b00f7f01081c55f261dc3a678eda5b03249c172664873db2a1075e5b0a0894e69f97bd0fbfcefe38397317cefc782252c6140a498ca12e8f33aa2b2ec50279365d7baa9a1379986b19771f587cbf70d3c5c4896a3537187a750e7141a194e0c2c339e7c97128eb060e890bf282d6d6919ca95df1f0db77cb6eec9cf85200d7a0f26d224e474b385f2fb689df47a1606c44bdb0cf140db8d7257c5f5a092a16c48af19e86304129276b877c4d4bf90b2fe5b541ad54ec32b1933b4b8aa321f98a02fe8450938def2e11136d85417d1c3bb8422cf603e3cef1d8c273ea571075fb966c1bd6c1e6e5e2fd9220ed52f0dfca9348cd178c768d6c996d9bd6ac39857b55869e5827c77d04e397bbc14033d68f7b68d34487a84533b5e7e004441cbd6cf8811b0d536fb6b1b5013cd838c1edd7a89dca14e2782cedf04e3a026df991c38ea6a18294214522101a1dd6c49e7d34270a3d31a4ed2a018ff1e35e019f1b297a74a7f2ab8feb1b3a591829a52f262544f227d2174ec0d02883e9d8fbb223454f3392974b7947dc59ad7d2800b69a2ac28c061860c48897236d3f89597ebd91140543ac4c336eb52e68b4fe487cc46f45b68d0e1315baa3727703ee888c030fdffc51f34698e24c30c51b468f8191a47399dc0fa68ed90181fb6840ea64367c448600d19573b49a19bb1b8fbe0cd8f8456b271f3c5422ceb107da6a7944e1c168bcd614a9a68aeb3730569cc2d4c0052ba735eecc6c4287bee01152ad9b9f9b62fcb30bc7b9980e1c956abbdd90f2b227abdf3141237548eccc64b64d6b7d75ee62e851b30a07e1a43015c7d238e0a56873fcc170643f0abd87612b6ed56a96684fa1770d5c1d4073db5b3aa19131835d593b31b60ffd0a3f3eec0c4b47d9919cc18457abb5b16f46a970e5bfa6283f42e0cdef52cde61f20d25cf4978b15736b00cbe7f8b62104d4fb16982e4416160c60f88d11518917547518cf91df449f1992987485d358372891e9e1d5ca18bf9eeacb6c17a8412a0858c93f6e9df9b4109d3c60995fd3189bb335b5d96ff0e08d08e6cc0e94d4c1cc35eaf7f52c5e16774a480a3eb82912d79be67994a1f0ec19caaa8cd623ea3f491cac362f0e41514fa8c0e05aa180ac47192943a8df71f6c38dcf7f3c3aec27f97018387322fbce6117e005cb6a0821af35cd969369f84b3d119f1d2e903413f0152c6037e03bce127dead732fb1b4f5514e1b809ee410074ed285a2259e3f88b1f1ba80380a0609bed3dfa3e33264a48c84cb20e2c36cfa16299459083a13c5efb1af4b00a1e80</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">password</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/2022/08/12/%E6%B5%8B%E5%BC%80%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/08/12/%E6%B5%8B%E5%BC%80%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后">  <script id="hbeData" type="hbeData" data-hmacdigest="c577811a148a96e8c0e3f3e86455e148f44e16c3b947fc4226542ecce8305ac6">0bca038eed8a1afa963dd59b310a40fff8d8e361c41ac739a8c86cfbb35bdad2de21f4f40b1059e57f5e6842db5fdaadc5d9cec6fc620bc739e11f6bc2dd203edfe426bfb1eb8d32c028e13cf472f0cc0d7c867ad93e3ca6907365e5ec418041b3e458e57e03636290cc71ec55af4ec7c7e618847bdbc9c811dcd2aaf78d2c456eecb179be30dbafa6331df1a960133c84f5984b73e902e13bd317f863e9647262cef5a3b7ea8712c9e2f7b0b63e9aca2e691611a95082f2e48f4ee4026d02dc740ee26b0d3a566e14974c760fa0ad829455beb0ae9e625f3c00fdf827b213601e4462253ce1df717eb4cc17fa807ccdf87e117135cd17ee828bb8cd570b9c14b2bf901ae5c5e5a607765a6b449994542ed9bd8054aadbe4a5a2dd5765b030dcada945ab23ce1fff16ec864c368af626925df0643b856c6124e0473b973dd655a367602c4db728a3497fc8ea948eeda2ea948630bd55b561494991f6848108d4b8e6aa878bcac1aeae981954a997fe6a0ddaa455e56a1f95a00442c3148d4020b66a2d247ac8a6da5b9c00979244ee0bf862f6621ea4d678f07c5fbdac4b9b67696fa7cea83317b663d3d7ad5538431267f4eefbedb6ea9b2b12544a45b7d4703265d3dd0fccdfd39cb6e2d768ea5465557e36977057ea107164acbadee64a587ad1d3f27e495c7ca1835743088388d469464c80f22e14422c20a95e6eb0892ce08d8ddaf3cad5124061a0be1a8a70f9e966abaff48f0c4cc545a39115e590ede502a8a65e704ee19503b9273d75663cf6bbdc6a6a3912cb2ddc34bf010c88de68a9b672363f40a4ea4803535fd3f472bf4894eb06a8e8ab18027d35e24c8012e4e1d4dd09e7617aee7b88f9db66530f556eec44f4ea5f4a68061ae4e1c9b555aa09ff8519792ff813286802c1ee34786ee6ee52a0f4a27fb413897a3fa6200376821f7479b7ff9a09a7cc9b3d3b49fd512369045561f051c0ec635e8d80a5e4edc620684e5ba83b65872097e9f0705f6b4547d61e730725b23256aa3133e21f0d7f390dac6d31a302ee35fb84714723bb7b284781ea2fb7f762a80a452b89bb402f02e12856c56e5ea560af100e64049084e5fe6b2ca8a11c10d65edfad9f998ab6d711dda1feb285304da13561fab8eb6686ec5ef8a6b9d0608449f5b34a274af75e72a79b71b22f7884dee60279724d45ddf4158d9a677510dfa461f050994d89fd1decd8b87b84d7413e987f16ca8532a2f04a040f5d175db7bcab2ffc8ec6a14af523e1c2b00ca34f24b180488facbb8d604a400e1ecd8e4704a0ce701712d1491ab1708bc636e3486fe87074db4fffe9500bf8f365ce210517cd437da659e0ca5e0787172eb983ff5deb52469494858611e7b42420f7ff1314c1f1a3632e2ee760b7ed160c7e2dd848281e0427761525106e1125c6aa66ad229778eb82d7ab14ebae4101af25dbe777c45617812a3a995704b5b2fc2aa2dcf8c133c8b53d05b8e41a2661a7838d27f3bc34fab9d1bb6216496ddcff64cda7f6eaa965edbb5b6ea81e59ce39ba2a3c22ce1bcb4db4e4404008ad8405a2384778c52f3f765afdbfa1f2ea60269825a0235ad06e850ae939ec36956b12657d409b1c820996ecdcf74e3afac0569f7d96f5117184396b0fc2e1e1415d14917e477bc7db43788cb6fcf9a55dff25e28e7e030d319d04a4816995c46e34c1fc966946b2b9a9cdba4cb687a3d1f7e7465679c4bdb19d38d183aa0961210605f354f231d33bc417f1edce11a8cdee7fbca0b155d09215382d00d5e4c49860e7893a5baa160c766e86975ff54dfdcfe8a2055734019271b129902ffff67870beb2b7c8f43f7c35a317e96c249e00385ec73a44dcf4d99f97e310971c91603f9a410c92a9d707855c9d0b6e960b11f3c6596d889619845c12bf6ea66cdb61de2e7106a88ccfcf31f2b1069ad21fdc790587083b10605778a3d4f540dff6d34de93be8053340059834120e221f4abbd89835bed79c194eab68d37cbc87cdd14cec7c14603b1deafdf608e7d49ec8011b50cf13cbddc3b65f8ac33441aa512ca9137042f8b7168a5fb4f5adb023218c4663b4ef06c226d4fd2539a8dc5491bcd7bfc8da37f03fbc68565e8f5c0ef503e3cf36ac3af6ea2c341a2291979489113f3ae1b60a2e1d98f54319631db59cfa5d40356a17614c2b774a088cfefb7f42ea9bd33c16132030937c9ff91b0540429b30e08e37b23389660c506d08105ec77e5c4b98e6dbc8b8ef347711bed670bd142e2274be9d9e63bdf32ad20672b6ab62df695bd0c361f795366f80cc795454ed773697a75edbacf67c102b8d3214d10d461a01e3a837dcdd563f82db3520fb359c7c642838542949fad53897472a42a8996ceaa09d2a9c5391a060e5139e29751576521543ad798744c9a9ca729cc8d870bca4293a58bc3d319a0e10641590e0b671819cbc382d169a9a5fec8b2173fae2b658e07e26463417a85f1c9dbfae0d172be8e6d979b0f0987f1e7188b59a8a4bced040d3311c631d291b982b1c5e31b1244d4b85d74b86884050fa16f8ead5f5b584931131d392ebb84ec0d8db61160e4e1fd0d81330c205e29e66a96930fcf04c9556f230715e7d0cc89e00df4772cbef22abb1260b5f23a416737cd486ff7594dec4490cfc0a84132d035a6f895d7590e214f566f49135e00fd5b5ca2c62c10cde0b1ebe9c5bd337b9bc304f962e82f80931f1653dc0f08b426b1c9583e0c883c19e07b05d08356a4992a9123345275f8b3c7ff60c2e6e4c3f12a15f32789f1d2b96bdd472aaa7e9c6b877e376dcc6004fadb56f17b56ba9d8dfca79fec869b631ab972933a14a73f888eff76e657717258ba9e8004ef8471fdbace9371c87386878f9b9d2a6cc6a799906d29e86bcedf30cb8c5348296fe47ec6fc2afb1dcdbe99fdcce11b28e7fea538051add203d59da087fcd653e251e9f47a94ac525ffc1bc552beef690d29dca125de01363c7153f718881d160112dca09cf62a05fed3ab2463d197bb7233c41fe17c045e5509305324b9c85d643854da11c1aa90a23f3ce69588bb93dc95f7348978e2ab6be60f5261874b6929b4375381741db9e0150a662dcc4081497b287a845c3cf85342c7db6460ae3b0af22109c365561039796ed098a971b58f9a378ca576e77c2b712c71183b6b3b34153206fca8dab5ef37a9778069c9ec8e5744fb7802e9e49f4f7990b0a9765caea83ab9622245198d0d693098110cf9f4f28f9d37aa9e0d70f4d14d3910a2c7a59fdfdc8884930152e8dac30b0599629ec75a66f708d140acea275198e74d13775385f828ca396f2efa3244f42243689e8e5ca116a5cfd458ab18e6d834a9844969f08937191892a79b60004ff5e82c5ed1ee12013a3f459bd70fac42d9cf2abc1bffa0964796028c65436c32df9c3d9e8dbcd04eec6082413da79f68d13e8e2cee8d696fa2397cd9886df8722c715f3f9a5e7e7208e2929fc711849f0d0a59010a8014006054272894b75c23f442fcd1940df69f5fd9fc35fb2f38b38728c5333c587a30f0bb5143f7f0c110230163d1fa9b88f0592ebc2fc1814eaaaee02dff6d76add3978cd35b847d2f5003f059ffb7f500d1ef0b19b43264b985ed7e488bd76615325cff10ae7c60bb5fa7392715b51fbde93c19b06702936e20710607f8673a3f2aa41deb6df65583e0d9589b2235a47a7ef099fdf0e37d8abf6a90ba8ed8a7ab7d3370a3fe04fad6ea7e57cb93fb4ff5e000a55787350e8925b2ff6804574ce6a94f6d15a7a6c44a17b7109836e19f2cafa0b7a1d3975841135bbdb5ba998f1c45f72f4fa3849482dacb8845c39320ed60e683c8303b5dd036a0fdc3439e8b519140254d9c38e53e2bf47a92496bf2161aba99a84c3eeb1fae421501cf1cd15f1986a3408d810129c552787683d63f73208f617563adf7c203c862efeeadaf590d70a6f0e4335aa2951a34a298a12616c6f7c5c9a6da53bc9eab713bdb2161c1cddb6fc363e2ee342a64bef49480fdd2bc8d688854050c29725105170b2cb17664b4a04d6eff70ec7f269f93b939bfcc282d678f464880614240fe086c4e7e12550ebf4a042f62317a12479a603634eebb8c1ffb65fee41ddb7bd7239902682047a3e606e43fd9766e51735d4b708b8bc9db65e9cb8832f15edd85375c826bfd98bb2e9f88433a74156a525d3b2409433eff84bf6ba12e26c44d74add0b7d62ead70ef39a7cf925debf49c91fbf9c8c65658a3f27d782db72467f4e640a5baf75e3859f2241d0776daf3796dcb2e0712370e4c311003831db4fae20255b67cad8088445c1be88d40967f2657ca71372aeebf2a16b73a85b048ab9c340a3a7e904ea0283c8599dbc3d91f3c7fb6f7d2b9bc1ebc57d0df81fe0b326594a3f8b89e463fb97e8102e4ac9eccfa53ac67b4b490761e48aadc44344e0f8eb77cb687edd6c03234194369922b332f924bc3fd02f29095bbaecba8cff6c490f07ab2c4e72a797f04778dd3a7c8b039e33fd0caf779c02089d9aaea78490f01e17065271471ec6d01ff7b537c91700a1a2b28d397fe03b33e459fc146cfaae4428b0f3c06bfb067de88ca9661845e8a9b2de6d7763470dfe33ac25de9a77e85fb8681470876c7dc5125b0c690cba677d354984e6b4c9b07098e49891b28a05035155d6ac777cf10399ca2afac14a1bd1dc657292ac0801ecd8c389e820b7de9fa0a17f72f8d0e407beb96546bc1df98b706959139a0f3abb9e081fdbf230c96c4618d1f450214282167b9d7876b6354ab36ec4ef66a94c1a7e725c601e935743449</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
